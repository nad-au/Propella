/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V1.Client.Client;
using Domain.Api.V1.Client.Model;

namespace Domain.Api.V1.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgenciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a test agency
        /// </summary>
        /// <remarks>
        /// Enables automatic creation of a test agency in our sandbox environment.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DomainAgencyServiceV2ModelAgency</returns>
        DomainAgencyServiceV2ModelAgency AgenciesCreateTestAgency();

        /// <summary>
        /// Creates a test agency
        /// </summary>
        /// <remarks>
        /// Enables automatic creation of a test agency in our sandbox environment.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DomainAgencyServiceV2ModelAgency</returns>
        ApiResponse<DomainAgencyServiceV2ModelAgency> AgenciesCreateTestAgencyWithHttpInfo();
        /// <summary>
        /// Retrieves a specific agency details.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>DomainAgencyServiceV2ModelAgency</returns>
        DomainAgencyServiceV2ModelAgency AgenciesGet(int id);

        /// <summary>
        /// Retrieves a specific agency details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>ApiResponse of DomainAgencyServiceV2ModelAgency</returns>
        ApiResponse<DomainAgencyServiceV2ModelAgency> AgenciesGetWithHttpInfo(int id);
        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;</returns>
        List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse> AgenciesGetBundleContracts(int id);

        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>ApiResponse of List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;</returns>
        ApiResponse<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>> AgenciesGetBundleContractsWithHttpInfo(int id);
        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria.
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1ListingsListing> AgenciesGetListings(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria.
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListing>> AgenciesGetListingsWithHttpInfo(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Retrieves statistics across all channels for a specific agency.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1ListingsStatistics> AgenciesGetStatistics(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Retrieves statistics across all channels for a specific agency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> AgenciesGetStatisticsWithHttpInfo(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Retrieves the active subscriptions for the specific agency
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <returns>List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;</returns>
        List<DomainAgencyServiceV1ModelAgencySubscriptionDto> AgenciesGetSubscriptions(int id, string channel = default(string));

        /// <summary>
        /// Retrieves the active subscriptions for the specific agency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;</returns>
        ApiResponse<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>> AgenciesGetSubscriptionsWithHttpInfo(int id, string channel = default(string));
        /// <summary>
        /// Retrieves summary of agency search
        /// </summary>
        /// <remarks>
        /// Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns></returns>
        void AgenciesHead(string q, int? pageNumber = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Retrieves summary of agency search
        /// </summary>
        /// <remarks>
        /// Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AgenciesHeadWithHttpInfo(string q, int? pageNumber = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;</returns>
        List<DomainAgencyServiceV2ModelAgencySummary> AgenciesSearch(string q, int? pageNumber = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;</returns>
        ApiResponse<List<DomainAgencyServiceV2ModelAgencySummary>> AgenciesSearchWithHttpInfo(string q, int? pageNumber = default(int?), int? pageSize = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgenciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a test agency
        /// </summary>
        /// <remarks>
        /// Enables automatic creation of a test agency in our sandbox environment.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainAgencyServiceV2ModelAgency</returns>
        System.Threading.Tasks.Task<DomainAgencyServiceV2ModelAgency> AgenciesCreateTestAgencyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a test agency
        /// </summary>
        /// <remarks>
        /// Enables automatic creation of a test agency in our sandbox environment.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainAgencyServiceV2ModelAgency)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainAgencyServiceV2ModelAgency>> AgenciesCreateTestAgencyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific agency details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainAgencyServiceV2ModelAgency</returns>
        System.Threading.Tasks.Task<DomainAgencyServiceV2ModelAgency> AgenciesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific agency details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainAgencyServiceV2ModelAgency)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainAgencyServiceV2ModelAgency>> AgenciesGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>> AgenciesGetBundleContractsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>>> AgenciesGetBundleContractsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria.
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsListing>> AgenciesGetListingsAsync(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria.
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListing>>> AgenciesGetListingsWithHttpInfoAsync(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves statistics across all channels for a specific agency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> AgenciesGetStatisticsAsync(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves statistics across all channels for a specific agency.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>> AgenciesGetStatisticsWithHttpInfoAsync(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the active subscriptions for the specific agency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;</returns>
        System.Threading.Tasks.Task<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>> AgenciesGetSubscriptionsAsync(int id, string channel = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the active subscriptions for the specific agency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>>> AgenciesGetSubscriptionsWithHttpInfoAsync(int id, string channel = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves summary of agency search
        /// </summary>
        /// <remarks>
        /// Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AgenciesHeadAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves summary of agency search
        /// </summary>
        /// <remarks>
        /// Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AgenciesHeadWithHttpInfoAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;</returns>
        System.Threading.Tasks.Task<List<DomainAgencyServiceV2ModelAgencySummary>> AgenciesSearchAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainAgencyServiceV2ModelAgencySummary>>> AgenciesSearchWithHttpInfoAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgenciesApi : IAgenciesApiSync, IAgenciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgenciesApi : IAgenciesApi
    {
        private Domain.Api.V1.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgenciesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgenciesApi(String basePath)
        {
            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                new Domain.Api.V1.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgenciesApi(Domain.Api.V1.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AgenciesApi(Domain.Api.V1.Client.Client.ISynchronousClient client, Domain.Api.V1.Client.Client.IAsynchronousClient asyncClient, Domain.Api.V1.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V1.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V1.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a test agency Enables automatic creation of a test agency in our sandbox environment.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DomainAgencyServiceV2ModelAgency</returns>
        public DomainAgencyServiceV2ModelAgency AgenciesCreateTestAgency()
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency> localVarResponse = AgenciesCreateTestAgencyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a test agency Enables automatic creation of a test agency in our sandbox environment.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DomainAgencyServiceV2ModelAgency</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency> AgenciesCreateTestAgencyWithHttpInfo()
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DomainAgencyServiceV2ModelAgency>("/v1/agencies/_testAgency", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesCreateTestAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a test agency Enables automatic creation of a test agency in our sandbox environment.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainAgencyServiceV2ModelAgency</returns>
        public async System.Threading.Tasks.Task<DomainAgencyServiceV2ModelAgency> AgenciesCreateTestAgencyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency> localVarResponse = await AgenciesCreateTestAgencyWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a test agency Enables automatic creation of a test agency in our sandbox environment.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainAgencyServiceV2ModelAgency)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency>> AgenciesCreateTestAgencyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DomainAgencyServiceV2ModelAgency>("/v1/agencies/_testAgency", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesCreateTestAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific agency details. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>DomainAgencyServiceV2ModelAgency</returns>
        public DomainAgencyServiceV2ModelAgency AgenciesGet(int id)
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency> localVarResponse = AgenciesGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific agency details. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>ApiResponse of DomainAgencyServiceV2ModelAgency</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency> AgenciesGetWithHttpInfo(int id)
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainAgencyServiceV2ModelAgency>("/v1/agencies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific agency details. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainAgencyServiceV2ModelAgency</returns>
        public async System.Threading.Tasks.Task<DomainAgencyServiceV2ModelAgency> AgenciesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency> localVarResponse = await AgenciesGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific agency details. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainAgencyServiceV2ModelAgency)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<DomainAgencyServiceV2ModelAgency>> AgenciesGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainAgencyServiceV2ModelAgency>("/v1/agencies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;</returns>
        public List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse> AgenciesGetBundleContracts(int id)
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>> localVarResponse = AgenciesGetBundleContractsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <returns>ApiResponse of List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>> AgenciesGetBundleContractsWithHttpInfo(int id)
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>>("/v1/agencies/{id}/bundlecontracts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetBundleContracts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>> AgenciesGetBundleContractsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>> localVarResponse = await AgenciesGetBundleContractsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the product bundle contracts applicable to the specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainBookingServiceV1ModelProductBundleContractDetailsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>>> AgenciesGetBundleContractsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>>("/v1/agencies/{id}/bundlecontracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetBundleContracts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria. Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1ListingsListing> AgenciesGetListings(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListing>> localVarResponse = AgenciesGetListingsWithHttpInfo(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria. Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListing>> AgenciesGetListingsWithHttpInfo(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (listingStatusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "listingStatusFilter", listingStatusFilter));
            }
            if (dateUpdatedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "dateUpdatedSince", dateUpdatedSince));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainPublicAdapterWebApiModelsV1ListingsListing>>("/v1/agencies/{id}/listings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetListings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria. Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsListing>> AgenciesGetListingsAsync(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListing>> localVarResponse = await AgenciesGetListingsWithHttpInfoAsync(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves listings across all channels for a specific agency matching specified criteria. Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="listingStatusFilter">Filter for listing status (optional)</param>
        /// <param name="dateUpdatedSince">Filter to remove listings not updated since before the given date time (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsListing&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListing>>> AgenciesGetListingsWithHttpInfoAsync(int id, string listingStatusFilter = default(string), DateTime? dateUpdatedSince = default(DateTime?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (listingStatusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "listingStatusFilter", listingStatusFilter));
            }
            if (dateUpdatedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "dateUpdatedSince", dateUpdatedSince));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainPublicAdapterWebApiModelsV1ListingsListing>>("/v1/agencies/{id}/listings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetListings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves statistics across all channels for a specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1ListingsStatistics> AgenciesGetStatistics(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> localVarResponse = AgenciesGetStatisticsWithHttpInfo(id, timePeriod, statusFilter, pageNumber, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves statistics across all channels for a specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> AgenciesGetStatisticsWithHttpInfo(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (statusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "statusFilter", statusFilter));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>("/v1/agencies/{id}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves statistics across all channels for a specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> AgenciesGetStatisticsAsync(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> localVarResponse = await AgenciesGetStatisticsWithHttpInfoAsync(id, timePeriod, statusFilter, pageNumber, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves statistics across all channels for a specific agency. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="timePeriod">Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;. (optional)</param>
        /// <param name="statusFilter">Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60; (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="pageSize">Page size (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>> AgenciesGetStatisticsWithHttpInfoAsync(int id, string timePeriod = default(string), string statusFilter = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (statusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "statusFilter", statusFilter));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>("/v1/agencies/{id}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the active subscriptions for the specific agency 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <returns>List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;</returns>
        public List<DomainAgencyServiceV1ModelAgencySubscriptionDto> AgenciesGetSubscriptions(int id, string channel = default(string))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>> localVarResponse = AgenciesGetSubscriptionsWithHttpInfo(id, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the active subscriptions for the specific agency 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>> AgenciesGetSubscriptionsWithHttpInfo(int id, string channel = default(string))
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>>("/v1/agencies/{id}/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the active subscriptions for the specific agency 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>> AgenciesGetSubscriptionsAsync(int id, string channel = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>> localVarResponse = await AgenciesGetSubscriptionsWithHttpInfoAsync(id, channel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the active subscriptions for the specific agency 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agency identifier</param>
        /// <param name="channel">Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainAgencyServiceV1ModelAgencySubscriptionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>>> AgenciesGetSubscriptionsWithHttpInfoAsync(int id, string channel = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainAgencyServiceV1ModelAgencySubscriptionDto>>("/v1/agencies/{id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesGetSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves summary of agency search Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns></returns>
        public void AgenciesHead(string q, int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            AgenciesHeadWithHttpInfo(q, pageNumber, pageSize);
        }

        /// <summary>
        /// Retrieves summary of agency search Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<Object> AgenciesHeadWithHttpInfo(string q, int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'q' when calling AgenciesApi->AgenciesHead");

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Head<Object>("/v1/agencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves summary of agency search Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AgenciesHeadAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AgenciesHeadWithHttpInfoAsync(q, pageNumber, pageSize, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves summary of agency search Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<Object>> AgenciesHeadWithHttpInfoAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'q' when calling AgenciesApi->AgenciesHead");


            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.HeadAsync<Object>("/v1/agencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria. &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;</returns>
        public List<DomainAgencyServiceV2ModelAgencySummary> AgenciesSearch(string q, int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV2ModelAgencySummary>> localVarResponse = AgenciesSearchWithHttpInfo(q, pageNumber, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria. &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV2ModelAgencySummary>> AgenciesSearchWithHttpInfo(string q, int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'q' when calling AgenciesApi->AgenciesSearch");

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainAgencyServiceV2ModelAgencySummary>>("/v1/agencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria. &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainAgencyServiceV2ModelAgencySummary>> AgenciesSearchAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV2ModelAgencySummary>> localVarResponse = await AgenciesSearchWithHttpInfoAsync(q, pageNumber, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves summary of agencies matching the specified criteria. &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainAgencyServiceV2ModelAgencySummary&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<List<DomainAgencyServiceV2ModelAgencySummary>>> AgenciesSearchWithHttpInfoAsync(string q, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'q' when calling AgenciesApi->AgenciesSearch");


            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainAgencyServiceV2ModelAgencySummary>>("/v1/agencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgenciesSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
