/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V1.Client.Client;
using Domain.Api.V1.Client.Model;

namespace Domain.Api.V1.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves demographic information
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <returns>DomainDemographicsServiceV1ModelDemographicsResultsModel</returns>
        DomainDemographicsServiceV1ModelDemographicsResultsModel DemographicsGet(string level, int id, string types = default(string), string year = default(string));

        /// <summary>
        /// Retrieves demographic information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <returns>ApiResponse of DomainDemographicsServiceV1ModelDemographicsResultsModel</returns>
        ApiResponse<DomainDemographicsServiceV1ModelDemographicsResultsModel> DemographicsGetWithHttpInfo(string level, int id, string types = default(string), string year = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves demographic information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDemographicsServiceV1ModelDemographicsResultsModel</returns>
        System.Threading.Tasks.Task<DomainDemographicsServiceV1ModelDemographicsResultsModel> DemographicsGetAsync(string level, int id, string types = default(string), string year = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves demographic information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDemographicsServiceV1ModelDemographicsResultsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainDemographicsServiceV1ModelDemographicsResultsModel>> DemographicsGetWithHttpInfoAsync(string level, int id, string types = default(string), string year = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsApi : IDemographicsApiSync, IDemographicsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DemographicsApi : IDemographicsApi
    {
        private Domain.Api.V1.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DemographicsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DemographicsApi(String basePath)
        {
            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                new Domain.Api.V1.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DemographicsApi(Domain.Api.V1.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DemographicsApi(Domain.Api.V1.Client.Client.ISynchronousClient client, Domain.Api.V1.Client.Client.IAsynchronousClient asyncClient, Domain.Api.V1.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V1.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V1.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves demographic information 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <returns>DomainDemographicsServiceV1ModelDemographicsResultsModel</returns>
        public DomainDemographicsServiceV1ModelDemographicsResultsModel DemographicsGet(string level, int id, string types = default(string), string year = default(string))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainDemographicsServiceV1ModelDemographicsResultsModel> localVarResponse = DemographicsGetWithHttpInfo(level, id, types, year);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves demographic information 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <returns>ApiResponse of DomainDemographicsServiceV1ModelDemographicsResultsModel</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<DomainDemographicsServiceV1ModelDemographicsResultsModel> DemographicsGetWithHttpInfo(string level, int id, string types = default(string), string year = default(string))
        {
            // verify the required parameter 'level' is set
            if (level == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'level' when calling DemographicsApi->DemographicsGet");

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "types", types));
            }
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainDemographicsServiceV1ModelDemographicsResultsModel>("/v1/demographics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DemographicsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves demographic information 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDemographicsServiceV1ModelDemographicsResultsModel</returns>
        public async System.Threading.Tasks.Task<DomainDemographicsServiceV1ModelDemographicsResultsModel> DemographicsGetAsync(string level, int id, string types = default(string), string year = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainDemographicsServiceV1ModelDemographicsResultsModel> localVarResponse = await DemographicsGetWithHttpInfoAsync(level, id, types, year, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves demographic information 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;</param>
        /// <param name="id">Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.</param>
        /// <param name="types">Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60; (optional)</param>
        /// <param name="year">Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDemographicsServiceV1ModelDemographicsResultsModel)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<DomainDemographicsServiceV1ModelDemographicsResultsModel>> DemographicsGetWithHttpInfoAsync(string level, int id, string types = default(string), string year = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'level' is set
            if (level == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'level' when calling DemographicsApi->DemographicsGet");


            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "types", types));
            }
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainDemographicsServiceV1ModelDemographicsResultsModel>("/v1/demographics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DemographicsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
