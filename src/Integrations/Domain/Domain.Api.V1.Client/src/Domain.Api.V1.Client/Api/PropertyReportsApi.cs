/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V1.Client.Client;
using Domain.Api.V1.Client.Model;

namespace Domain.Api.V1.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyReportsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves a property report based on query parameters
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <returns>DomainPropertyReportServiceV1ModelPropertyReportGenerationResult</returns>
        DomainPropertyReportServiceV1ModelPropertyReportGenerationResult PropertyReportsGet(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string));

        /// <summary>
        /// Retrieves a property report based on query parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <returns>ApiResponse of DomainPropertyReportServiceV1ModelPropertyReportGenerationResult</returns>
        ApiResponse<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult> PropertyReportsGetWithHttpInfo(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyReportsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves a property report based on query parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPropertyReportServiceV1ModelPropertyReportGenerationResult</returns>
        System.Threading.Tasks.Task<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult> PropertyReportsGetAsync(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a property report based on query parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPropertyReportServiceV1ModelPropertyReportGenerationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult>> PropertyReportsGetWithHttpInfoAsync(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyReportsApi : IPropertyReportsApiSync, IPropertyReportsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropertyReportsApi : IPropertyReportsApi
    {
        private Domain.Api.V1.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyReportsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyReportsApi(String basePath)
        {
            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                new Domain.Api.V1.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropertyReportsApi(Domain.Api.V1.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyReportsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PropertyReportsApi(Domain.Api.V1.Client.Client.ISynchronousClient client, Domain.Api.V1.Client.Client.IAsynchronousClient asyncClient, Domain.Api.V1.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V1.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V1.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves a property report based on query parameters 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <returns>DomainPropertyReportServiceV1ModelPropertyReportGenerationResult</returns>
        public DomainPropertyReportServiceV1ModelPropertyReportGenerationResult PropertyReportsGet(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult> localVarResponse = PropertyReportsGetWithHttpInfo(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a property report based on query parameters 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <returns>ApiResponse of DomainPropertyReportServiceV1ModelPropertyReportGenerationResult</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult> PropertyReportsGetWithHttpInfo(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string))
        {
            // verify the required parameter 'propertyType' is set
            if (propertyType == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'propertyType' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'streetNumber' is set
            if (streetNumber == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'streetNumber' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'streetName' is set
            if (streetName == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'streetName' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'suburb' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'state' when calling PropertyReportsApi->PropertyReportsGet");

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "propertyType", propertyType));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "streetNumber", streetNumber));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "streetName", streetName));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "suburb", suburb));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            if (unitNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "unitNumber", unitNumber));
            }
            if (streetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "streetType", streetType));
            }
            if (postcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "postcode", postcode));
            }
            if (areaSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "areaSize", areaSize));
            }
            if (bedrooms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "bedrooms", bedrooms));
            }
            if (bathrooms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "bathrooms", bathrooms));
            }
            if (parking != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "parking", parking));
            }
            if (preparedFor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "preparedFor", preparedFor));
            }
            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "productCode", productCode));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult>("/v1/propertyReports", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyReportsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a property report based on query parameters 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPropertyReportServiceV1ModelPropertyReportGenerationResult</returns>
        public async System.Threading.Tasks.Task<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult> PropertyReportsGetAsync(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult> localVarResponse = await PropertyReportsGetWithHttpInfoAsync(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a property report based on query parameters 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyType">Type of property &#x60;House&#x60;, &#x60;Unit&#x60;</param>
        /// <param name="streetNumber">Street number</param>
        /// <param name="streetName">Street name</param>
        /// <param name="suburb">Suburb e.g. &#x60;Pyrmont&#x60;</param>
        /// <param name="state">State e.g. &#x60;NSW&#x60;</param>
        /// <param name="unitNumber">Unit number (optional)</param>
        /// <param name="streetType">Street type e.g. &#x60;Pl&#x60; (optional)</param>
        /// <param name="postcode">Postcode e.g. &#x60;2009&#x60; (optional)</param>
        /// <param name="areaSize">Area size (optional)</param>
        /// <param name="bedrooms">Number of bedrooms (optional)</param>
        /// <param name="bathrooms">Number of bathrooms (optional)</param>
        /// <param name="parking">Number of parking spots (optional)</param>
        /// <param name="preparedFor">\&quot;Prepared for\&quot; information (optional)</param>
        /// <param name="productCode">Report product code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPropertyReportServiceV1ModelPropertyReportGenerationResult)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult>> PropertyReportsGetWithHttpInfoAsync(string propertyType, string streetNumber, string streetName, string suburb, string state, string unitNumber = default(string), string streetType = default(string), string postcode = default(string), int? areaSize = default(int?), int? bedrooms = default(int?), int? bathrooms = default(int?), int? parking = default(int?), string preparedFor = default(string), string productCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'propertyType' is set
            if (propertyType == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'propertyType' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'streetNumber' is set
            if (streetNumber == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'streetNumber' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'streetName' is set
            if (streetName == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'streetName' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'suburb' when calling PropertyReportsApi->PropertyReportsGet");

            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'state' when calling PropertyReportsApi->PropertyReportsGet");


            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "propertyType", propertyType));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "streetNumber", streetNumber));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "streetName", streetName));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "suburb", suburb));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            if (unitNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "unitNumber", unitNumber));
            }
            if (streetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "streetType", streetType));
            }
            if (postcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "postcode", postcode));
            }
            if (areaSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "areaSize", areaSize));
            }
            if (bedrooms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "bedrooms", bedrooms));
            }
            if (bathrooms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "bathrooms", bathrooms));
            }
            if (parking != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "parking", parking));
            }
            if (preparedFor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "preparedFor", preparedFor));
            }
            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "productCode", productCode));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult>("/v1/propertyReports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyReportsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
