/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V1.Client.Client;
using Domain.Api.V1.Client.Model;

namespace Domain.Api.V1.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISalesResultsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves sales results for a given city
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary</returns>
        DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary SalesResultsGet(string city);

        /// <summary>
        /// Retrieves sales results for a given city
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>ApiResponse of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary</returns>
        ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary> SalesResultsGetWithHttpInfo(string city);
        /// <summary>
        /// Retrieves metadata regarding sales result data
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate</returns>
        DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate SalesResultsHead();

        /// <summary>
        /// Retrieves metadata regarding sales result data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate</returns>
        ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate> SalesResultsHeadWithHttpInfo();
        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary> SalesResultsListings(string city);

        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>> SalesResultsListingsWithHttpInfo(string city);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISalesResultsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves sales results for a given city
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary</returns>
        System.Threading.Tasks.Task<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary> SalesResultsGetAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves sales results for a given city
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary>> SalesResultsGetWithHttpInfoAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves metadata regarding sales result data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate</returns>
        System.Threading.Tasks.Task<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate> SalesResultsHeadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves metadata regarding sales result data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate>> SalesResultsHeadWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>> SalesResultsListingsAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>>> SalesResultsListingsWithHttpInfoAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISalesResultsApi : ISalesResultsApiSync, ISalesResultsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SalesResultsApi : ISalesResultsApi
    {
        private Domain.Api.V1.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesResultsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SalesResultsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesResultsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SalesResultsApi(String basePath)
        {
            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                new Domain.Api.V1.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesResultsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SalesResultsApi(Domain.Api.V1.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesResultsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SalesResultsApi(Domain.Api.V1.Client.Client.ISynchronousClient client, Domain.Api.V1.Client.Client.IAsynchronousClient asyncClient, Domain.Api.V1.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V1.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V1.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves sales results for a given city 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary</returns>
        public DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary SalesResultsGet(string city)
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary> localVarResponse = SalesResultsGetWithHttpInfo(city);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves sales results for a given city 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>ApiResponse of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary> SalesResultsGetWithHttpInfo(string city)
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'city' when calling SalesResultsApi->SalesResultsGet");

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("city", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(city)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary>("/v1/salesResults/{city}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesResultsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves sales results for a given city 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary</returns>
        public async System.Threading.Tasks.Task<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary> SalesResultsGetAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary> localVarResponse = await SalesResultsGetWithHttpInfoAsync(city, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves sales results for a given city 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary>> SalesResultsGetWithHttpInfoAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'city' when calling SalesResultsApi->SalesResultsGet");


            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("city", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(city)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary>("/v1/salesResults/{city}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesResultsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves metadata regarding sales result data 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate</returns>
        public DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate SalesResultsHead()
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate> localVarResponse = SalesResultsHeadWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves metadata regarding sales result data 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate> SalesResultsHeadWithHttpInfo()
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate>("/v1/salesResults/_head", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesResultsHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves metadata regarding sales result data 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate</returns>
        public async System.Threading.Tasks.Task<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate> SalesResultsHeadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate> localVarResponse = await SalesResultsHeadWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves metadata regarding sales result data 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate>> SalesResultsHeadWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsDate>("/v1/salesResults/_head", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesResultsHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary> SalesResultsListings(string city)
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>> localVarResponse = SalesResultsListingsWithHttpInfo(city);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>> SalesResultsListingsWithHttpInfo(string city)
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'city' when calling SalesResultsApi->SalesResultsListings");

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("city", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(city)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>>("/v1/salesResults/{city}/listings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesResultsListings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>> SalesResultsListingsAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>> localVarResponse = await SalesResultsListingsWithHttpInfoAsync(city, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves listing summaries corresponding to the sales results 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>>> SalesResultsListingsWithHttpInfoAsync(string city, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new Domain.Api.V1.Client.Client.ApiException(400, "Missing required parameter 'city' when calling SalesResultsApi->SalesResultsListings");


            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("city", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(city)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary>>("/v1/salesResults/{city}/listings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesResultsListings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
