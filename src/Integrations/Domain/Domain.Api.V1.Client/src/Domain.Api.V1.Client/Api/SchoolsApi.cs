/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V1.Client.Client;
using Domain.Api.V1.Client.Model;

namespace Domain.Api.V1.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves a specific school
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <returns>DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool</returns>
        DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool SchoolsGet(int id);

        /// <summary>
        /// Retrieves a specific school
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <returns>ApiResponse of DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool</returns>
        ApiResponse<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> SchoolsGetWithHttpInfo(int id);
        /// <summary>
        /// Searches schools based on specified criteria
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> SchoolsSearch(string coordinate = default(string));

        /// <summary>
        /// Searches schools based on specified criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> SchoolsSearchWithHttpInfo(string coordinate = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves a specific school
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool</returns>
        System.Threading.Tasks.Task<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> SchoolsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific school
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> SchoolsGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Searches schools based on specified criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> SchoolsSearchAsync(string coordinate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Searches schools based on specified criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>>> SchoolsSearchWithHttpInfoAsync(string coordinate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApi : ISchoolsApiSync, ISchoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchoolsApi : ISchoolsApi
    {
        private Domain.Api.V1.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsApi(String basePath)
        {
            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                new Domain.Api.V1.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchoolsApi(Domain.Api.V1.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V1.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchoolsApi(Domain.Api.V1.Client.Client.ISynchronousClient client, Domain.Api.V1.Client.Client.IAsynchronousClient asyncClient, Domain.Api.V1.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V1.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V1.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V1.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V1.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves a specific school 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <returns>DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool</returns>
        public DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool SchoolsGet(int id)
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> localVarResponse = SchoolsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific school 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <returns>ApiResponse of DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> SchoolsGetWithHttpInfo(int id)
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>("/v1/locations/schools/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchoolsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific school 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool</returns>
        public async System.Threading.Tasks.Task<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> SchoolsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> localVarResponse = await SchoolsGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific school 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">School identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> SchoolsGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>("/v1/locations/schools/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchoolsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searches schools based on specified criteria 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> SchoolsSearch(string coordinate = default(string))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> localVarResponse = SchoolsSearchWithHttpInfo(coordinate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searches schools based on specified criteria 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;</returns>
        public Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> SchoolsSearchWithHttpInfo(string coordinate = default(string))
        {
            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (coordinate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "coordinate", coordinate));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>>("/v1/locations/schools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchoolsSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searches schools based on specified criteria 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> SchoolsSearchAsync(string coordinate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>> localVarResponse = await SchoolsSearchWithHttpInfoAsync(coordinate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searches schools based on specified criteria 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinate">Filter schools to include the specified coordinate in their catchment area (lat,long) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>>> SchoolsSearchWithHttpInfoAsync(string coordinate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (coordinate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.Client.ClientUtils.ParameterToMultiMap("", "coordinate", coordinate));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>>("/v1/locations/schools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchoolsSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
