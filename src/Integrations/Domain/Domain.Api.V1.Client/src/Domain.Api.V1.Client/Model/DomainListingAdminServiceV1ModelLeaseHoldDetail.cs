/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Contains additional details about a business listing
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.LeaseHoldDetail")]
    public partial class DomainListingAdminServiceV1ModelLeaseHoldDetail : IEquatable<DomainListingAdminServiceV1ModelLeaseHoldDetail>, IValidatableObject
    {
        /// <summary>
        /// Rent period for the existing lease, can be: [&#39;perMonth&#39;, &#39;perAnnum&#39;]
        /// </summary>
        /// <value>Rent period for the existing lease, can be: [&#39;perMonth&#39;, &#39;perAnnum&#39;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LeaseholdRentPeriodEnum
        {
            /// <summary>
            /// Enum PerMonth for value: perMonth
            /// </summary>
            [EnumMember(Value = "perMonth")]
            PerMonth = 1,

            /// <summary>
            /// Enum PerAnnum for value: perAnnum
            /// </summary>
            [EnumMember(Value = "perAnnum")]
            PerAnnum = 2

        }

        /// <summary>
        /// Rent period for the existing lease, can be: [&#39;perMonth&#39;, &#39;perAnnum&#39;]
        /// </summary>
        /// <value>Rent period for the existing lease, can be: [&#39;perMonth&#39;, &#39;perAnnum&#39;]</value>
        [DataMember(Name = "leaseholdRentPeriod", EmitDefaultValue = false)]
        public LeaseholdRentPeriodEnum? LeaseholdRentPeriod { get; set; }
        /// <summary>
        /// Price unit for the existing lease, can be:  [&#39;totalAmount&#39;, &#39;perSqm&#39;]
        /// </summary>
        /// <value>Price unit for the existing lease, can be:  [&#39;totalAmount&#39;, &#39;perSqm&#39;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LeaseholdPriceUnitEnum
        {
            /// <summary>
            /// Enum TotalAmount for value: totalAmount
            /// </summary>
            [EnumMember(Value = "totalAmount")]
            TotalAmount = 1,

            /// <summary>
            /// Enum PerSqm for value: perSqm
            /// </summary>
            [EnumMember(Value = "perSqm")]
            PerSqm = 2

        }

        /// <summary>
        /// Price unit for the existing lease, can be:  [&#39;totalAmount&#39;, &#39;perSqm&#39;]
        /// </summary>
        /// <value>Price unit for the existing lease, can be:  [&#39;totalAmount&#39;, &#39;perSqm&#39;]</value>
        [DataMember(Name = "leaseholdPriceUnit", EmitDefaultValue = false)]
        public LeaseholdPriceUnitEnum? LeaseholdPriceUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelLeaseHoldDetail" /> class.
        /// </summary>
        /// <param name="leaseholdRentPeriod">Rent period for the existing lease, can be: [&#39;perMonth&#39;, &#39;perAnnum&#39;].</param>
        /// <param name="leaseholdPriceUnit">Price unit for the existing lease, can be:  [&#39;totalAmount&#39;, &#39;perSqm&#39;].</param>
        /// <param name="leaseholdTerm">Term of existing lease.</param>
        /// <param name="leaseholdStart">Start of existing lease.</param>
        /// <param name="leaseholdRent">Rent amount for the existing lease.</param>
        public DomainListingAdminServiceV1ModelLeaseHoldDetail(LeaseholdRentPeriodEnum? leaseholdRentPeriod = default(LeaseholdRentPeriodEnum?), LeaseholdPriceUnitEnum? leaseholdPriceUnit = default(LeaseholdPriceUnitEnum?), int leaseholdTerm = default(int), DateTime leaseholdStart = default(DateTime), double leaseholdRent = default(double))
        {
            this.LeaseholdRentPeriod = leaseholdRentPeriod;
            this.LeaseholdPriceUnit = leaseholdPriceUnit;
            this.LeaseholdTerm = leaseholdTerm;
            this.LeaseholdStart = leaseholdStart;
            this.LeaseholdRent = leaseholdRent;
        }

        /// <summary>
        /// Term of existing lease
        /// </summary>
        /// <value>Term of existing lease</value>
        [DataMember(Name = "leaseholdTerm", EmitDefaultValue = false)]
        public int LeaseholdTerm { get; set; }

        /// <summary>
        /// Start of existing lease
        /// </summary>
        /// <value>Start of existing lease</value>
        [DataMember(Name = "leaseholdStart", EmitDefaultValue = false)]
        public DateTime LeaseholdStart { get; set; }

        /// <summary>
        /// Rent amount for the existing lease
        /// </summary>
        /// <value>Rent amount for the existing lease</value>
        [DataMember(Name = "leaseholdRent", EmitDefaultValue = false)]
        public double LeaseholdRent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelLeaseHoldDetail {\n");
            sb.Append("  LeaseholdRentPeriod: ").Append(LeaseholdRentPeriod).Append("\n");
            sb.Append("  LeaseholdPriceUnit: ").Append(LeaseholdPriceUnit).Append("\n");
            sb.Append("  LeaseholdTerm: ").Append(LeaseholdTerm).Append("\n");
            sb.Append("  LeaseholdStart: ").Append(LeaseholdStart).Append("\n");
            sb.Append("  LeaseholdRent: ").Append(LeaseholdRent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelLeaseHoldDetail);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelLeaseHoldDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelLeaseHoldDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelLeaseHoldDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeaseholdRentPeriod == input.LeaseholdRentPeriod ||
                    this.LeaseholdRentPeriod.Equals(input.LeaseholdRentPeriod)
                ) && 
                (
                    this.LeaseholdPriceUnit == input.LeaseholdPriceUnit ||
                    this.LeaseholdPriceUnit.Equals(input.LeaseholdPriceUnit)
                ) && 
                (
                    this.LeaseholdTerm == input.LeaseholdTerm ||
                    this.LeaseholdTerm.Equals(input.LeaseholdTerm)
                ) && 
                (
                    this.LeaseholdStart == input.LeaseholdStart ||
                    (this.LeaseholdStart != null &&
                    this.LeaseholdStart.Equals(input.LeaseholdStart))
                ) && 
                (
                    this.LeaseholdRent == input.LeaseholdRent ||
                    this.LeaseholdRent.Equals(input.LeaseholdRent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.LeaseholdRentPeriod.GetHashCode();
                hashCode = hashCode * 59 + this.LeaseholdPriceUnit.GetHashCode();
                hashCode = hashCode * 59 + this.LeaseholdTerm.GetHashCode();
                if (this.LeaseholdStart != null)
                    hashCode = hashCode * 59 + this.LeaseholdStart.GetHashCode();
                hashCode = hashCode * 59 + this.LeaseholdRent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
