/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Information for past property sales
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.PastSaleData")]
    public partial class DomainListingAdminServiceV1ModelPastSaleData : IEquatable<DomainListingAdminServiceV1ModelPastSaleData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelPastSaleData" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="dateOfSale">Registered date of the sale.</param>
        /// <param name="soldPrice">Price property has been sold.</param>
        public DomainListingAdminServiceV1ModelPastSaleData(DomainListingAdminServiceV1ModelPastSaleAddress address = default(DomainListingAdminServiceV1ModelPastSaleAddress), DateTime dateOfSale = default(DateTime), int soldPrice = default(int))
        {
            this.Address = address;
            this.DateOfSale = dateOfSale;
            this.SoldPrice = soldPrice;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelPastSaleAddress Address { get; set; }

        /// <summary>
        /// Registered date of the sale
        /// </summary>
        /// <value>Registered date of the sale</value>
        [DataMember(Name = "dateOfSale", EmitDefaultValue = false)]
        public DateTime DateOfSale { get; set; }

        /// <summary>
        /// Price property has been sold
        /// </summary>
        /// <value>Price property has been sold</value>
        [DataMember(Name = "soldPrice", EmitDefaultValue = false)]
        public int SoldPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelPastSaleData {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DateOfSale: ").Append(DateOfSale).Append("\n");
            sb.Append("  SoldPrice: ").Append(SoldPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelPastSaleData);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelPastSaleData instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelPastSaleData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelPastSaleData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.DateOfSale == input.DateOfSale ||
                    (this.DateOfSale != null &&
                    this.DateOfSale.Equals(input.DateOfSale))
                ) && 
                (
                    this.SoldPrice == input.SoldPrice ||
                    this.SoldPrice.Equals(input.SoldPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DateOfSale != null)
                    hashCode = hashCode * 59 + this.DateOfSale.GetHashCode();
                hashCode = hashCode * 59 + this.SoldPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
