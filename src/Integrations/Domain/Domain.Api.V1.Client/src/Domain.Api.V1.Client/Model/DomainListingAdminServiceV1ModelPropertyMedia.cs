/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Resource related to the listing
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.PropertyMedia")]
    public partial class DomainListingAdminServiceV1ModelPropertyMedia : IEquatable<DomainListingAdminServiceV1ModelPropertyMedia>, IValidatableObject
    {
        /// <summary>
        /// Type of the resource
        /// </summary>
        /// <value>Type of the resource</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum Photograph for value: photograph
            /// </summary>
            [EnumMember(Value = "photograph")]
            Photograph = 1,

            /// <summary>
            /// Enum FloorPlan for value: floorPlan
            /// </summary>
            [EnumMember(Value = "floorPlan")]
            FloorPlan = 2,

            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 3,

            /// <summary>
            /// Enum VirtualTour for value: virtualTour
            /// </summary>
            [EnumMember(Value = "virtualTour")]
            VirtualTour = 4,

            /// <summary>
            /// Enum WebLink for value: webLink
            /// </summary>
            [EnumMember(Value = "webLink")]
            WebLink = 5

        }

        /// <summary>
        /// Type of the resource
        /// </summary>
        /// <value>Type of the resource</value>
        [DataMember(Name = "resourceType", EmitDefaultValue = false)]
        public ResourceTypeEnum? ResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelPropertyMedia" /> class.
        /// </summary>
        /// <param name="resourceType">Type of the resource.</param>
        /// <param name="url">shows the place from where file can be downloaded.</param>
        public DomainListingAdminServiceV1ModelPropertyMedia(ResourceTypeEnum? resourceType = default(ResourceTypeEnum?), string url = default(string))
        {
            this.ResourceType = resourceType;
            this.Url = url;
        }

        /// <summary>
        /// shows the place from where file can be downloaded
        /// </summary>
        /// <value>shows the place from where file can be downloaded</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelPropertyMedia {\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelPropertyMedia);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelPropertyMedia instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelPropertyMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelPropertyMedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceType == input.ResourceType ||
                    this.ResourceType.Equals(input.ResourceType)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
