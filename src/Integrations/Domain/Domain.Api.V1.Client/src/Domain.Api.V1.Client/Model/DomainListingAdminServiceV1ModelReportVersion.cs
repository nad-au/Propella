/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Report Version
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.ReportVersion")]
    public partial class DomainListingAdminServiceV1ModelReportVersion : IEquatable<DomainListingAdminServiceV1ModelReportVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelReportVersion" /> class.
        /// </summary>
        /// <param name="operations">Operations performed on a completed version [&#39;none&#39;, &#39;dataReceived&#39;, &#39;processStarted&#39;, &#39;priceValidated&#39;, &#39;geoCoded&#39;, &#39;pdfsProcessed&#39;, &#39;primaryImagesProcessed&#39;, &#39;allImagesProcessed&#39;, &#39;listingDataSaved&#39;, &#39;listingDeleted&#39;, &#39;reportEmailSent&#39;, &#39;offMarketProcessed&#39;, &#39;listingIndexed&#39;, &#39;propertyTypesProcessed&#39;, &#39;contactsProcessed&#39;, &#39;messagesPublished&#39;, &#39;listingSentLive&#39;, &#39;listingUpdated&#39;, &#39;listingRestored&#39;, &#39;allImageSizesProcessed&#39;, &#39;patchProcessed&#39;, &#39;externalSaleProcessed&#39;, &#39;soiProcessed&#39;, &#39;duplicateDetection&#39;, &#39;listingMerged&#39;, &#39;supplementaryProcessed&#39;, &#39;listingHeldInMigration&#39;, &#39;linkedProjectsProcessed&#39;, &#39;linkedListingsProcessed&#39;, &#39;allMediaProcessed&#39;, &#39;projectProcessed&#39;, &#39;projectDeleted&#39;]..</param>
        /// <param name="versionId">Version Id.</param>
        /// <param name="processedDate">Date this version of data been processed.</param>
        /// <param name="dataUrl">Url to access s3 file.</param>
        /// <param name="processCount">Retry count.</param>
        public DomainListingAdminServiceV1ModelReportVersion(List<string> operations = default(List<string>), string versionId = default(string), DateTime processedDate = default(DateTime), string dataUrl = default(string), int processCount = default(int))
        {
            this.Operations = operations;
            this.VersionId = versionId;
            this.ProcessedDate = processedDate;
            this.DataUrl = dataUrl;
            this.ProcessCount = processCount;
        }

        /// <summary>
        /// Operations performed on a completed version [&#39;none&#39;, &#39;dataReceived&#39;, &#39;processStarted&#39;, &#39;priceValidated&#39;, &#39;geoCoded&#39;, &#39;pdfsProcessed&#39;, &#39;primaryImagesProcessed&#39;, &#39;allImagesProcessed&#39;, &#39;listingDataSaved&#39;, &#39;listingDeleted&#39;, &#39;reportEmailSent&#39;, &#39;offMarketProcessed&#39;, &#39;listingIndexed&#39;, &#39;propertyTypesProcessed&#39;, &#39;contactsProcessed&#39;, &#39;messagesPublished&#39;, &#39;listingSentLive&#39;, &#39;listingUpdated&#39;, &#39;listingRestored&#39;, &#39;allImageSizesProcessed&#39;, &#39;patchProcessed&#39;, &#39;externalSaleProcessed&#39;, &#39;soiProcessed&#39;, &#39;duplicateDetection&#39;, &#39;listingMerged&#39;, &#39;supplementaryProcessed&#39;, &#39;listingHeldInMigration&#39;, &#39;linkedProjectsProcessed&#39;, &#39;linkedListingsProcessed&#39;, &#39;allMediaProcessed&#39;, &#39;projectProcessed&#39;, &#39;projectDeleted&#39;].
        /// </summary>
        /// <value>Operations performed on a completed version [&#39;none&#39;, &#39;dataReceived&#39;, &#39;processStarted&#39;, &#39;priceValidated&#39;, &#39;geoCoded&#39;, &#39;pdfsProcessed&#39;, &#39;primaryImagesProcessed&#39;, &#39;allImagesProcessed&#39;, &#39;listingDataSaved&#39;, &#39;listingDeleted&#39;, &#39;reportEmailSent&#39;, &#39;offMarketProcessed&#39;, &#39;listingIndexed&#39;, &#39;propertyTypesProcessed&#39;, &#39;contactsProcessed&#39;, &#39;messagesPublished&#39;, &#39;listingSentLive&#39;, &#39;listingUpdated&#39;, &#39;listingRestored&#39;, &#39;allImageSizesProcessed&#39;, &#39;patchProcessed&#39;, &#39;externalSaleProcessed&#39;, &#39;soiProcessed&#39;, &#39;duplicateDetection&#39;, &#39;listingMerged&#39;, &#39;supplementaryProcessed&#39;, &#39;listingHeldInMigration&#39;, &#39;linkedProjectsProcessed&#39;, &#39;linkedListingsProcessed&#39;, &#39;allMediaProcessed&#39;, &#39;projectProcessed&#39;, &#39;projectDeleted&#39;].</value>
        [DataMember(Name = "operations", EmitDefaultValue = false)]
        public List<string> Operations { get; set; }

        /// <summary>
        /// Version Id
        /// </summary>
        /// <value>Version Id</value>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public string VersionId { get; set; }

        /// <summary>
        /// Date this version of data been processed
        /// </summary>
        /// <value>Date this version of data been processed</value>
        [DataMember(Name = "processedDate", EmitDefaultValue = false)]
        public DateTime ProcessedDate { get; set; }

        /// <summary>
        /// Url to access s3 file
        /// </summary>
        /// <value>Url to access s3 file</value>
        [DataMember(Name = "dataUrl", EmitDefaultValue = false)]
        public string DataUrl { get; set; }

        /// <summary>
        /// Retry count
        /// </summary>
        /// <value>Retry count</value>
        [DataMember(Name = "processCount", EmitDefaultValue = false)]
        public int ProcessCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelReportVersion {\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  ProcessedDate: ").Append(ProcessedDate).Append("\n");
            sb.Append("  DataUrl: ").Append(DataUrl).Append("\n");
            sb.Append("  ProcessCount: ").Append(ProcessCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelReportVersion);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelReportVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelReportVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelReportVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operations == input.Operations ||
                    this.Operations != null &&
                    input.Operations != null &&
                    this.Operations.SequenceEqual(input.Operations)
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                ) && 
                (
                    this.ProcessedDate == input.ProcessedDate ||
                    (this.ProcessedDate != null &&
                    this.ProcessedDate.Equals(input.ProcessedDate))
                ) && 
                (
                    this.DataUrl == input.DataUrl ||
                    (this.DataUrl != null &&
                    this.DataUrl.Equals(input.DataUrl))
                ) && 
                (
                    this.ProcessCount == input.ProcessCount ||
                    this.ProcessCount.Equals(input.ProcessCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operations != null)
                    hashCode = hashCode * 59 + this.Operations.GetHashCode();
                if (this.VersionId != null)
                    hashCode = hashCode * 59 + this.VersionId.GetHashCode();
                if (this.ProcessedDate != null)
                    hashCode = hashCode * 59 + this.ProcessedDate.GetHashCode();
                if (this.DataUrl != null)
                    hashCode = hashCode * 59 + this.DataUrl.GetHashCode();
                hashCode = hashCode * 59 + this.ProcessCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
