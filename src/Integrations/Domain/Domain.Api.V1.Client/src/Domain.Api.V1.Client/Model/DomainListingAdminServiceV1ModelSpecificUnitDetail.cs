/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// offered units details
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.SpecificUnitDetail")]
    public partial class DomainListingAdminServiceV1ModelSpecificUnitDetail : IEquatable<DomainListingAdminServiceV1ModelSpecificUnitDetail>, IValidatableObject
    {
        /// <summary>
        /// Occupancy type
        /// </summary>
        /// <value>Occupancy type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OccupancyEnum
        {
            /// <summary>
            /// Enum Tenanted for value: tenanted
            /// </summary>
            [EnumMember(Value = "tenanted")]
            Tenanted = 1,

            /// <summary>
            /// Enum Vacant for value: vacant
            /// </summary>
            [EnumMember(Value = "vacant")]
            Vacant = 2

        }

        /// <summary>
        /// Occupancy type
        /// </summary>
        /// <value>Occupancy type</value>
        [DataMember(Name = "occupancy", EmitDefaultValue = false)]
        public OccupancyEnum? Occupancy { get; set; }
        /// <summary>
        /// Price unit type
        /// </summary>
        /// <value>Price unit type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriceUnitEnum
        {
            /// <summary>
            /// Enum TotalAmount for value: totalAmount
            /// </summary>
            [EnumMember(Value = "totalAmount")]
            TotalAmount = 1,

            /// <summary>
            /// Enum PerSqm for value: perSqm
            /// </summary>
            [EnumMember(Value = "perSqm")]
            PerSqm = 2

        }

        /// <summary>
        /// Price unit type
        /// </summary>
        /// <value>Price unit type</value>
        [DataMember(Name = "priceUnit", EmitDefaultValue = false)]
        public PriceUnitEnum? PriceUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelSpecificUnitDetail" /> class.
        /// </summary>
        /// <param name="occupancy">Occupancy type.</param>
        /// <param name="priceUnit">Price unit type.</param>
        /// <param name="name">Unit number.</param>
        /// <param name="size">Unit size.</param>
        /// <param name="price">Unit price.</param>
        /// <param name="notes">Additional notes.</param>
        /// <param name="isSoldOrLeased">Is it available?.</param>
        /// <param name="leasePriceForSaleorLease">Lease price for sale or lease.</param>
        public DomainListingAdminServiceV1ModelSpecificUnitDetail(OccupancyEnum? occupancy = default(OccupancyEnum?), PriceUnitEnum? priceUnit = default(PriceUnitEnum?), string name = default(string), int size = default(int), double price = default(double), string notes = default(string), bool isSoldOrLeased = default(bool), double leasePriceForSaleorLease = default(double))
        {
            this.Occupancy = occupancy;
            this.PriceUnit = priceUnit;
            this.Name = name;
            this.Size = size;
            this.Price = price;
            this.Notes = notes;
            this.IsSoldOrLeased = isSoldOrLeased;
            this.LeasePriceForSaleorLease = leasePriceForSaleorLease;
        }

        /// <summary>
        /// Unit number
        /// </summary>
        /// <value>Unit number</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Unit size
        /// </summary>
        /// <value>Unit size</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Unit price
        /// </summary>
        /// <value>Unit price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Additional notes
        /// </summary>
        /// <value>Additional notes</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Is it available?
        /// </summary>
        /// <value>Is it available?</value>
        [DataMember(Name = "isSoldOrLeased", EmitDefaultValue = false)]
        public bool IsSoldOrLeased { get; set; }

        /// <summary>
        /// Lease price for sale or lease
        /// </summary>
        /// <value>Lease price for sale or lease</value>
        [DataMember(Name = "leasePriceForSaleorLease", EmitDefaultValue = false)]
        public double LeasePriceForSaleorLease { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelSpecificUnitDetail {\n");
            sb.Append("  Occupancy: ").Append(Occupancy).Append("\n");
            sb.Append("  PriceUnit: ").Append(PriceUnit).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  IsSoldOrLeased: ").Append(IsSoldOrLeased).Append("\n");
            sb.Append("  LeasePriceForSaleorLease: ").Append(LeasePriceForSaleorLease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelSpecificUnitDetail);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelSpecificUnitDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelSpecificUnitDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelSpecificUnitDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Occupancy == input.Occupancy ||
                    this.Occupancy.Equals(input.Occupancy)
                ) && 
                (
                    this.PriceUnit == input.PriceUnit ||
                    this.PriceUnit.Equals(input.PriceUnit)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.IsSoldOrLeased == input.IsSoldOrLeased ||
                    this.IsSoldOrLeased.Equals(input.IsSoldOrLeased)
                ) && 
                (
                    this.LeasePriceForSaleorLease == input.LeasePriceForSaleorLease ||
                    this.LeasePriceForSaleorLease.Equals(input.LeasePriceForSaleorLease)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Occupancy.GetHashCode();
                hashCode = hashCode * 59 + this.PriceUnit.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                hashCode = hashCode * 59 + this.IsSoldOrLeased.GetHashCode();
                hashCode = hashCode * 59 + this.LeasePriceForSaleorLease.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
