/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails
    /// </summary>
    [DataContract(Name = "Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingAuctionDetails")]
    public partial class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails : IEquatable<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails" /> class.
        /// </summary>
        /// <param name="auctionSchedule">auctionSchedule.</param>
        /// <param name="auctionedPrice">auctionedPrice.</param>
        /// <param name="auctionedDate">auctionedDate.</param>
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule auctionSchedule = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule), int auctionedPrice = default(int), DateTime auctionedDate = default(DateTime))
        {
            this.AuctionSchedule = auctionSchedule;
            this.AuctionedPrice = auctionedPrice;
            this.AuctionedDate = auctionedDate;
        }

        /// <summary>
        /// Gets or Sets AuctionSchedule
        /// </summary>
        [DataMember(Name = "auctionSchedule", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule AuctionSchedule { get; set; }

        /// <summary>
        /// Gets or Sets AuctionedPrice
        /// </summary>
        [DataMember(Name = "auctionedPrice", EmitDefaultValue = false)]
        public int AuctionedPrice { get; set; }

        /// <summary>
        /// Gets or Sets AuctionedDate
        /// </summary>
        [DataMember(Name = "auctionedDate", EmitDefaultValue = false)]
        public DateTime AuctionedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails {\n");
            sb.Append("  AuctionSchedule: ").Append(AuctionSchedule).Append("\n");
            sb.Append("  AuctionedPrice: ").Append(AuctionedPrice).Append("\n");
            sb.Append("  AuctionedDate: ").Append(AuctionedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails);
        }

        /// <summary>
        /// Returns true if DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuctionSchedule == input.AuctionSchedule ||
                    (this.AuctionSchedule != null &&
                    this.AuctionSchedule.Equals(input.AuctionSchedule))
                ) && 
                (
                    this.AuctionedPrice == input.AuctionedPrice ||
                    this.AuctionedPrice.Equals(input.AuctionedPrice)
                ) && 
                (
                    this.AuctionedDate == input.AuctionedDate ||
                    (this.AuctionedDate != null &&
                    this.AuctionedDate.Equals(input.AuctionedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuctionSchedule != null)
                    hashCode = hashCode * 59 + this.AuctionSchedule.GetHashCode();
                hashCode = hashCode * 59 + this.AuctionedPrice.GetHashCode();
                if (this.AuctionedDate != null)
                    hashCode = hashCode * 59 + this.AuctionedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
