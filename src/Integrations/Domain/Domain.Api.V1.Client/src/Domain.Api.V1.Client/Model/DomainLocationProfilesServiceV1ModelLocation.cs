/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainLocationProfilesServiceV1ModelLocation
    /// </summary>
    [DataContract(Name = "Domain.LocationProfilesService.v1.Model.Location")]
    public partial class DomainLocationProfilesServiceV1ModelLocation : IEquatable<DomainLocationProfilesServiceV1ModelLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainLocationProfilesServiceV1ModelLocation" /> class.
        /// </summary>
        /// <param name="domainLocationId">domainLocationId.</param>
        /// <param name="postcode">postcode.</param>
        /// <param name="pfLocationId">pfLocationId.</param>
        /// <param name="surroundingSuburbs">surroundingSuburbs.</param>
        /// <param name="urlSlug">urlSlug.</param>
        /// <param name="suburbName">suburbName.</param>
        /// <param name="data">data.</param>
        /// <param name="apmLocationId">apmLocationId.</param>
        /// <param name="locationId">locationId.</param>
        /// <param name="areaName">areaName.</param>
        /// <param name="regionName">regionName.</param>
        /// <param name="state">state.</param>
        public DomainLocationProfilesServiceV1ModelLocation(int domainLocationId = default(int), string postcode = default(string), string pfLocationId = default(string), List<DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs> surroundingSuburbs = default(List<DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs>), string urlSlug = default(string), string suburbName = default(string), DomainLocationProfilesServiceV1ModelLocationData data = default(DomainLocationProfilesServiceV1ModelLocationData), int apmLocationId = default(int), int locationId = default(int), string areaName = default(string), string regionName = default(string), string state = default(string))
        {
            this.DomainLocationId = domainLocationId;
            this.Postcode = postcode;
            this.PfLocationId = pfLocationId;
            this.SurroundingSuburbs = surroundingSuburbs;
            this.UrlSlug = urlSlug;
            this.SuburbName = suburbName;
            this.Data = data;
            this.ApmLocationId = apmLocationId;
            this.LocationId = locationId;
            this.AreaName = areaName;
            this.RegionName = regionName;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets DomainLocationId
        /// </summary>
        [DataMember(Name = "domainLocationId", EmitDefaultValue = false)]
        public int DomainLocationId { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "postcode", EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets PfLocationId
        /// </summary>
        [DataMember(Name = "pfLocationId", EmitDefaultValue = false)]
        public string PfLocationId { get; set; }

        /// <summary>
        /// Gets or Sets SurroundingSuburbs
        /// </summary>
        [DataMember(Name = "surroundingSuburbs", EmitDefaultValue = false)]
        public List<DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs> SurroundingSuburbs { get; set; }

        /// <summary>
        /// Gets or Sets UrlSlug
        /// </summary>
        [DataMember(Name = "urlSlug", EmitDefaultValue = false)]
        public string UrlSlug { get; set; }

        /// <summary>
        /// Gets or Sets SuburbName
        /// </summary>
        [DataMember(Name = "suburbName", EmitDefaultValue = false)]
        public string SuburbName { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public DomainLocationProfilesServiceV1ModelLocationData Data { get; set; }

        /// <summary>
        /// Gets or Sets ApmLocationId
        /// </summary>
        [DataMember(Name = "apmLocationId", EmitDefaultValue = false)]
        public int ApmLocationId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets AreaName
        /// </summary>
        [DataMember(Name = "areaName", EmitDefaultValue = false)]
        public string AreaName { get; set; }

        /// <summary>
        /// Gets or Sets RegionName
        /// </summary>
        [DataMember(Name = "regionName", EmitDefaultValue = false)]
        public string RegionName { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainLocationProfilesServiceV1ModelLocation {\n");
            sb.Append("  DomainLocationId: ").Append(DomainLocationId).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  PfLocationId: ").Append(PfLocationId).Append("\n");
            sb.Append("  SurroundingSuburbs: ").Append(SurroundingSuburbs).Append("\n");
            sb.Append("  UrlSlug: ").Append(UrlSlug).Append("\n");
            sb.Append("  SuburbName: ").Append(SuburbName).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ApmLocationId: ").Append(ApmLocationId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  AreaName: ").Append(AreaName).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainLocationProfilesServiceV1ModelLocation);
        }

        /// <summary>
        /// Returns true if DomainLocationProfilesServiceV1ModelLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainLocationProfilesServiceV1ModelLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainLocationProfilesServiceV1ModelLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DomainLocationId == input.DomainLocationId ||
                    this.DomainLocationId.Equals(input.DomainLocationId)
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.PfLocationId == input.PfLocationId ||
                    (this.PfLocationId != null &&
                    this.PfLocationId.Equals(input.PfLocationId))
                ) && 
                (
                    this.SurroundingSuburbs == input.SurroundingSuburbs ||
                    this.SurroundingSuburbs != null &&
                    input.SurroundingSuburbs != null &&
                    this.SurroundingSuburbs.SequenceEqual(input.SurroundingSuburbs)
                ) && 
                (
                    this.UrlSlug == input.UrlSlug ||
                    (this.UrlSlug != null &&
                    this.UrlSlug.Equals(input.UrlSlug))
                ) && 
                (
                    this.SuburbName == input.SuburbName ||
                    (this.SuburbName != null &&
                    this.SuburbName.Equals(input.SuburbName))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.ApmLocationId == input.ApmLocationId ||
                    this.ApmLocationId.Equals(input.ApmLocationId)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.AreaName == input.AreaName ||
                    (this.AreaName != null &&
                    this.AreaName.Equals(input.AreaName))
                ) && 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DomainLocationId.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.PfLocationId != null)
                    hashCode = hashCode * 59 + this.PfLocationId.GetHashCode();
                if (this.SurroundingSuburbs != null)
                    hashCode = hashCode * 59 + this.SurroundingSuburbs.GetHashCode();
                if (this.UrlSlug != null)
                    hashCode = hashCode * 59 + this.UrlSlug.GetHashCode();
                if (this.SuburbName != null)
                    hashCode = hashCode * 59 + this.SuburbName.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                hashCode = hashCode * 59 + this.ApmLocationId.GetHashCode();
                hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.AreaName != null)
                    hashCode = hashCode * 59 + this.AreaName.GetHashCode();
                if (this.RegionName != null)
                    hashCode = hashCode * 59 + this.RegionName.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
