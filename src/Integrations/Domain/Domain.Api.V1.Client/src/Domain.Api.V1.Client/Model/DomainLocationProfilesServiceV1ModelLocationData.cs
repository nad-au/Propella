/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainLocationProfilesServiceV1ModelLocationData
    /// </summary>
    [DataContract(Name = "Domain.LocationProfilesService.v1.Model.LocationData")]
    public partial class DomainLocationProfilesServiceV1ModelLocationData : IEquatable<DomainLocationProfilesServiceV1ModelLocationData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainLocationProfilesServiceV1ModelLocationData" /> class.
        /// </summary>
        /// <param name="studiosForRent">studiosForRent.</param>
        /// <param name="terracedHousesForSale">terracedHousesForSale.</param>
        /// <param name="semiDetachedHousesForSale">semiDetachedHousesForSale.</param>
        /// <param name="townhousesForRent">townhousesForRent.</param>
        /// <param name="apartmentsAndUnitsForSale">apartmentsAndUnitsForSale.</param>
        /// <param name="apartmentsAndUnitsForRent">apartmentsAndUnitsForRent.</param>
        /// <param name="villasForSale">villasForSale.</param>
        /// <param name="duplexesForSale">duplexesForSale.</param>
        /// <param name="semiDetachedHousesForRent">semiDetachedHousesForRent.</param>
        /// <param name="studiosForSale">studiosForSale.</param>
        /// <param name="singlePercentage">singlePercentage.</param>
        /// <param name="mostCommonAgeBracket">mostCommonAgeBracket.</param>
        /// <param name="renterPercentage">renterPercentage.</param>
        /// <param name="penthousesForSale">penthousesForSale.</param>
        /// <param name="villasForRent">villasForRent.</param>
        /// <param name="duplexesForRent">duplexesForRent.</param>
        /// <param name="housesForSale">housesForSale.</param>
        /// <param name="ownerOccupierPercentage">ownerOccupierPercentage.</param>
        /// <param name="propertyCategories">propertyCategories.</param>
        /// <param name="population">population.</param>
        /// <param name="penthousesForRent">penthousesForRent.</param>
        /// <param name="townhousesForSale">townhousesForSale.</param>
        /// <param name="terracedHousesForRent">terracedHousesForRent.</param>
        /// <param name="marriedPercentage">marriedPercentage.</param>
        /// <param name="housesForRent">housesForRent.</param>
        /// <param name="blockOfUnitsForSale">blockOfUnitsForSale.</param>
        public DomainLocationProfilesServiceV1ModelLocationData(int studiosForRent = default(int), int terracedHousesForSale = default(int), int semiDetachedHousesForSale = default(int), int townhousesForRent = default(int), int apartmentsAndUnitsForSale = default(int), int apartmentsAndUnitsForRent = default(int), int villasForSale = default(int), int duplexesForSale = default(int), int semiDetachedHousesForRent = default(int), int studiosForSale = default(int), double singlePercentage = default(double), string mostCommonAgeBracket = default(string), double renterPercentage = default(double), int penthousesForSale = default(int), int villasForRent = default(int), int duplexesForRent = default(int), int housesForSale = default(int), double ownerOccupierPercentage = default(double), List<DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories> propertyCategories = default(List<DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories>), double population = default(double), int penthousesForRent = default(int), int townhousesForSale = default(int), int terracedHousesForRent = default(int), double marriedPercentage = default(double), int housesForRent = default(int), int blockOfUnitsForSale = default(int))
        {
            this.StudiosForRent = studiosForRent;
            this.TerracedHousesForSale = terracedHousesForSale;
            this.SemiDetachedHousesForSale = semiDetachedHousesForSale;
            this.TownhousesForRent = townhousesForRent;
            this.ApartmentsAndUnitsForSale = apartmentsAndUnitsForSale;
            this.ApartmentsAndUnitsForRent = apartmentsAndUnitsForRent;
            this.VillasForSale = villasForSale;
            this.DuplexesForSale = duplexesForSale;
            this.SemiDetachedHousesForRent = semiDetachedHousesForRent;
            this.StudiosForSale = studiosForSale;
            this.SinglePercentage = singlePercentage;
            this.MostCommonAgeBracket = mostCommonAgeBracket;
            this.RenterPercentage = renterPercentage;
            this.PenthousesForSale = penthousesForSale;
            this.VillasForRent = villasForRent;
            this.DuplexesForRent = duplexesForRent;
            this.HousesForSale = housesForSale;
            this.OwnerOccupierPercentage = ownerOccupierPercentage;
            this.PropertyCategories = propertyCategories;
            this.Population = population;
            this.PenthousesForRent = penthousesForRent;
            this.TownhousesForSale = townhousesForSale;
            this.TerracedHousesForRent = terracedHousesForRent;
            this.MarriedPercentage = marriedPercentage;
            this.HousesForRent = housesForRent;
            this.BlockOfUnitsForSale = blockOfUnitsForSale;
        }

        /// <summary>
        /// Gets or Sets StudiosForRent
        /// </summary>
        [DataMember(Name = "studiosForRent", EmitDefaultValue = false)]
        public int StudiosForRent { get; set; }

        /// <summary>
        /// Gets or Sets TerracedHousesForSale
        /// </summary>
        [DataMember(Name = "terracedHousesForSale", EmitDefaultValue = false)]
        public int TerracedHousesForSale { get; set; }

        /// <summary>
        /// Gets or Sets SemiDetachedHousesForSale
        /// </summary>
        [DataMember(Name = "semiDetachedHousesForSale", EmitDefaultValue = false)]
        public int SemiDetachedHousesForSale { get; set; }

        /// <summary>
        /// Gets or Sets TownhousesForRent
        /// </summary>
        [DataMember(Name = "townhousesForRent", EmitDefaultValue = false)]
        public int TownhousesForRent { get; set; }

        /// <summary>
        /// Gets or Sets ApartmentsAndUnitsForSale
        /// </summary>
        [DataMember(Name = "apartmentsAndUnitsForSale", EmitDefaultValue = false)]
        public int ApartmentsAndUnitsForSale { get; set; }

        /// <summary>
        /// Gets or Sets ApartmentsAndUnitsForRent
        /// </summary>
        [DataMember(Name = "apartmentsAndUnitsForRent", EmitDefaultValue = false)]
        public int ApartmentsAndUnitsForRent { get; set; }

        /// <summary>
        /// Gets or Sets VillasForSale
        /// </summary>
        [DataMember(Name = "villasForSale", EmitDefaultValue = false)]
        public int VillasForSale { get; set; }

        /// <summary>
        /// Gets or Sets DuplexesForSale
        /// </summary>
        [DataMember(Name = "duplexesForSale", EmitDefaultValue = false)]
        public int DuplexesForSale { get; set; }

        /// <summary>
        /// Gets or Sets SemiDetachedHousesForRent
        /// </summary>
        [DataMember(Name = "semiDetachedHousesForRent", EmitDefaultValue = false)]
        public int SemiDetachedHousesForRent { get; set; }

        /// <summary>
        /// Gets or Sets StudiosForSale
        /// </summary>
        [DataMember(Name = "studiosForSale", EmitDefaultValue = false)]
        public int StudiosForSale { get; set; }

        /// <summary>
        /// Gets or Sets SinglePercentage
        /// </summary>
        [DataMember(Name = "singlePercentage", EmitDefaultValue = false)]
        public double SinglePercentage { get; set; }

        /// <summary>
        /// Gets or Sets MostCommonAgeBracket
        /// </summary>
        [DataMember(Name = "mostCommonAgeBracket", EmitDefaultValue = false)]
        public string MostCommonAgeBracket { get; set; }

        /// <summary>
        /// Gets or Sets RenterPercentage
        /// </summary>
        [DataMember(Name = "renterPercentage", EmitDefaultValue = false)]
        public double RenterPercentage { get; set; }

        /// <summary>
        /// Gets or Sets PenthousesForSale
        /// </summary>
        [DataMember(Name = "penthousesForSale", EmitDefaultValue = false)]
        public int PenthousesForSale { get; set; }

        /// <summary>
        /// Gets or Sets VillasForRent
        /// </summary>
        [DataMember(Name = "villasForRent", EmitDefaultValue = false)]
        public int VillasForRent { get; set; }

        /// <summary>
        /// Gets or Sets DuplexesForRent
        /// </summary>
        [DataMember(Name = "duplexesForRent", EmitDefaultValue = false)]
        public int DuplexesForRent { get; set; }

        /// <summary>
        /// Gets or Sets HousesForSale
        /// </summary>
        [DataMember(Name = "housesForSale", EmitDefaultValue = false)]
        public int HousesForSale { get; set; }

        /// <summary>
        /// Gets or Sets OwnerOccupierPercentage
        /// </summary>
        [DataMember(Name = "ownerOccupierPercentage", EmitDefaultValue = false)]
        public double OwnerOccupierPercentage { get; set; }

        /// <summary>
        /// Gets or Sets PropertyCategories
        /// </summary>
        [DataMember(Name = "propertyCategories", EmitDefaultValue = false)]
        public List<DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories> PropertyCategories { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name = "population", EmitDefaultValue = false)]
        public double Population { get; set; }

        /// <summary>
        /// Gets or Sets PenthousesForRent
        /// </summary>
        [DataMember(Name = "penthousesForRent", EmitDefaultValue = false)]
        public int PenthousesForRent { get; set; }

        /// <summary>
        /// Gets or Sets TownhousesForSale
        /// </summary>
        [DataMember(Name = "townhousesForSale", EmitDefaultValue = false)]
        public int TownhousesForSale { get; set; }

        /// <summary>
        /// Gets or Sets TerracedHousesForRent
        /// </summary>
        [DataMember(Name = "terracedHousesForRent", EmitDefaultValue = false)]
        public int TerracedHousesForRent { get; set; }

        /// <summary>
        /// Gets or Sets MarriedPercentage
        /// </summary>
        [DataMember(Name = "marriedPercentage", EmitDefaultValue = false)]
        public double MarriedPercentage { get; set; }

        /// <summary>
        /// Gets or Sets HousesForRent
        /// </summary>
        [DataMember(Name = "housesForRent", EmitDefaultValue = false)]
        public int HousesForRent { get; set; }

        /// <summary>
        /// Gets or Sets BlockOfUnitsForSale
        /// </summary>
        [DataMember(Name = "blockOfUnitsForSale", EmitDefaultValue = false)]
        public int BlockOfUnitsForSale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainLocationProfilesServiceV1ModelLocationData {\n");
            sb.Append("  StudiosForRent: ").Append(StudiosForRent).Append("\n");
            sb.Append("  TerracedHousesForSale: ").Append(TerracedHousesForSale).Append("\n");
            sb.Append("  SemiDetachedHousesForSale: ").Append(SemiDetachedHousesForSale).Append("\n");
            sb.Append("  TownhousesForRent: ").Append(TownhousesForRent).Append("\n");
            sb.Append("  ApartmentsAndUnitsForSale: ").Append(ApartmentsAndUnitsForSale).Append("\n");
            sb.Append("  ApartmentsAndUnitsForRent: ").Append(ApartmentsAndUnitsForRent).Append("\n");
            sb.Append("  VillasForSale: ").Append(VillasForSale).Append("\n");
            sb.Append("  DuplexesForSale: ").Append(DuplexesForSale).Append("\n");
            sb.Append("  SemiDetachedHousesForRent: ").Append(SemiDetachedHousesForRent).Append("\n");
            sb.Append("  StudiosForSale: ").Append(StudiosForSale).Append("\n");
            sb.Append("  SinglePercentage: ").Append(SinglePercentage).Append("\n");
            sb.Append("  MostCommonAgeBracket: ").Append(MostCommonAgeBracket).Append("\n");
            sb.Append("  RenterPercentage: ").Append(RenterPercentage).Append("\n");
            sb.Append("  PenthousesForSale: ").Append(PenthousesForSale).Append("\n");
            sb.Append("  VillasForRent: ").Append(VillasForRent).Append("\n");
            sb.Append("  DuplexesForRent: ").Append(DuplexesForRent).Append("\n");
            sb.Append("  HousesForSale: ").Append(HousesForSale).Append("\n");
            sb.Append("  OwnerOccupierPercentage: ").Append(OwnerOccupierPercentage).Append("\n");
            sb.Append("  PropertyCategories: ").Append(PropertyCategories).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("  PenthousesForRent: ").Append(PenthousesForRent).Append("\n");
            sb.Append("  TownhousesForSale: ").Append(TownhousesForSale).Append("\n");
            sb.Append("  TerracedHousesForRent: ").Append(TerracedHousesForRent).Append("\n");
            sb.Append("  MarriedPercentage: ").Append(MarriedPercentage).Append("\n");
            sb.Append("  HousesForRent: ").Append(HousesForRent).Append("\n");
            sb.Append("  BlockOfUnitsForSale: ").Append(BlockOfUnitsForSale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainLocationProfilesServiceV1ModelLocationData);
        }

        /// <summary>
        /// Returns true if DomainLocationProfilesServiceV1ModelLocationData instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainLocationProfilesServiceV1ModelLocationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainLocationProfilesServiceV1ModelLocationData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StudiosForRent == input.StudiosForRent ||
                    this.StudiosForRent.Equals(input.StudiosForRent)
                ) && 
                (
                    this.TerracedHousesForSale == input.TerracedHousesForSale ||
                    this.TerracedHousesForSale.Equals(input.TerracedHousesForSale)
                ) && 
                (
                    this.SemiDetachedHousesForSale == input.SemiDetachedHousesForSale ||
                    this.SemiDetachedHousesForSale.Equals(input.SemiDetachedHousesForSale)
                ) && 
                (
                    this.TownhousesForRent == input.TownhousesForRent ||
                    this.TownhousesForRent.Equals(input.TownhousesForRent)
                ) && 
                (
                    this.ApartmentsAndUnitsForSale == input.ApartmentsAndUnitsForSale ||
                    this.ApartmentsAndUnitsForSale.Equals(input.ApartmentsAndUnitsForSale)
                ) && 
                (
                    this.ApartmentsAndUnitsForRent == input.ApartmentsAndUnitsForRent ||
                    this.ApartmentsAndUnitsForRent.Equals(input.ApartmentsAndUnitsForRent)
                ) && 
                (
                    this.VillasForSale == input.VillasForSale ||
                    this.VillasForSale.Equals(input.VillasForSale)
                ) && 
                (
                    this.DuplexesForSale == input.DuplexesForSale ||
                    this.DuplexesForSale.Equals(input.DuplexesForSale)
                ) && 
                (
                    this.SemiDetachedHousesForRent == input.SemiDetachedHousesForRent ||
                    this.SemiDetachedHousesForRent.Equals(input.SemiDetachedHousesForRent)
                ) && 
                (
                    this.StudiosForSale == input.StudiosForSale ||
                    this.StudiosForSale.Equals(input.StudiosForSale)
                ) && 
                (
                    this.SinglePercentage == input.SinglePercentage ||
                    this.SinglePercentage.Equals(input.SinglePercentage)
                ) && 
                (
                    this.MostCommonAgeBracket == input.MostCommonAgeBracket ||
                    (this.MostCommonAgeBracket != null &&
                    this.MostCommonAgeBracket.Equals(input.MostCommonAgeBracket))
                ) && 
                (
                    this.RenterPercentage == input.RenterPercentage ||
                    this.RenterPercentage.Equals(input.RenterPercentage)
                ) && 
                (
                    this.PenthousesForSale == input.PenthousesForSale ||
                    this.PenthousesForSale.Equals(input.PenthousesForSale)
                ) && 
                (
                    this.VillasForRent == input.VillasForRent ||
                    this.VillasForRent.Equals(input.VillasForRent)
                ) && 
                (
                    this.DuplexesForRent == input.DuplexesForRent ||
                    this.DuplexesForRent.Equals(input.DuplexesForRent)
                ) && 
                (
                    this.HousesForSale == input.HousesForSale ||
                    this.HousesForSale.Equals(input.HousesForSale)
                ) && 
                (
                    this.OwnerOccupierPercentage == input.OwnerOccupierPercentage ||
                    this.OwnerOccupierPercentage.Equals(input.OwnerOccupierPercentage)
                ) && 
                (
                    this.PropertyCategories == input.PropertyCategories ||
                    this.PropertyCategories != null &&
                    input.PropertyCategories != null &&
                    this.PropertyCategories.SequenceEqual(input.PropertyCategories)
                ) && 
                (
                    this.Population == input.Population ||
                    this.Population.Equals(input.Population)
                ) && 
                (
                    this.PenthousesForRent == input.PenthousesForRent ||
                    this.PenthousesForRent.Equals(input.PenthousesForRent)
                ) && 
                (
                    this.TownhousesForSale == input.TownhousesForSale ||
                    this.TownhousesForSale.Equals(input.TownhousesForSale)
                ) && 
                (
                    this.TerracedHousesForRent == input.TerracedHousesForRent ||
                    this.TerracedHousesForRent.Equals(input.TerracedHousesForRent)
                ) && 
                (
                    this.MarriedPercentage == input.MarriedPercentage ||
                    this.MarriedPercentage.Equals(input.MarriedPercentage)
                ) && 
                (
                    this.HousesForRent == input.HousesForRent ||
                    this.HousesForRent.Equals(input.HousesForRent)
                ) && 
                (
                    this.BlockOfUnitsForSale == input.BlockOfUnitsForSale ||
                    this.BlockOfUnitsForSale.Equals(input.BlockOfUnitsForSale)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.StudiosForRent.GetHashCode();
                hashCode = hashCode * 59 + this.TerracedHousesForSale.GetHashCode();
                hashCode = hashCode * 59 + this.SemiDetachedHousesForSale.GetHashCode();
                hashCode = hashCode * 59 + this.TownhousesForRent.GetHashCode();
                hashCode = hashCode * 59 + this.ApartmentsAndUnitsForSale.GetHashCode();
                hashCode = hashCode * 59 + this.ApartmentsAndUnitsForRent.GetHashCode();
                hashCode = hashCode * 59 + this.VillasForSale.GetHashCode();
                hashCode = hashCode * 59 + this.DuplexesForSale.GetHashCode();
                hashCode = hashCode * 59 + this.SemiDetachedHousesForRent.GetHashCode();
                hashCode = hashCode * 59 + this.StudiosForSale.GetHashCode();
                hashCode = hashCode * 59 + this.SinglePercentage.GetHashCode();
                if (this.MostCommonAgeBracket != null)
                    hashCode = hashCode * 59 + this.MostCommonAgeBracket.GetHashCode();
                hashCode = hashCode * 59 + this.RenterPercentage.GetHashCode();
                hashCode = hashCode * 59 + this.PenthousesForSale.GetHashCode();
                hashCode = hashCode * 59 + this.VillasForRent.GetHashCode();
                hashCode = hashCode * 59 + this.DuplexesForRent.GetHashCode();
                hashCode = hashCode * 59 + this.HousesForSale.GetHashCode();
                hashCode = hashCode * 59 + this.OwnerOccupierPercentage.GetHashCode();
                if (this.PropertyCategories != null)
                    hashCode = hashCode * 59 + this.PropertyCategories.GetHashCode();
                hashCode = hashCode * 59 + this.Population.GetHashCode();
                hashCode = hashCode * 59 + this.PenthousesForRent.GetHashCode();
                hashCode = hashCode * 59 + this.TownhousesForSale.GetHashCode();
                hashCode = hashCode * 59 + this.TerracedHousesForRent.GetHashCode();
                hashCode = hashCode * 59 + this.MarriedPercentage.GetHashCode();
                hashCode = hashCode * 59 + this.HousesForRent.GetHashCode();
                hashCode = hashCode * 59 + this.BlockOfUnitsForSale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
