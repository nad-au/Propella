/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList
    /// </summary>
    [DataContract(Name = "Domain.LocationProfilesService.v1.Model.LocationDataSalesGrowthList")]
    public partial class DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList : IEquatable<DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList" /> class.
        /// </summary>
        /// <param name="medianSoldPrice">medianSoldPrice.</param>
        /// <param name="annualGrowth">annualGrowth.</param>
        /// <param name="numberSold">numberSold.</param>
        /// <param name="year">year.</param>
        public DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList(double medianSoldPrice = default(double), double annualGrowth = default(double), int numberSold = default(int), int year = default(int))
        {
            this.MedianSoldPrice = medianSoldPrice;
            this.AnnualGrowth = annualGrowth;
            this.NumberSold = numberSold;
            this.Year = year;
        }

        /// <summary>
        /// Gets or Sets MedianSoldPrice
        /// </summary>
        [DataMember(Name = "medianSoldPrice", EmitDefaultValue = false)]
        public double MedianSoldPrice { get; set; }

        /// <summary>
        /// Gets or Sets AnnualGrowth
        /// </summary>
        [DataMember(Name = "annualGrowth", EmitDefaultValue = false)]
        public double AnnualGrowth { get; set; }

        /// <summary>
        /// Gets or Sets NumberSold
        /// </summary>
        [DataMember(Name = "numberSold", EmitDefaultValue = false)]
        public int NumberSold { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList {\n");
            sb.Append("  MedianSoldPrice: ").Append(MedianSoldPrice).Append("\n");
            sb.Append("  AnnualGrowth: ").Append(AnnualGrowth).Append("\n");
            sb.Append("  NumberSold: ").Append(NumberSold).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList);
        }

        /// <summary>
        /// Returns true if DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MedianSoldPrice == input.MedianSoldPrice ||
                    this.MedianSoldPrice.Equals(input.MedianSoldPrice)
                ) && 
                (
                    this.AnnualGrowth == input.AnnualGrowth ||
                    this.AnnualGrowth.Equals(input.AnnualGrowth)
                ) && 
                (
                    this.NumberSold == input.NumberSold ||
                    this.NumberSold.Equals(input.NumberSold)
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MedianSoldPrice.GetHashCode();
                hashCode = hashCode * 59 + this.AnnualGrowth.GetHashCode();
                hashCode = hashCode * 59 + this.NumberSold.GetHashCode();
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
