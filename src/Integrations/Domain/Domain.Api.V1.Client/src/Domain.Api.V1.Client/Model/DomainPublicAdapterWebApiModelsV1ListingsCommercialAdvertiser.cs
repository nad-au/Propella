/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Agency details
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Listings.Commercial.Advertiser")]
    public partial class DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser : IEquatable<DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser" /> class.
        /// </summary>
        /// <param name="address">agency address.</param>
        /// <param name="id">Agency ID.</param>
        /// <param name="name">Agency Name.</param>
        /// <param name="preferredColorHex">Agency color.</param>
        /// <param name="images">images.</param>
        /// <param name="contacts">Agency contacts.</param>
        /// <param name="isConjunctional">Checks whether advertiser is conjunctional or not.</param>
        public DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser(string address = default(string), int id = default(int), string name = default(string), string preferredColorHex = default(string), DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages images = default(DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages), List<DomainPublicAdapterWebApiModelsV1ListingsCommercialContact> contacts = default(List<DomainPublicAdapterWebApiModelsV1ListingsCommercialContact>), bool isConjunctional = default(bool))
        {
            this.Address = address;
            this.Id = id;
            this.Name = name;
            this.PreferredColorHex = preferredColorHex;
            this.Images = images;
            this.Contacts = contacts;
            this.IsConjunctional = isConjunctional;
        }

        /// <summary>
        /// agency address
        /// </summary>
        /// <value>agency address</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Agency ID
        /// </summary>
        /// <value>Agency ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Agency Name
        /// </summary>
        /// <value>Agency Name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Agency color
        /// </summary>
        /// <value>Agency color</value>
        [DataMember(Name = "preferredColorHex", EmitDefaultValue = false)]
        public string PreferredColorHex { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages Images { get; set; }

        /// <summary>
        /// Agency contacts
        /// </summary>
        /// <value>Agency contacts</value>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1ListingsCommercialContact> Contacts { get; set; }

        /// <summary>
        /// Checks whether advertiser is conjunctional or not
        /// </summary>
        /// <value>Checks whether advertiser is conjunctional or not</value>
        [DataMember(Name = "isConjunctional", EmitDefaultValue = false)]
        public bool IsConjunctional { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PreferredColorHex: ").Append(PreferredColorHex).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  IsConjunctional: ").Append(IsConjunctional).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PreferredColorHex == input.PreferredColorHex ||
                    (this.PreferredColorHex != null &&
                    this.PreferredColorHex.Equals(input.PreferredColorHex))
                ) && 
                (
                    this.Images == input.Images ||
                    (this.Images != null &&
                    this.Images.Equals(input.Images))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.IsConjunctional == input.IsConjunctional ||
                    this.IsConjunctional.Equals(input.IsConjunctional)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PreferredColorHex != null)
                    hashCode = hashCode * 59 + this.PreferredColorHex.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                hashCode = hashCode * 59 + this.IsConjunctional.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
