/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Polygon which specifies geographical area for listing search
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Listings.Commercial.GeoWindow")]
    public partial class DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow : IEquatable<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow" /> class.
        /// </summary>
        /// <param name="polygon">List of points making polygon.</param>
        /// <param name="boundingBox">Bounding box. Not used.</param>
        public DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow(List<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint> polygon = default(List<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint>), List<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint> boundingBox = default(List<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint>))
        {
            this.Polygon = polygon;
            this.BoundingBox = boundingBox;
        }

        /// <summary>
        /// List of points making polygon
        /// </summary>
        /// <value>List of points making polygon</value>
        [DataMember(Name = "polygon", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint> Polygon { get; set; }

        /// <summary>
        /// Bounding box. Not used
        /// </summary>
        /// <value>Bounding box. Not used</value>
        [DataMember(Name = "boundingBox", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint> BoundingBox { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow {\n");
            sb.Append("  Polygon: ").Append(Polygon).Append("\n");
            sb.Append("  BoundingBox: ").Append(BoundingBox).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Polygon == input.Polygon ||
                    this.Polygon != null &&
                    input.Polygon != null &&
                    this.Polygon.SequenceEqual(input.Polygon)
                ) && 
                (
                    this.BoundingBox == input.BoundingBox ||
                    this.BoundingBox != null &&
                    input.BoundingBox != null &&
                    this.BoundingBox.SequenceEqual(input.BoundingBox)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Polygon != null)
                    hashCode = hashCode * 59 + this.Polygon.GetHashCode();
                if (this.BoundingBox != null)
                    hashCode = hashCode * 59 + this.BoundingBox.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
