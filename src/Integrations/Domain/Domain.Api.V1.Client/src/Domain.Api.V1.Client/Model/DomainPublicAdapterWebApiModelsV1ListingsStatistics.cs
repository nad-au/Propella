/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Listing statistics
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Listings.Statistics")]
    public partial class DomainPublicAdapterWebApiModelsV1ListingsStatistics : IEquatable<DomainPublicAdapterWebApiModelsV1ListingsStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1ListingsStatistics" /> class.
        /// </summary>
        /// <param name="eventDate">Date of statistics events.</param>
        public DomainPublicAdapterWebApiModelsV1ListingsStatistics(DateTime eventDate = default(DateTime))
        {
            this.EventDate = eventDate;
        }

        /// <summary>
        /// Date of statistics events
        /// </summary>
        /// <value>Date of statistics events</value>
        [DataMember(Name = "eventDate", EmitDefaultValue = false)]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// Domain Advertisement Id
        /// </summary>
        /// <value>Domain Advertisement Id</value>
        [DataMember(Name = "listingId", EmitDefaultValue = false)]
        public long ListingId { get; private set; }

        /// <summary>
        /// Returns false as ListingId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeListingId()
        {
            return false;
        }

        /// <summary>
        /// Total number of views for the listing details
        /// </summary>
        /// <value>Total number of views for the listing details</value>
        [DataMember(Name = "totalListingViews", EmitDefaultValue = false)]
        public int TotalListingViews { get; private set; }

        /// <summary>
        /// Returns false as TotalListingViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalListingViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of listing photo views
        /// </summary>
        /// <value>Total number of listing photo views</value>
        [DataMember(Name = "totalPhotoViews", EmitDefaultValue = false)]
        public int TotalPhotoViews { get; private set; }

        /// <summary>
        /// Returns false as TotalPhotoViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalPhotoViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of listing photo gallery views
        /// </summary>
        /// <value>Total number of listing photo gallery views</value>
        [DataMember(Name = "totalPhotoGalleryViews", EmitDefaultValue = false)]
        public int TotalPhotoGalleryViews { get; private set; }

        /// <summary>
        /// Returns false as TotalPhotoGalleryViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalPhotoGalleryViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of floorplan views
        /// </summary>
        /// <value>Total number of floorplan views</value>
        [DataMember(Name = "totalFloorplanViews", EmitDefaultValue = false)]
        public int TotalFloorplanViews { get; private set; }

        /// <summary>
        /// Returns false as TotalFloorplanViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalFloorplanViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of address map views
        /// </summary>
        /// <value>Total number of address map views</value>
        [DataMember(Name = "totalMapViews", EmitDefaultValue = false)]
        public int TotalMapViews { get; private set; }

        /// <summary>
        /// Returns false as TotalMapViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalMapViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of vedio views
        /// </summary>
        /// <value>Total number of vedio views</value>
        [DataMember(Name = "totalVideoViews", EmitDefaultValue = false)]
        public int TotalVideoViews { get; private set; }

        /// <summary>
        /// Returns false as TotalVideoViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalVideoViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of Ebrochure views
        /// </summary>
        /// <value>Total number of Ebrochure views</value>
        [DataMember(Name = "totalEbrochureViews", EmitDefaultValue = false)]
        public int TotalEbrochureViews { get; private set; }

        /// <summary>
        /// Returns false as TotalEbrochureViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalEbrochureViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of agent detail views
        /// </summary>
        /// <value>Total number of agent detail views</value>
        [DataMember(Name = "totalAgentDetailViews", EmitDefaultValue = false)]
        public int TotalAgentDetailViews { get; private set; }

        /// <summary>
        /// Returns false as TotalAgentDetailViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalAgentDetailViews()
        {
            return false;
        }

        /// <summary>
        /// Total number of times the listing was shortlisted
        /// </summary>
        /// <value>Total number of times the listing was shortlisted</value>
        [DataMember(Name = "totalShortlisted", EmitDefaultValue = false)]
        public int TotalShortlisted { get; private set; }

        /// <summary>
        /// Returns false as TotalShortlisted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalShortlisted()
        {
            return false;
        }

        /// <summary>
        /// Total number of time the listing detail was printed
        /// </summary>
        /// <value>Total number of time the listing detail was printed</value>
        [DataMember(Name = "totalPrinted", EmitDefaultValue = false)]
        public int TotalPrinted { get; private set; }

        /// <summary>
        /// Returns false as TotalPrinted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalPrinted()
        {
            return false;
        }

        /// <summary>
        /// Total number of times the agent phone number was revealed for contact
        /// </summary>
        /// <value>Total number of times the agent phone number was revealed for contact</value>
        [DataMember(Name = "totalAgentPhoneNumberReveals", EmitDefaultValue = false)]
        public int TotalAgentPhoneNumberReveals { get; private set; }

        /// <summary>
        /// Returns false as TotalAgentPhoneNumberReveals should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalAgentPhoneNumberReveals()
        {
            return false;
        }

        /// <summary>
        /// Total number of enquiries
        /// </summary>
        /// <value>Total number of enquiries</value>
        [DataMember(Name = "totalEnquiries", EmitDefaultValue = false)]
        public int TotalEnquiries { get; private set; }

        /// <summary>
        /// Returns false as TotalEnquiries should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalEnquiries()
        {
            return false;
        }

        /// <summary>
        /// Total number of times the listing link was emailed
        /// </summary>
        /// <value>Total number of times the listing link was emailed</value>
        [DataMember(Name = "totalEmailToFriend", EmitDefaultValue = false)]
        public int TotalEmailToFriend { get; private set; }

        /// <summary>
        /// Returns false as TotalEmailToFriend should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalEmailToFriend()
        {
            return false;
        }

        /// <summary>
        /// Total number of shares via social media
        /// </summary>
        /// <value>Total number of shares via social media</value>
        [DataMember(Name = "totalSharedViaSocialMedia", EmitDefaultValue = false)]
        public int TotalSharedViaSocialMedia { get; private set; }

        /// <summary>
        /// Returns false as TotalSharedViaSocialMedia should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalSharedViaSocialMedia()
        {
            return false;
        }

        /// <summary>
        /// Total numnber of times when the inspection was saved to calendar
        /// </summary>
        /// <value>Total numnber of times when the inspection was saved to calendar</value>
        [DataMember(Name = "totalInspectionTimeSaving", EmitDefaultValue = false)]
        public int TotalInspectionTimeSaving { get; private set; }

        /// <summary>
        /// Returns false as TotalInspectionTimeSaving should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalInspectionTimeSaving()
        {
            return false;
        }

        /// <summary>
        /// Total number of calls made to agent from inside the listing
        /// </summary>
        /// <value>Total number of calls made to agent from inside the listing</value>
        [DataMember(Name = "totalCallToAgentFromMobile", EmitDefaultValue = false)]
        public int TotalCallToAgentFromMobile { get; private set; }

        /// <summary>
        /// Returns false as TotalCallToAgentFromMobile should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalCallToAgentFromMobile()
        {
            return false;
        }

        /// <summary>
        /// Percentage of total views from website
        /// </summary>
        /// <value>Percentage of total views from website</value>
        [DataMember(Name = "percentageWebsiteViews", EmitDefaultValue = false)]
        public double PercentageWebsiteViews { get; private set; }

        /// <summary>
        /// Returns false as PercentageWebsiteViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentageWebsiteViews()
        {
            return false;
        }

        /// <summary>
        /// Percentage of total views from mobile site
        /// </summary>
        /// <value>Percentage of total views from mobile site</value>
        [DataMember(Name = "percentageMobileSiteViews", EmitDefaultValue = false)]
        public double PercentageMobileSiteViews { get; private set; }

        /// <summary>
        /// Returns false as PercentageMobileSiteViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentageMobileSiteViews()
        {
            return false;
        }

        /// <summary>
        /// Percentage of total views from smart phone apps
        /// </summary>
        /// <value>Percentage of total views from smart phone apps</value>
        [DataMember(Name = "percentageSmartPhoneViews", EmitDefaultValue = false)]
        public double PercentageSmartPhoneViews { get; private set; }

        /// <summary>
        /// Returns false as PercentageSmartPhoneViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentageSmartPhoneViews()
        {
            return false;
        }

        /// <summary>
        /// Percentage of total views from tablets
        /// </summary>
        /// <value>Percentage of total views from tablets</value>
        [DataMember(Name = "percentageTabletViews", EmitDefaultValue = false)]
        public double PercentageTabletViews { get; private set; }

        /// <summary>
        /// Returns false as PercentageTabletViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentageTabletViews()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1ListingsStatistics {\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  ListingId: ").Append(ListingId).Append("\n");
            sb.Append("  TotalListingViews: ").Append(TotalListingViews).Append("\n");
            sb.Append("  TotalPhotoViews: ").Append(TotalPhotoViews).Append("\n");
            sb.Append("  TotalPhotoGalleryViews: ").Append(TotalPhotoGalleryViews).Append("\n");
            sb.Append("  TotalFloorplanViews: ").Append(TotalFloorplanViews).Append("\n");
            sb.Append("  TotalMapViews: ").Append(TotalMapViews).Append("\n");
            sb.Append("  TotalVideoViews: ").Append(TotalVideoViews).Append("\n");
            sb.Append("  TotalEbrochureViews: ").Append(TotalEbrochureViews).Append("\n");
            sb.Append("  TotalAgentDetailViews: ").Append(TotalAgentDetailViews).Append("\n");
            sb.Append("  TotalShortlisted: ").Append(TotalShortlisted).Append("\n");
            sb.Append("  TotalPrinted: ").Append(TotalPrinted).Append("\n");
            sb.Append("  TotalAgentPhoneNumberReveals: ").Append(TotalAgentPhoneNumberReveals).Append("\n");
            sb.Append("  TotalEnquiries: ").Append(TotalEnquiries).Append("\n");
            sb.Append("  TotalEmailToFriend: ").Append(TotalEmailToFriend).Append("\n");
            sb.Append("  TotalSharedViaSocialMedia: ").Append(TotalSharedViaSocialMedia).Append("\n");
            sb.Append("  TotalInspectionTimeSaving: ").Append(TotalInspectionTimeSaving).Append("\n");
            sb.Append("  TotalCallToAgentFromMobile: ").Append(TotalCallToAgentFromMobile).Append("\n");
            sb.Append("  PercentageWebsiteViews: ").Append(PercentageWebsiteViews).Append("\n");
            sb.Append("  PercentageMobileSiteViews: ").Append(PercentageMobileSiteViews).Append("\n");
            sb.Append("  PercentageSmartPhoneViews: ").Append(PercentageSmartPhoneViews).Append("\n");
            sb.Append("  PercentageTabletViews: ").Append(PercentageTabletViews).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1ListingsStatistics);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1ListingsStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1ListingsStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1ListingsStatistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.ListingId == input.ListingId ||
                    this.ListingId.Equals(input.ListingId)
                ) && 
                (
                    this.TotalListingViews == input.TotalListingViews ||
                    this.TotalListingViews.Equals(input.TotalListingViews)
                ) && 
                (
                    this.TotalPhotoViews == input.TotalPhotoViews ||
                    this.TotalPhotoViews.Equals(input.TotalPhotoViews)
                ) && 
                (
                    this.TotalPhotoGalleryViews == input.TotalPhotoGalleryViews ||
                    this.TotalPhotoGalleryViews.Equals(input.TotalPhotoGalleryViews)
                ) && 
                (
                    this.TotalFloorplanViews == input.TotalFloorplanViews ||
                    this.TotalFloorplanViews.Equals(input.TotalFloorplanViews)
                ) && 
                (
                    this.TotalMapViews == input.TotalMapViews ||
                    this.TotalMapViews.Equals(input.TotalMapViews)
                ) && 
                (
                    this.TotalVideoViews == input.TotalVideoViews ||
                    this.TotalVideoViews.Equals(input.TotalVideoViews)
                ) && 
                (
                    this.TotalEbrochureViews == input.TotalEbrochureViews ||
                    this.TotalEbrochureViews.Equals(input.TotalEbrochureViews)
                ) && 
                (
                    this.TotalAgentDetailViews == input.TotalAgentDetailViews ||
                    this.TotalAgentDetailViews.Equals(input.TotalAgentDetailViews)
                ) && 
                (
                    this.TotalShortlisted == input.TotalShortlisted ||
                    this.TotalShortlisted.Equals(input.TotalShortlisted)
                ) && 
                (
                    this.TotalPrinted == input.TotalPrinted ||
                    this.TotalPrinted.Equals(input.TotalPrinted)
                ) && 
                (
                    this.TotalAgentPhoneNumberReveals == input.TotalAgentPhoneNumberReveals ||
                    this.TotalAgentPhoneNumberReveals.Equals(input.TotalAgentPhoneNumberReveals)
                ) && 
                (
                    this.TotalEnquiries == input.TotalEnquiries ||
                    this.TotalEnquiries.Equals(input.TotalEnquiries)
                ) && 
                (
                    this.TotalEmailToFriend == input.TotalEmailToFriend ||
                    this.TotalEmailToFriend.Equals(input.TotalEmailToFriend)
                ) && 
                (
                    this.TotalSharedViaSocialMedia == input.TotalSharedViaSocialMedia ||
                    this.TotalSharedViaSocialMedia.Equals(input.TotalSharedViaSocialMedia)
                ) && 
                (
                    this.TotalInspectionTimeSaving == input.TotalInspectionTimeSaving ||
                    this.TotalInspectionTimeSaving.Equals(input.TotalInspectionTimeSaving)
                ) && 
                (
                    this.TotalCallToAgentFromMobile == input.TotalCallToAgentFromMobile ||
                    this.TotalCallToAgentFromMobile.Equals(input.TotalCallToAgentFromMobile)
                ) && 
                (
                    this.PercentageWebsiteViews == input.PercentageWebsiteViews ||
                    this.PercentageWebsiteViews.Equals(input.PercentageWebsiteViews)
                ) && 
                (
                    this.PercentageMobileSiteViews == input.PercentageMobileSiteViews ||
                    this.PercentageMobileSiteViews.Equals(input.PercentageMobileSiteViews)
                ) && 
                (
                    this.PercentageSmartPhoneViews == input.PercentageSmartPhoneViews ||
                    this.PercentageSmartPhoneViews.Equals(input.PercentageSmartPhoneViews)
                ) && 
                (
                    this.PercentageTabletViews == input.PercentageTabletViews ||
                    this.PercentageTabletViews.Equals(input.PercentageTabletViews)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventDate != null)
                    hashCode = hashCode * 59 + this.EventDate.GetHashCode();
                hashCode = hashCode * 59 + this.ListingId.GetHashCode();
                hashCode = hashCode * 59 + this.TotalListingViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalPhotoViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalPhotoGalleryViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalFloorplanViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalMapViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalVideoViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalEbrochureViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalAgentDetailViews.GetHashCode();
                hashCode = hashCode * 59 + this.TotalShortlisted.GetHashCode();
                hashCode = hashCode * 59 + this.TotalPrinted.GetHashCode();
                hashCode = hashCode * 59 + this.TotalAgentPhoneNumberReveals.GetHashCode();
                hashCode = hashCode * 59 + this.TotalEnquiries.GetHashCode();
                hashCode = hashCode * 59 + this.TotalEmailToFriend.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSharedViaSocialMedia.GetHashCode();
                hashCode = hashCode * 59 + this.TotalInspectionTimeSaving.GetHashCode();
                hashCode = hashCode * 59 + this.TotalCallToAgentFromMobile.GetHashCode();
                hashCode = hashCode * 59 + this.PercentageWebsiteViews.GetHashCode();
                hashCode = hashCode * 59 + this.PercentageMobileSiteViews.GetHashCode();
                hashCode = hashCode * 59 + this.PercentageSmartPhoneViews.GetHashCode();
                hashCode = hashCode * 59 + this.PercentageTabletViews.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
