/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Represents the start or end of a listing activity cycle
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Properties.ActivityBoundary")]
    public partial class DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary : IEquatable<DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary" /> class.
        /// </summary>
        /// <param name="listingId">Gets the listing identifier..</param>
        /// <param name="advertisedDate">Gets or sets the advertised date..</param>
        /// <param name="advertisedPrice">Gets or sets the advertised price..</param>
        /// <param name="agency">Gets or sets the name of the Agency..</param>
        /// <param name="agencyColour">Gets or sets the agency colour..</param>
        /// <param name="agencyId">Gets or sets the Domain Agency identifier..</param>
        /// <param name="agencyLogo">Gets or sets the agency logo..</param>
        /// <param name="agencyUrl">Gets or sets the agency url..</param>
        /// <param name="apmAgencyId">Gets or sets the APM agency identifier..</param>
        /// <param name="source">Gets or sets the source of the Activity.</param>
        /// <param name="suppressDetails">Gets or sets a value to indicate whether all of the activity details should be suppressed..</param>
        /// <param name="suppressPrice">Gets or sets a value to indicate whether the activity price should be suppressed.</param>
        /// <param name="type">Gets or sets the type of Activity.</param>
        /// <param name="url">Gets or sets the Advert URL..</param>
        public DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary(int listingId = default(int), DateTime advertisedDate = default(DateTime), int advertisedPrice = default(int), string agency = default(string), string agencyColour = default(string), int agencyId = default(int), string agencyLogo = default(string), string agencyUrl = default(string), int apmAgencyId = default(int), string source = default(string), bool suppressDetails = default(bool), bool suppressPrice = default(bool), string type = default(string), string url = default(string))
        {
            this.ListingId = listingId;
            this.AdvertisedDate = advertisedDate;
            this.AdvertisedPrice = advertisedPrice;
            this.Agency = agency;
            this.AgencyColour = agencyColour;
            this.AgencyId = agencyId;
            this.AgencyLogo = agencyLogo;
            this.AgencyUrl = agencyUrl;
            this.ApmAgencyId = apmAgencyId;
            this.Source = source;
            this.SuppressDetails = suppressDetails;
            this.SuppressPrice = suppressPrice;
            this.Type = type;
            this.Url = url;
        }

        /// <summary>
        /// Gets the listing identifier.
        /// </summary>
        /// <value>Gets the listing identifier.</value>
        [DataMember(Name = "listingId", EmitDefaultValue = false)]
        public int ListingId { get; set; }

        /// <summary>
        /// Gets or sets the advertised date.
        /// </summary>
        /// <value>Gets or sets the advertised date.</value>
        [DataMember(Name = "advertisedDate", EmitDefaultValue = false)]
        public DateTime AdvertisedDate { get; set; }

        /// <summary>
        /// Gets or sets the advertised price.
        /// </summary>
        /// <value>Gets or sets the advertised price.</value>
        [DataMember(Name = "advertisedPrice", EmitDefaultValue = false)]
        public int AdvertisedPrice { get; set; }

        /// <summary>
        /// Gets or sets the name of the Agency.
        /// </summary>
        /// <value>Gets or sets the name of the Agency.</value>
        [DataMember(Name = "agency", EmitDefaultValue = false)]
        public string Agency { get; set; }

        /// <summary>
        /// Gets or sets the agency colour.
        /// </summary>
        /// <value>Gets or sets the agency colour.</value>
        [DataMember(Name = "agencyColour", EmitDefaultValue = false)]
        public string AgencyColour { get; set; }

        /// <summary>
        /// Gets or sets the Domain Agency identifier.
        /// </summary>
        /// <value>Gets or sets the Domain Agency identifier.</value>
        [DataMember(Name = "agencyId", EmitDefaultValue = false)]
        public int AgencyId { get; set; }

        /// <summary>
        /// Gets or sets the agency logo.
        /// </summary>
        /// <value>Gets or sets the agency logo.</value>
        [DataMember(Name = "agencyLogo", EmitDefaultValue = false)]
        public string AgencyLogo { get; set; }

        /// <summary>
        /// Gets or sets the agency url.
        /// </summary>
        /// <value>Gets or sets the agency url.</value>
        [DataMember(Name = "agencyUrl", EmitDefaultValue = false)]
        public string AgencyUrl { get; set; }

        /// <summary>
        /// Gets or sets the APM agency identifier.
        /// </summary>
        /// <value>Gets or sets the APM agency identifier.</value>
        [DataMember(Name = "apmAgencyId", EmitDefaultValue = false)]
        public int ApmAgencyId { get; set; }

        /// <summary>
        /// Gets or sets the source of the Activity
        /// </summary>
        /// <value>Gets or sets the source of the Activity</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets a value to indicate whether all of the activity details should be suppressed.
        /// </summary>
        /// <value>Gets or sets a value to indicate whether all of the activity details should be suppressed.</value>
        [DataMember(Name = "suppressDetails", EmitDefaultValue = false)]
        public bool SuppressDetails { get; set; }

        /// <summary>
        /// Gets or sets a value to indicate whether the activity price should be suppressed
        /// </summary>
        /// <value>Gets or sets a value to indicate whether the activity price should be suppressed</value>
        [DataMember(Name = "suppressPrice", EmitDefaultValue = false)]
        public bool SuppressPrice { get; set; }

        /// <summary>
        /// Gets or sets the type of Activity
        /// </summary>
        /// <value>Gets or sets the type of Activity</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the Advert URL.
        /// </summary>
        /// <value>Gets or sets the Advert URL.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary {\n");
            sb.Append("  ListingId: ").Append(ListingId).Append("\n");
            sb.Append("  AdvertisedDate: ").Append(AdvertisedDate).Append("\n");
            sb.Append("  AdvertisedPrice: ").Append(AdvertisedPrice).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  AgencyColour: ").Append(AgencyColour).Append("\n");
            sb.Append("  AgencyId: ").Append(AgencyId).Append("\n");
            sb.Append("  AgencyLogo: ").Append(AgencyLogo).Append("\n");
            sb.Append("  AgencyUrl: ").Append(AgencyUrl).Append("\n");
            sb.Append("  ApmAgencyId: ").Append(ApmAgencyId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SuppressDetails: ").Append(SuppressDetails).Append("\n");
            sb.Append("  SuppressPrice: ").Append(SuppressPrice).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListingId == input.ListingId ||
                    this.ListingId.Equals(input.ListingId)
                ) && 
                (
                    this.AdvertisedDate == input.AdvertisedDate ||
                    (this.AdvertisedDate != null &&
                    this.AdvertisedDate.Equals(input.AdvertisedDate))
                ) && 
                (
                    this.AdvertisedPrice == input.AdvertisedPrice ||
                    this.AdvertisedPrice.Equals(input.AdvertisedPrice)
                ) && 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                ) && 
                (
                    this.AgencyColour == input.AgencyColour ||
                    (this.AgencyColour != null &&
                    this.AgencyColour.Equals(input.AgencyColour))
                ) && 
                (
                    this.AgencyId == input.AgencyId ||
                    this.AgencyId.Equals(input.AgencyId)
                ) && 
                (
                    this.AgencyLogo == input.AgencyLogo ||
                    (this.AgencyLogo != null &&
                    this.AgencyLogo.Equals(input.AgencyLogo))
                ) && 
                (
                    this.AgencyUrl == input.AgencyUrl ||
                    (this.AgencyUrl != null &&
                    this.AgencyUrl.Equals(input.AgencyUrl))
                ) && 
                (
                    this.ApmAgencyId == input.ApmAgencyId ||
                    this.ApmAgencyId.Equals(input.ApmAgencyId)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SuppressDetails == input.SuppressDetails ||
                    this.SuppressDetails.Equals(input.SuppressDetails)
                ) && 
                (
                    this.SuppressPrice == input.SuppressPrice ||
                    this.SuppressPrice.Equals(input.SuppressPrice)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ListingId.GetHashCode();
                if (this.AdvertisedDate != null)
                    hashCode = hashCode * 59 + this.AdvertisedDate.GetHashCode();
                hashCode = hashCode * 59 + this.AdvertisedPrice.GetHashCode();
                if (this.Agency != null)
                    hashCode = hashCode * 59 + this.Agency.GetHashCode();
                if (this.AgencyColour != null)
                    hashCode = hashCode * 59 + this.AgencyColour.GetHashCode();
                hashCode = hashCode * 59 + this.AgencyId.GetHashCode();
                if (this.AgencyLogo != null)
                    hashCode = hashCode * 59 + this.AgencyLogo.GetHashCode();
                if (this.AgencyUrl != null)
                    hashCode = hashCode * 59 + this.AgencyUrl.GetHashCode();
                hashCode = hashCode * 59 + this.ApmAgencyId.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.SuppressDetails.GetHashCode();
                hashCode = hashCode * 59 + this.SuppressPrice.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
