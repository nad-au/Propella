/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// A current advert for a {Domain.PropertyId.Model.Models.Property}
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Properties.Advert")]
    public partial class DomainPublicAdapterWebApiModelsV1PropertiesAdvert : IEquatable<DomainPublicAdapterWebApiModelsV1PropertiesAdvert>, IValidatableObject
    {
        /// <summary>
        /// Defines OnMarketTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnMarketTypesEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Rent for value: Rent
            /// </summary>
            [EnumMember(Value = "Rent")]
            Rent = 2,

            /// <summary>
            /// Enum Sale for value: Sale
            /// </summary>
            [EnumMember(Value = "Sale")]
            Sale = 3,

            /// <summary>
            /// Enum Share for value: Share
            /// </summary>
            [EnumMember(Value = "Share")]
            Share = 4

        }


        /// <summary>
        /// Gets or sets the on market type.
        /// </summary>
        /// <value>Gets or sets the on market type.</value>
        [DataMember(Name = "onMarketTypes", EmitDefaultValue = false)]
        public List<OnMarketTypesEnum> OnMarketTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1PropertiesAdvert" /> class.
        /// </summary>
        /// <param name="onMarketTypes">Gets or sets the on market type..</param>
        /// <param name="advertId">Gets or sets the advert identifier..</param>
        /// <param name="agency">Gets or sets the name of the agency..</param>
        /// <param name="agencyColour">Gets or sets the agency colour..</param>
        /// <param name="agencyId">Gets or sets the Domain Agency identifier..</param>
        /// <param name="agencyLogo">Gets or sets the agency logo..</param>
        /// <param name="url">Gets or sets the URL..</param>
        public DomainPublicAdapterWebApiModelsV1PropertiesAdvert(List<OnMarketTypesEnum> onMarketTypes = default(List<OnMarketTypesEnum>), int advertId = default(int), string agency = default(string), string agencyColour = default(string), int agencyId = default(int), string agencyLogo = default(string), string url = default(string))
        {
            this.OnMarketTypes = onMarketTypes;
            this.AdvertId = advertId;
            this.Agency = agency;
            this.AgencyColour = agencyColour;
            this.AgencyId = agencyId;
            this.AgencyLogo = agencyLogo;
            this.Url = url;
        }

        /// <summary>
        /// Gets or sets the advert identifier.
        /// </summary>
        /// <value>Gets or sets the advert identifier.</value>
        [DataMember(Name = "advertId", EmitDefaultValue = false)]
        public int AdvertId { get; set; }

        /// <summary>
        /// Gets or sets the name of the agency.
        /// </summary>
        /// <value>Gets or sets the name of the agency.</value>
        [DataMember(Name = "agency", EmitDefaultValue = false)]
        public string Agency { get; set; }

        /// <summary>
        /// Gets or sets the agency colour.
        /// </summary>
        /// <value>Gets or sets the agency colour.</value>
        [DataMember(Name = "agencyColour", EmitDefaultValue = false)]
        public string AgencyColour { get; set; }

        /// <summary>
        /// Gets or sets the Domain Agency identifier.
        /// </summary>
        /// <value>Gets or sets the Domain Agency identifier.</value>
        [DataMember(Name = "agencyId", EmitDefaultValue = false)]
        public int AgencyId { get; set; }

        /// <summary>
        /// Gets or sets the agency logo.
        /// </summary>
        /// <value>Gets or sets the agency logo.</value>
        [DataMember(Name = "agencyLogo", EmitDefaultValue = false)]
        public string AgencyLogo { get; set; }

        /// <summary>
        /// Gets or sets the URL.
        /// </summary>
        /// <value>Gets or sets the URL.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1PropertiesAdvert {\n");
            sb.Append("  OnMarketTypes: ").Append(OnMarketTypes).Append("\n");
            sb.Append("  AdvertId: ").Append(AdvertId).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  AgencyColour: ").Append(AgencyColour).Append("\n");
            sb.Append("  AgencyId: ").Append(AgencyId).Append("\n");
            sb.Append("  AgencyLogo: ").Append(AgencyLogo).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1PropertiesAdvert);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1PropertiesAdvert instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1PropertiesAdvert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1PropertiesAdvert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OnMarketTypes == input.OnMarketTypes ||
                    this.OnMarketTypes.SequenceEqual(input.OnMarketTypes)
                ) && 
                (
                    this.AdvertId == input.AdvertId ||
                    this.AdvertId.Equals(input.AdvertId)
                ) && 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                ) && 
                (
                    this.AgencyColour == input.AgencyColour ||
                    (this.AgencyColour != null &&
                    this.AgencyColour.Equals(input.AgencyColour))
                ) && 
                (
                    this.AgencyId == input.AgencyId ||
                    this.AgencyId.Equals(input.AgencyId)
                ) && 
                (
                    this.AgencyLogo == input.AgencyLogo ||
                    (this.AgencyLogo != null &&
                    this.AgencyLogo.Equals(input.AgencyLogo))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OnMarketTypes.GetHashCode();
                hashCode = hashCode * 59 + this.AdvertId.GetHashCode();
                if (this.Agency != null)
                    hashCode = hashCode * 59 + this.Agency.GetHashCode();
                if (this.AgencyColour != null)
                    hashCode = hashCode * 59 + this.AgencyColour.GetHashCode();
                hashCode = hashCode * 59 + this.AgencyId.GetHashCode();
                if (this.AgencyLogo != null)
                    hashCode = hashCode * 59 + this.AgencyLogo.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
