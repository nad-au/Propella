/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// The history of a property
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Properties.History")]
    public partial class DomainPublicAdapterWebApiModelsV1PropertiesHistory : IEquatable<DomainPublicAdapterWebApiModelsV1PropertiesHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1PropertiesHistory" /> class.
        /// </summary>
        /// <param name="rentals">The collection of historical rentals..</param>
        /// <param name="sales">The collection of historical sales..</param>
        /// <param name="suppress">Gets or sets a value indicating whether this {Domain.PropertyId.Model.Models.History} is suppress..</param>
        public DomainPublicAdapterWebApiModelsV1PropertiesHistory(List<DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity> rentals = default(List<DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity>), List<DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity> sales = default(List<DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity>), bool suppress = default(bool))
        {
            this.Rentals = rentals;
            this.Sales = sales;
            this.Suppress = suppress;
        }

        /// <summary>
        /// The collection of historical rentals.
        /// </summary>
        /// <value>The collection of historical rentals.</value>
        [DataMember(Name = "rentals", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity> Rentals { get; set; }

        /// <summary>
        /// The collection of historical sales.
        /// </summary>
        /// <value>The collection of historical sales.</value>
        [DataMember(Name = "sales", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity> Sales { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this {Domain.PropertyId.Model.Models.History} is suppress.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this {Domain.PropertyId.Model.Models.History} is suppress.</value>
        [DataMember(Name = "suppress", EmitDefaultValue = false)]
        public bool Suppress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1PropertiesHistory {\n");
            sb.Append("  Rentals: ").Append(Rentals).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Suppress: ").Append(Suppress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1PropertiesHistory);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1PropertiesHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1PropertiesHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1PropertiesHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rentals == input.Rentals ||
                    this.Rentals != null &&
                    input.Rentals != null &&
                    this.Rentals.SequenceEqual(input.Rentals)
                ) && 
                (
                    this.Sales == input.Sales ||
                    this.Sales != null &&
                    input.Sales != null &&
                    this.Sales.SequenceEqual(input.Sales)
                ) && 
                (
                    this.Suppress == input.Suppress ||
                    this.Suppress.Equals(input.Suppress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rentals != null)
                    hashCode = hashCode * 59 + this.Rentals.GetHashCode();
                if (this.Sales != null)
                    hashCode = hashCode * 59 + this.Sales.GetHashCode();
                hashCode = hashCode * 59 + this.Suppress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
