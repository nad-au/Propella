/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// A historical sale activity
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Properties.SaleActivity")]
    public partial class DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity : IEquatable<DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity" /> class.
        /// </summary>
        /// <param name="listingId">Gets or sets the listing identifier..</param>
        /// <param name="agency">Gets or sets the agency name..</param>
        /// <param name="agencyColour">Gets or sets the agency colour..</param>
        /// <param name="agencyId">Gets or sets the Domain Agency identifier..</param>
        /// <param name="agencyLogo">Gets or sets the agency logo..</param>
        /// <param name="agencyUrl">Gets or sets the agency URL..</param>
        /// <param name="apmAgencyId">Gets or sets the APM agency identifier..</param>
        /// <param name="date">Gets or sets the date of the sale.</param>
        /// <param name="documentedAsSold">Gets or sets whether the property was documented as sold..</param>
        /// <param name="price">Gets or sets the price..</param>
        /// <param name="reportedAsSold">Gets or sets whether the property was reported as sold..</param>
        /// <param name="suppressDetails">Gets or sets a value to indicate whether all of the sale details should be suppressed..</param>
        /// <param name="suppressPrice">Gets or sets a value to indicate whether the sale price should be suppressed.</param>
        /// <param name="type">Gets or sets the type of sale.</param>
        /// <param name="url">Gets or sets the URL..</param>
        /// <param name="first">first.</param>
        /// <param name="id">The APM National Activity identifier for the record..</param>
        /// <param name="last">last.</param>
        /// <param name="propertyType">The type of the property..</param>
        public DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity(int listingId = default(int), string agency = default(string), string agencyColour = default(string), int agencyId = default(int), string agencyLogo = default(string), string agencyUrl = default(string), int apmAgencyId = default(int), DateTime date = default(DateTime), bool documentedAsSold = default(bool), int price = default(int), bool reportedAsSold = default(bool), bool suppressDetails = default(bool), bool suppressPrice = default(bool), string type = default(string), string url = default(string), DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary first = default(DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary), long id = default(long), DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary last = default(DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary), string propertyType = default(string))
        {
            this.ListingId = listingId;
            this.Agency = agency;
            this.AgencyColour = agencyColour;
            this.AgencyId = agencyId;
            this.AgencyLogo = agencyLogo;
            this.AgencyUrl = agencyUrl;
            this.ApmAgencyId = apmAgencyId;
            this.Date = date;
            this.DocumentedAsSold = documentedAsSold;
            this.Price = price;
            this.ReportedAsSold = reportedAsSold;
            this.SuppressDetails = suppressDetails;
            this.SuppressPrice = suppressPrice;
            this.Type = type;
            this.Url = url;
            this.First = first;
            this.Id = id;
            this.Last = last;
            this.PropertyType = propertyType;
        }

        /// <summary>
        /// Gets or sets the listing identifier.
        /// </summary>
        /// <value>Gets or sets the listing identifier.</value>
        [DataMember(Name = "listingId", EmitDefaultValue = false)]
        public int ListingId { get; set; }

        /// <summary>
        /// Gets or sets the agency name.
        /// </summary>
        /// <value>Gets or sets the agency name.</value>
        [DataMember(Name = "agency", EmitDefaultValue = false)]
        public string Agency { get; set; }

        /// <summary>
        /// Gets or sets the agency colour.
        /// </summary>
        /// <value>Gets or sets the agency colour.</value>
        [DataMember(Name = "agencyColour", EmitDefaultValue = false)]
        public string AgencyColour { get; set; }

        /// <summary>
        /// Gets or sets the Domain Agency identifier.
        /// </summary>
        /// <value>Gets or sets the Domain Agency identifier.</value>
        [DataMember(Name = "agencyId", EmitDefaultValue = false)]
        public int AgencyId { get; set; }

        /// <summary>
        /// Gets or sets the agency logo.
        /// </summary>
        /// <value>Gets or sets the agency logo.</value>
        [DataMember(Name = "agencyLogo", EmitDefaultValue = false)]
        public string AgencyLogo { get; set; }

        /// <summary>
        /// Gets or sets the agency URL.
        /// </summary>
        /// <value>Gets or sets the agency URL.</value>
        [DataMember(Name = "agencyUrl", EmitDefaultValue = false)]
        public string AgencyUrl { get; set; }

        /// <summary>
        /// Gets or sets the APM agency identifier.
        /// </summary>
        /// <value>Gets or sets the APM agency identifier.</value>
        [DataMember(Name = "apmAgencyId", EmitDefaultValue = false)]
        public int ApmAgencyId { get; set; }

        /// <summary>
        /// Gets or sets the date of the sale
        /// </summary>
        /// <value>Gets or sets the date of the sale</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets the days on market before the property was sold
        /// </summary>
        /// <value>Gets the days on market before the property was sold</value>
        [DataMember(Name = "daysOnMarket", EmitDefaultValue = false)]
        public double DaysOnMarket { get; private set; }

        /// <summary>
        /// Returns false as DaysOnMarket should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDaysOnMarket()
        {
            return false;
        }

        /// <summary>
        /// Gets or sets whether the property was documented as sold.
        /// </summary>
        /// <value>Gets or sets whether the property was documented as sold.</value>
        [DataMember(Name = "documentedAsSold", EmitDefaultValue = false)]
        public bool DocumentedAsSold { get; set; }

        /// <summary>
        /// Gets or sets the price.
        /// </summary>
        /// <value>Gets or sets the price.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public int Price { get; set; }

        /// <summary>
        /// Gets or sets whether the property was reported as sold.
        /// </summary>
        /// <value>Gets or sets whether the property was reported as sold.</value>
        [DataMember(Name = "reportedAsSold", EmitDefaultValue = false)]
        public bool ReportedAsSold { get; set; }

        /// <summary>
        /// Gets or sets a value to indicate whether all of the sale details should be suppressed.
        /// </summary>
        /// <value>Gets or sets a value to indicate whether all of the sale details should be suppressed.</value>
        [DataMember(Name = "suppressDetails", EmitDefaultValue = false)]
        public bool SuppressDetails { get; set; }

        /// <summary>
        /// Gets or sets a value to indicate whether the sale price should be suppressed
        /// </summary>
        /// <value>Gets or sets a value to indicate whether the sale price should be suppressed</value>
        [DataMember(Name = "suppressPrice", EmitDefaultValue = false)]
        public bool SuppressPrice { get; set; }

        /// <summary>
        /// Gets or sets the type of sale
        /// </summary>
        /// <value>Gets or sets the type of sale</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the URL.
        /// </summary>
        /// <value>Gets or sets the URL.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name = "first", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary First { get; set; }

        /// <summary>
        /// The APM National Activity identifier for the record.
        /// </summary>
        /// <value>The APM National Activity identifier for the record.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name = "last", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary Last { get; set; }

        /// <summary>
        /// The type of the property.
        /// </summary>
        /// <value>The type of the property.</value>
        [DataMember(Name = "propertyType", EmitDefaultValue = false)]
        public string PropertyType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity {\n");
            sb.Append("  ListingId: ").Append(ListingId).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  AgencyColour: ").Append(AgencyColour).Append("\n");
            sb.Append("  AgencyId: ").Append(AgencyId).Append("\n");
            sb.Append("  AgencyLogo: ").Append(AgencyLogo).Append("\n");
            sb.Append("  AgencyUrl: ").Append(AgencyUrl).Append("\n");
            sb.Append("  ApmAgencyId: ").Append(ApmAgencyId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DaysOnMarket: ").Append(DaysOnMarket).Append("\n");
            sb.Append("  DocumentedAsSold: ").Append(DocumentedAsSold).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ReportedAsSold: ").Append(ReportedAsSold).Append("\n");
            sb.Append("  SuppressDetails: ").Append(SuppressDetails).Append("\n");
            sb.Append("  SuppressPrice: ").Append(SuppressPrice).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1PropertiesSaleActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListingId == input.ListingId ||
                    this.ListingId.Equals(input.ListingId)
                ) && 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                ) && 
                (
                    this.AgencyColour == input.AgencyColour ||
                    (this.AgencyColour != null &&
                    this.AgencyColour.Equals(input.AgencyColour))
                ) && 
                (
                    this.AgencyId == input.AgencyId ||
                    this.AgencyId.Equals(input.AgencyId)
                ) && 
                (
                    this.AgencyLogo == input.AgencyLogo ||
                    (this.AgencyLogo != null &&
                    this.AgencyLogo.Equals(input.AgencyLogo))
                ) && 
                (
                    this.AgencyUrl == input.AgencyUrl ||
                    (this.AgencyUrl != null &&
                    this.AgencyUrl.Equals(input.AgencyUrl))
                ) && 
                (
                    this.ApmAgencyId == input.ApmAgencyId ||
                    this.ApmAgencyId.Equals(input.ApmAgencyId)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DaysOnMarket == input.DaysOnMarket ||
                    this.DaysOnMarket.Equals(input.DaysOnMarket)
                ) && 
                (
                    this.DocumentedAsSold == input.DocumentedAsSold ||
                    this.DocumentedAsSold.Equals(input.DocumentedAsSold)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.ReportedAsSold == input.ReportedAsSold ||
                    this.ReportedAsSold.Equals(input.ReportedAsSold)
                ) && 
                (
                    this.SuppressDetails == input.SuppressDetails ||
                    this.SuppressDetails.Equals(input.SuppressDetails)
                ) && 
                (
                    this.SuppressPrice == input.SuppressPrice ||
                    this.SuppressPrice.Equals(input.SuppressPrice)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.First == input.First ||
                    (this.First != null &&
                    this.First.Equals(input.First))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    (this.PropertyType != null &&
                    this.PropertyType.Equals(input.PropertyType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ListingId.GetHashCode();
                if (this.Agency != null)
                    hashCode = hashCode * 59 + this.Agency.GetHashCode();
                if (this.AgencyColour != null)
                    hashCode = hashCode * 59 + this.AgencyColour.GetHashCode();
                hashCode = hashCode * 59 + this.AgencyId.GetHashCode();
                if (this.AgencyLogo != null)
                    hashCode = hashCode * 59 + this.AgencyLogo.GetHashCode();
                if (this.AgencyUrl != null)
                    hashCode = hashCode * 59 + this.AgencyUrl.GetHashCode();
                hashCode = hashCode * 59 + this.ApmAgencyId.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.DaysOnMarket.GetHashCode();
                hashCode = hashCode * 59 + this.DocumentedAsSold.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.ReportedAsSold.GetHashCode();
                hashCode = hashCode * 59 + this.SuppressDetails.GetHashCode();
                hashCode = hashCode * 59 + this.SuppressPrice.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.First != null)
                    hashCode = hashCode * 59 + this.First.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.PropertyType != null)
                    hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
