/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelDomainSearchContractsV2Project
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.DomainSearchContractsV2Project")]
    public partial class DomainSearchServiceV2ModelDomainSearchContractsV2Project : IEquatable<DomainSearchServiceV2ModelDomainSearchContractsV2Project>, IValidatableObject
    {
        /// <summary>
        /// Defines PromoLevel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PromoLevelEnum
        {
            /// <summary>
            /// Enum Standard for value: Standard
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard = 1,

            /// <summary>
            /// Enum Premium for value: Premium
            /// </summary>
            [EnumMember(Value = "Premium")]
            Premium = 2

        }

        /// <summary>
        /// Gets or Sets PromoLevel
        /// </summary>
        [DataMember(Name = "promoLevel", EmitDefaultValue = false)]
        public PromoLevelEnum? PromoLevel { get; set; }
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ACT for value: ACT
            /// </summary>
            [EnumMember(Value = "ACT")]
            ACT = 1,

            /// <summary>
            /// Enum NSW for value: NSW
            /// </summary>
            [EnumMember(Value = "NSW")]
            NSW = 2,

            /// <summary>
            /// Enum QLD for value: QLD
            /// </summary>
            [EnumMember(Value = "QLD")]
            QLD = 3,

            /// <summary>
            /// Enum VIC for value: VIC
            /// </summary>
            [EnumMember(Value = "VIC")]
            VIC = 4,

            /// <summary>
            /// Enum SA for value: SA
            /// </summary>
            [EnumMember(Value = "SA")]
            SA = 5,

            /// <summary>
            /// Enum WA for value: WA
            /// </summary>
            [EnumMember(Value = "WA")]
            WA = 6,

            /// <summary>
            /// Enum NT for value: NT
            /// </summary>
            [EnumMember(Value = "NT")]
            NT = 7,

            /// <summary>
            /// Enum TAS for value: TAS
            /// </summary>
            [EnumMember(Value = "TAS")]
            TAS = 8

        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelDomainSearchContractsV2Project" /> class.
        /// </summary>
        /// <param name="promoLevel">promoLevel.</param>
        /// <param name="state">state.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="bannerUrl">bannerUrl.</param>
        /// <param name="preferredColorHex">preferredColorHex.</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="labels">labels.</param>
        /// <param name="displayableAddress">displayableAddress.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="suburbId">suburbId.</param>
        /// <param name="features">features.</param>
        /// <param name="media">media.</param>
        /// <param name="projectSlug">projectSlug.</param>
        public DomainSearchServiceV2ModelDomainSearchContractsV2Project(PromoLevelEnum? promoLevel = default(PromoLevelEnum?), StateEnum? state = default(StateEnum?), int id = default(int), string name = default(string), string bannerUrl = default(string), string preferredColorHex = default(string), string logoUrl = default(string), List<string> labels = default(List<string>), string displayableAddress = default(string), string suburb = default(string), int suburbId = default(int), List<string> features = default(List<string>), List<DomainSearchServiceV2ModelDomainSearchContractsV2Media> media = default(List<DomainSearchServiceV2ModelDomainSearchContractsV2Media>), string projectSlug = default(string))
        {
            this.PromoLevel = promoLevel;
            this.State = state;
            this.Id = id;
            this.Name = name;
            this.BannerUrl = bannerUrl;
            this.PreferredColorHex = preferredColorHex;
            this.LogoUrl = logoUrl;
            this.Labels = labels;
            this.DisplayableAddress = displayableAddress;
            this.Suburb = suburb;
            this.SuburbId = suburbId;
            this.Features = features;
            this.Media = media;
            this.ProjectSlug = projectSlug;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BannerUrl
        /// </summary>
        [DataMember(Name = "bannerUrl", EmitDefaultValue = false)]
        public string BannerUrl { get; set; }

        /// <summary>
        /// Gets or Sets PreferredColorHex
        /// </summary>
        [DataMember(Name = "preferredColorHex", EmitDefaultValue = false)]
        public string PreferredColorHex { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name = "logoUrl", EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Gets or Sets DisplayableAddress
        /// </summary>
        [DataMember(Name = "displayableAddress", EmitDefaultValue = false)]
        public string DisplayableAddress { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name = "suburb", EmitDefaultValue = false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets SuburbId
        /// </summary>
        [DataMember(Name = "suburbId", EmitDefaultValue = false)]
        public int SuburbId { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public List<string> Features { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<DomainSearchServiceV2ModelDomainSearchContractsV2Media> Media { get; set; }

        /// <summary>
        /// Gets or Sets ProjectSlug
        /// </summary>
        [DataMember(Name = "projectSlug", EmitDefaultValue = false)]
        public string ProjectSlug { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelDomainSearchContractsV2Project {\n");
            sb.Append("  PromoLevel: ").Append(PromoLevel).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BannerUrl: ").Append(BannerUrl).Append("\n");
            sb.Append("  PreferredColorHex: ").Append(PreferredColorHex).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  DisplayableAddress: ").Append(DisplayableAddress).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  SuburbId: ").Append(SuburbId).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  ProjectSlug: ").Append(ProjectSlug).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelDomainSearchContractsV2Project);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelDomainSearchContractsV2Project instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelDomainSearchContractsV2Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelDomainSearchContractsV2Project input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PromoLevel == input.PromoLevel ||
                    this.PromoLevel.Equals(input.PromoLevel)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.BannerUrl == input.BannerUrl ||
                    (this.BannerUrl != null &&
                    this.BannerUrl.Equals(input.BannerUrl))
                ) && 
                (
                    this.PreferredColorHex == input.PreferredColorHex ||
                    (this.PreferredColorHex != null &&
                    this.PreferredColorHex.Equals(input.PreferredColorHex))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.DisplayableAddress == input.DisplayableAddress ||
                    (this.DisplayableAddress != null &&
                    this.DisplayableAddress.Equals(input.DisplayableAddress))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.SuburbId == input.SuburbId ||
                    this.SuburbId.Equals(input.SuburbId)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.ProjectSlug == input.ProjectSlug ||
                    (this.ProjectSlug != null &&
                    this.ProjectSlug.Equals(input.ProjectSlug))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PromoLevel.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.BannerUrl != null)
                    hashCode = hashCode * 59 + this.BannerUrl.GetHashCode();
                if (this.PreferredColorHex != null)
                    hashCode = hashCode * 59 + this.PreferredColorHex.GetHashCode();
                if (this.LogoUrl != null)
                    hashCode = hashCode * 59 + this.LogoUrl.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.DisplayableAddress != null)
                    hashCode = hashCode * 59 + this.DisplayableAddress.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                hashCode = hashCode * 59 + this.SuburbId.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.ProjectSlug != null)
                    hashCode = hashCode * 59 + this.ProjectSlug.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
