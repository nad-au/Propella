/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.DomainSearchContractsV2PropertyDetails")]
    public partial class DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails : IEquatable<DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ACT for value: ACT
            /// </summary>
            [EnumMember(Value = "ACT")]
            ACT = 1,

            /// <summary>
            /// Enum NSW for value: NSW
            /// </summary>
            [EnumMember(Value = "NSW")]
            NSW = 2,

            /// <summary>
            /// Enum QLD for value: QLD
            /// </summary>
            [EnumMember(Value = "QLD")]
            QLD = 3,

            /// <summary>
            /// Enum VIC for value: VIC
            /// </summary>
            [EnumMember(Value = "VIC")]
            VIC = 4,

            /// <summary>
            /// Enum SA for value: SA
            /// </summary>
            [EnumMember(Value = "SA")]
            SA = 5,

            /// <summary>
            /// Enum WA for value: WA
            /// </summary>
            [EnumMember(Value = "WA")]
            WA = 6,

            /// <summary>
            /// Enum NT for value: NT
            /// </summary>
            [EnumMember(Value = "NT")]
            NT = 7,

            /// <summary>
            /// Enum TAS for value: TAS
            /// </summary>
            [EnumMember(Value = "TAS")]
            TAS = 8

        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Defines Features
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeaturesEnum
        {
            /// <summary>
            /// Enum Unrecognised for value: Unrecognised
            /// </summary>
            [EnumMember(Value = "Unrecognised")]
            Unrecognised = 1,

            /// <summary>
            /// Enum AirConditioning for value: AirConditioning
            /// </summary>
            [EnumMember(Value = "AirConditioning")]
            AirConditioning = 2,

            /// <summary>
            /// Enum BuiltInWardrobes for value: BuiltInWardrobes
            /// </summary>
            [EnumMember(Value = "BuiltInWardrobes")]
            BuiltInWardrobes = 3,

            /// <summary>
            /// Enum CableOrSatellite for value: CableOrSatellite
            /// </summary>
            [EnumMember(Value = "CableOrSatellite")]
            CableOrSatellite = 4,

            /// <summary>
            /// Enum Ensuite for value: Ensuite
            /// </summary>
            [EnumMember(Value = "Ensuite")]
            Ensuite = 5,

            /// <summary>
            /// Enum Floorboards for value: Floorboards
            /// </summary>
            [EnumMember(Value = "Floorboards")]
            Floorboards = 6,

            /// <summary>
            /// Enum Gas for value: Gas
            /// </summary>
            [EnumMember(Value = "Gas")]
            Gas = 7,

            /// <summary>
            /// Enum InternalLaundry for value: InternalLaundry
            /// </summary>
            [EnumMember(Value = "InternalLaundry")]
            InternalLaundry = 8,

            /// <summary>
            /// Enum PetsAllowed for value: PetsAllowed
            /// </summary>
            [EnumMember(Value = "PetsAllowed")]
            PetsAllowed = 9,

            /// <summary>
            /// Enum SecureParking for value: SecureParking
            /// </summary>
            [EnumMember(Value = "SecureParking")]
            SecureParking = 10,

            /// <summary>
            /// Enum SwimmingPool for value: SwimmingPool
            /// </summary>
            [EnumMember(Value = "SwimmingPool")]
            SwimmingPool = 11,

            /// <summary>
            /// Enum Furnished for value: Furnished
            /// </summary>
            [EnumMember(Value = "Furnished")]
            Furnished = 12,

            /// <summary>
            /// Enum GroundFloor for value: GroundFloor
            /// </summary>
            [EnumMember(Value = "GroundFloor")]
            GroundFloor = 13,

            /// <summary>
            /// Enum WaterViews for value: WaterViews
            /// </summary>
            [EnumMember(Value = "WaterViews")]
            WaterViews = 14,

            /// <summary>
            /// Enum NorthFacing for value: NorthFacing
            /// </summary>
            [EnumMember(Value = "NorthFacing")]
            NorthFacing = 15,

            /// <summary>
            /// Enum CityViews for value: CityViews
            /// </summary>
            [EnumMember(Value = "CityViews")]
            CityViews = 16,

            /// <summary>
            /// Enum IndoorSpa for value: IndoorSpa
            /// </summary>
            [EnumMember(Value = "IndoorSpa")]
            IndoorSpa = 17,

            /// <summary>
            /// Enum Gym for value: Gym
            /// </summary>
            [EnumMember(Value = "Gym")]
            Gym = 18,

            /// <summary>
            /// Enum AlarmSystem for value: AlarmSystem
            /// </summary>
            [EnumMember(Value = "AlarmSystem")]
            AlarmSystem = 19,

            /// <summary>
            /// Enum Intercom for value: Intercom
            /// </summary>
            [EnumMember(Value = "Intercom")]
            Intercom = 20,

            /// <summary>
            /// Enum BroadbandInternetAccess for value: BroadbandInternetAccess
            /// </summary>
            [EnumMember(Value = "BroadbandInternetAccess")]
            BroadbandInternetAccess = 21,

            /// <summary>
            /// Enum Bath for value: Bath
            /// </summary>
            [EnumMember(Value = "Bath")]
            Bath = 22,

            /// <summary>
            /// Enum Fireplace for value: Fireplace
            /// </summary>
            [EnumMember(Value = "Fireplace")]
            Fireplace = 23,

            /// <summary>
            /// Enum SeparateDiningRoom for value: SeparateDiningRoom
            /// </summary>
            [EnumMember(Value = "SeparateDiningRoom")]
            SeparateDiningRoom = 24,

            /// <summary>
            /// Enum Heating for value: Heating
            /// </summary>
            [EnumMember(Value = "Heating")]
            Heating = 25,

            /// <summary>
            /// Enum Dishwasher for value: Dishwasher
            /// </summary>
            [EnumMember(Value = "Dishwasher")]
            Dishwasher = 26,

            /// <summary>
            /// Enum Study for value: Study
            /// </summary>
            [EnumMember(Value = "Study")]
            Study = 27,

            /// <summary>
            /// Enum TennisCourt for value: TennisCourt
            /// </summary>
            [EnumMember(Value = "TennisCourt")]
            TennisCourt = 28,

            /// <summary>
            /// Enum Shed for value: Shed
            /// </summary>
            [EnumMember(Value = "Shed")]
            Shed = 29,

            /// <summary>
            /// Enum FullyFenced for value: FullyFenced
            /// </summary>
            [EnumMember(Value = "FullyFenced")]
            FullyFenced = 30,

            /// <summary>
            /// Enum BalconyDeck for value: BalconyDeck
            /// </summary>
            [EnumMember(Value = "BalconyDeck")]
            BalconyDeck = 31,

            /// <summary>
            /// Enum GardenCourtyard for value: GardenCourtyard
            /// </summary>
            [EnumMember(Value = "GardenCourtyard")]
            GardenCourtyard = 32,

            /// <summary>
            /// Enum OutdoorSpa for value: OutdoorSpa
            /// </summary>
            [EnumMember(Value = "OutdoorSpa")]
            OutdoorSpa = 33,

            /// <summary>
            /// Enum DoubleGlazedWindows for value: DoubleGlazedWindows
            /// </summary>
            [EnumMember(Value = "DoubleGlazedWindows")]
            DoubleGlazedWindows = 34,

            /// <summary>
            /// Enum EnergyEfficientAppliances for value: EnergyEfficientAppliances
            /// </summary>
            [EnumMember(Value = "EnergyEfficientAppliances")]
            EnergyEfficientAppliances = 35,

            /// <summary>
            /// Enum WaterEfficientAppliances for value: WaterEfficientAppliances
            /// </summary>
            [EnumMember(Value = "WaterEfficientAppliances")]
            WaterEfficientAppliances = 36,

            /// <summary>
            /// Enum WallCeilingInsulation for value: WallCeilingInsulation
            /// </summary>
            [EnumMember(Value = "WallCeilingInsulation")]
            WallCeilingInsulation = 37,

            /// <summary>
            /// Enum RainwaterStorageTank for value: RainwaterStorageTank
            /// </summary>
            [EnumMember(Value = "RainwaterStorageTank")]
            RainwaterStorageTank = 38,

            /// <summary>
            /// Enum GreywaterSystem for value: GreywaterSystem
            /// </summary>
            [EnumMember(Value = "GreywaterSystem")]
            GreywaterSystem = 39,

            /// <summary>
            /// Enum WaterEfficientFixtures for value: WaterEfficientFixtures
            /// </summary>
            [EnumMember(Value = "WaterEfficientFixtures")]
            WaterEfficientFixtures = 40,

            /// <summary>
            /// Enum SolarHotWater for value: SolarHotWater
            /// </summary>
            [EnumMember(Value = "SolarHotWater")]
            SolarHotWater = 41,

            /// <summary>
            /// Enum SolarPanels for value: SolarPanels
            /// </summary>
            [EnumMember(Value = "SolarPanels")]
            SolarPanels = 42

        }


        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public List<FeaturesEnum> Features { get; set; }
        /// <summary>
        /// Defines PropertyType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropertyTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum AcreageSemiRural for value: AcreageSemiRural
            /// </summary>
            [EnumMember(Value = "AcreageSemiRural")]
            AcreageSemiRural = 2,

            /// <summary>
            /// Enum ApartmentUnitFlat for value: ApartmentUnitFlat
            /// </summary>
            [EnumMember(Value = "ApartmentUnitFlat")]
            ApartmentUnitFlat = 3,

            /// <summary>
            /// Enum Aquaculture for value: Aquaculture
            /// </summary>
            [EnumMember(Value = "Aquaculture")]
            Aquaculture = 4,

            /// <summary>
            /// Enum BlockOfUnits for value: BlockOfUnits
            /// </summary>
            [EnumMember(Value = "BlockOfUnits")]
            BlockOfUnits = 5,

            /// <summary>
            /// Enum CarSpace for value: CarSpace
            /// </summary>
            [EnumMember(Value = "CarSpace")]
            CarSpace = 6,

            /// <summary>
            /// Enum DairyFarming for value: DairyFarming
            /// </summary>
            [EnumMember(Value = "DairyFarming")]
            DairyFarming = 7,

            /// <summary>
            /// Enum DevelopmentSite for value: DevelopmentSite
            /// </summary>
            [EnumMember(Value = "DevelopmentSite")]
            DevelopmentSite = 8,

            /// <summary>
            /// Enum Duplex for value: Duplex
            /// </summary>
            [EnumMember(Value = "Duplex")]
            Duplex = 9,

            /// <summary>
            /// Enum Farm for value: Farm
            /// </summary>
            [EnumMember(Value = "Farm")]
            Farm = 10,

            /// <summary>
            /// Enum FishingForestry for value: FishingForestry
            /// </summary>
            [EnumMember(Value = "FishingForestry")]
            FishingForestry = 11,

            /// <summary>
            /// Enum NewHomeDesigns for value: NewHomeDesigns
            /// </summary>
            [EnumMember(Value = "NewHomeDesigns")]
            NewHomeDesigns = 12,

            /// <summary>
            /// Enum House for value: House
            /// </summary>
            [EnumMember(Value = "House")]
            House = 13,

            /// <summary>
            /// Enum NewHouseLand for value: NewHouseLand
            /// </summary>
            [EnumMember(Value = "NewHouseLand")]
            NewHouseLand = 14,

            /// <summary>
            /// Enum IrrigationServices for value: IrrigationServices
            /// </summary>
            [EnumMember(Value = "IrrigationServices")]
            IrrigationServices = 15,

            /// <summary>
            /// Enum NewLand for value: NewLand
            /// </summary>
            [EnumMember(Value = "NewLand")]
            NewLand = 16,

            /// <summary>
            /// Enum Livestock for value: Livestock
            /// </summary>
            [EnumMember(Value = "Livestock")]
            Livestock = 17,

            /// <summary>
            /// Enum NewApartments for value: NewApartments
            /// </summary>
            [EnumMember(Value = "NewApartments")]
            NewApartments = 18,

            /// <summary>
            /// Enum Penthouse for value: Penthouse
            /// </summary>
            [EnumMember(Value = "Penthouse")]
            Penthouse = 19,

            /// <summary>
            /// Enum RetirementVillage for value: RetirementVillage
            /// </summary>
            [EnumMember(Value = "RetirementVillage")]
            RetirementVillage = 20,

            /// <summary>
            /// Enum Rural for value: Rural
            /// </summary>
            [EnumMember(Value = "Rural")]
            Rural = 21,

            /// <summary>
            /// Enum SemiDetached for value: SemiDetached
            /// </summary>
            [EnumMember(Value = "SemiDetached")]
            SemiDetached = 22,

            /// <summary>
            /// Enum SpecialistFarm for value: SpecialistFarm
            /// </summary>
            [EnumMember(Value = "SpecialistFarm")]
            SpecialistFarm = 23,

            /// <summary>
            /// Enum Studio for value: Studio
            /// </summary>
            [EnumMember(Value = "Studio")]
            Studio = 24,

            /// <summary>
            /// Enum Terrace for value: Terrace
            /// </summary>
            [EnumMember(Value = "Terrace")]
            Terrace = 25,

            /// <summary>
            /// Enum Townhouse for value: Townhouse
            /// </summary>
            [EnumMember(Value = "Townhouse")]
            Townhouse = 26,

            /// <summary>
            /// Enum VacantLand for value: VacantLand
            /// </summary>
            [EnumMember(Value = "VacantLand")]
            VacantLand = 27,

            /// <summary>
            /// Enum Villa for value: Villa
            /// </summary>
            [EnumMember(Value = "Villa")]
            Villa = 28,

            /// <summary>
            /// Enum Cropping for value: Cropping
            /// </summary>
            [EnumMember(Value = "Cropping")]
            Cropping = 29,

            /// <summary>
            /// Enum Viticulture for value: Viticulture
            /// </summary>
            [EnumMember(Value = "Viticulture")]
            Viticulture = 30,

            /// <summary>
            /// Enum MixedFarming for value: MixedFarming
            /// </summary>
            [EnumMember(Value = "MixedFarming")]
            MixedFarming = 31,

            /// <summary>
            /// Enum Grazing for value: Grazing
            /// </summary>
            [EnumMember(Value = "Grazing")]
            Grazing = 32,

            /// <summary>
            /// Enum Horticulture for value: Horticulture
            /// </summary>
            [EnumMember(Value = "Horticulture")]
            Horticulture = 33,

            /// <summary>
            /// Enum Equine for value: Equine
            /// </summary>
            [EnumMember(Value = "Equine")]
            Equine = 34,

            /// <summary>
            /// Enum Farmlet for value: Farmlet
            /// </summary>
            [EnumMember(Value = "Farmlet")]
            Farmlet = 35,

            /// <summary>
            /// Enum Orchard for value: Orchard
            /// </summary>
            [EnumMember(Value = "Orchard")]
            Orchard = 36,

            /// <summary>
            /// Enum RuralLifestyle for value: RuralLifestyle
            /// </summary>
            [EnumMember(Value = "RuralLifestyle")]
            RuralLifestyle = 37

        }

        /// <summary>
        /// Gets or Sets PropertyType
        /// </summary>
        [DataMember(Name = "propertyType", EmitDefaultValue = false)]
        public PropertyTypeEnum? PropertyType { get; set; }
        /// <summary>
        /// Defines AllPropertyTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllPropertyTypesEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum AcreageSemiRural for value: AcreageSemiRural
            /// </summary>
            [EnumMember(Value = "AcreageSemiRural")]
            AcreageSemiRural = 2,

            /// <summary>
            /// Enum ApartmentUnitFlat for value: ApartmentUnitFlat
            /// </summary>
            [EnumMember(Value = "ApartmentUnitFlat")]
            ApartmentUnitFlat = 3,

            /// <summary>
            /// Enum Aquaculture for value: Aquaculture
            /// </summary>
            [EnumMember(Value = "Aquaculture")]
            Aquaculture = 4,

            /// <summary>
            /// Enum BlockOfUnits for value: BlockOfUnits
            /// </summary>
            [EnumMember(Value = "BlockOfUnits")]
            BlockOfUnits = 5,

            /// <summary>
            /// Enum CarSpace for value: CarSpace
            /// </summary>
            [EnumMember(Value = "CarSpace")]
            CarSpace = 6,

            /// <summary>
            /// Enum DairyFarming for value: DairyFarming
            /// </summary>
            [EnumMember(Value = "DairyFarming")]
            DairyFarming = 7,

            /// <summary>
            /// Enum DevelopmentSite for value: DevelopmentSite
            /// </summary>
            [EnumMember(Value = "DevelopmentSite")]
            DevelopmentSite = 8,

            /// <summary>
            /// Enum Duplex for value: Duplex
            /// </summary>
            [EnumMember(Value = "Duplex")]
            Duplex = 9,

            /// <summary>
            /// Enum Farm for value: Farm
            /// </summary>
            [EnumMember(Value = "Farm")]
            Farm = 10,

            /// <summary>
            /// Enum FishingForestry for value: FishingForestry
            /// </summary>
            [EnumMember(Value = "FishingForestry")]
            FishingForestry = 11,

            /// <summary>
            /// Enum NewHomeDesigns for value: NewHomeDesigns
            /// </summary>
            [EnumMember(Value = "NewHomeDesigns")]
            NewHomeDesigns = 12,

            /// <summary>
            /// Enum House for value: House
            /// </summary>
            [EnumMember(Value = "House")]
            House = 13,

            /// <summary>
            /// Enum NewHouseLand for value: NewHouseLand
            /// </summary>
            [EnumMember(Value = "NewHouseLand")]
            NewHouseLand = 14,

            /// <summary>
            /// Enum IrrigationServices for value: IrrigationServices
            /// </summary>
            [EnumMember(Value = "IrrigationServices")]
            IrrigationServices = 15,

            /// <summary>
            /// Enum NewLand for value: NewLand
            /// </summary>
            [EnumMember(Value = "NewLand")]
            NewLand = 16,

            /// <summary>
            /// Enum Livestock for value: Livestock
            /// </summary>
            [EnumMember(Value = "Livestock")]
            Livestock = 17,

            /// <summary>
            /// Enum NewApartments for value: NewApartments
            /// </summary>
            [EnumMember(Value = "NewApartments")]
            NewApartments = 18,

            /// <summary>
            /// Enum Penthouse for value: Penthouse
            /// </summary>
            [EnumMember(Value = "Penthouse")]
            Penthouse = 19,

            /// <summary>
            /// Enum RetirementVillage for value: RetirementVillage
            /// </summary>
            [EnumMember(Value = "RetirementVillage")]
            RetirementVillage = 20,

            /// <summary>
            /// Enum Rural for value: Rural
            /// </summary>
            [EnumMember(Value = "Rural")]
            Rural = 21,

            /// <summary>
            /// Enum SemiDetached for value: SemiDetached
            /// </summary>
            [EnumMember(Value = "SemiDetached")]
            SemiDetached = 22,

            /// <summary>
            /// Enum SpecialistFarm for value: SpecialistFarm
            /// </summary>
            [EnumMember(Value = "SpecialistFarm")]
            SpecialistFarm = 23,

            /// <summary>
            /// Enum Studio for value: Studio
            /// </summary>
            [EnumMember(Value = "Studio")]
            Studio = 24,

            /// <summary>
            /// Enum Terrace for value: Terrace
            /// </summary>
            [EnumMember(Value = "Terrace")]
            Terrace = 25,

            /// <summary>
            /// Enum Townhouse for value: Townhouse
            /// </summary>
            [EnumMember(Value = "Townhouse")]
            Townhouse = 26,

            /// <summary>
            /// Enum VacantLand for value: VacantLand
            /// </summary>
            [EnumMember(Value = "VacantLand")]
            VacantLand = 27,

            /// <summary>
            /// Enum Villa for value: Villa
            /// </summary>
            [EnumMember(Value = "Villa")]
            Villa = 28,

            /// <summary>
            /// Enum Cropping for value: Cropping
            /// </summary>
            [EnumMember(Value = "Cropping")]
            Cropping = 29,

            /// <summary>
            /// Enum Viticulture for value: Viticulture
            /// </summary>
            [EnumMember(Value = "Viticulture")]
            Viticulture = 30,

            /// <summary>
            /// Enum MixedFarming for value: MixedFarming
            /// </summary>
            [EnumMember(Value = "MixedFarming")]
            MixedFarming = 31,

            /// <summary>
            /// Enum Grazing for value: Grazing
            /// </summary>
            [EnumMember(Value = "Grazing")]
            Grazing = 32,

            /// <summary>
            /// Enum Horticulture for value: Horticulture
            /// </summary>
            [EnumMember(Value = "Horticulture")]
            Horticulture = 33,

            /// <summary>
            /// Enum Equine for value: Equine
            /// </summary>
            [EnumMember(Value = "Equine")]
            Equine = 34,

            /// <summary>
            /// Enum Farmlet for value: Farmlet
            /// </summary>
            [EnumMember(Value = "Farmlet")]
            Farmlet = 35,

            /// <summary>
            /// Enum Orchard for value: Orchard
            /// </summary>
            [EnumMember(Value = "Orchard")]
            Orchard = 36,

            /// <summary>
            /// Enum RuralLifestyle for value: RuralLifestyle
            /// </summary>
            [EnumMember(Value = "RuralLifestyle")]
            RuralLifestyle = 37

        }


        /// <summary>
        /// Gets or Sets AllPropertyTypes
        /// </summary>
        [DataMember(Name = "allPropertyTypes", EmitDefaultValue = false)]
        public List<AllPropertyTypesEnum> AllPropertyTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails" /> class.
        /// </summary>
        /// <param name="state">state.</param>
        /// <param name="features">features.</param>
        /// <param name="propertyType">propertyType.</param>
        /// <param name="allPropertyTypes">allPropertyTypes.</param>
        /// <param name="bathrooms">bathrooms.</param>
        /// <param name="bedrooms">bedrooms.</param>
        /// <param name="carspaces">carspaces.</param>
        /// <param name="unitNumber">unitNumber.</param>
        /// <param name="streetNumber">streetNumber.</param>
        /// <param name="street">street.</param>
        /// <param name="area">area.</param>
        /// <param name="region">region.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="suburbId">suburbId.</param>
        /// <param name="postcode">postcode.</param>
        /// <param name="displayableAddress">displayableAddress.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="mapCertainty">mapCertainty.</param>
        /// <param name="landArea">landArea.</param>
        /// <param name="buildingArea">buildingArea.</param>
        /// <param name="onlyShowProperties">onlyShowProperties.</param>
        /// <param name="displayAddressType">displayAddressType.</param>
        /// <param name="isRural">isRural.</param>
        /// <param name="topSpotKeywords">topSpotKeywords.</param>
        /// <param name="isNew">isNew.</param>
        /// <param name="tags">tags.</param>
        public DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails(StateEnum? state = default(StateEnum?), List<FeaturesEnum> features = default(List<FeaturesEnum>), PropertyTypeEnum? propertyType = default(PropertyTypeEnum?), List<AllPropertyTypesEnum> allPropertyTypes = default(List<AllPropertyTypesEnum>), float bathrooms = default(float), float bedrooms = default(float), int carspaces = default(int), string unitNumber = default(string), string streetNumber = default(string), string street = default(string), string area = default(string), string region = default(string), string suburb = default(string), int suburbId = default(int), string postcode = default(string), string displayableAddress = default(string), float latitude = default(float), float longitude = default(float), int mapCertainty = default(int), double landArea = default(double), double buildingArea = default(double), List<string> onlyShowProperties = default(List<string>), string displayAddressType = default(string), bool isRural = default(bool), List<string> topSpotKeywords = default(List<string>), bool isNew = default(bool), List<string> tags = default(List<string>))
        {
            this.State = state;
            this.Features = features;
            this.PropertyType = propertyType;
            this.AllPropertyTypes = allPropertyTypes;
            this.Bathrooms = bathrooms;
            this.Bedrooms = bedrooms;
            this.Carspaces = carspaces;
            this.UnitNumber = unitNumber;
            this.StreetNumber = streetNumber;
            this.Street = street;
            this.Area = area;
            this.Region = region;
            this.Suburb = suburb;
            this.SuburbId = suburbId;
            this.Postcode = postcode;
            this.DisplayableAddress = displayableAddress;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.MapCertainty = mapCertainty;
            this.LandArea = landArea;
            this.BuildingArea = buildingArea;
            this.OnlyShowProperties = onlyShowProperties;
            this.DisplayAddressType = displayAddressType;
            this.IsRural = isRural;
            this.TopSpotKeywords = topSpotKeywords;
            this.IsNew = isNew;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets or Sets Bathrooms
        /// </summary>
        [DataMember(Name = "bathrooms", EmitDefaultValue = false)]
        public float Bathrooms { get; set; }

        /// <summary>
        /// Gets or Sets Bedrooms
        /// </summary>
        [DataMember(Name = "bedrooms", EmitDefaultValue = false)]
        public float Bedrooms { get; set; }

        /// <summary>
        /// Gets or Sets Carspaces
        /// </summary>
        [DataMember(Name = "carspaces", EmitDefaultValue = false)]
        public int Carspaces { get; set; }

        /// <summary>
        /// Gets or Sets UnitNumber
        /// </summary>
        [DataMember(Name = "unitNumber", EmitDefaultValue = false)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// Gets or Sets StreetNumber
        /// </summary>
        [DataMember(Name = "streetNumber", EmitDefaultValue = false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name = "suburb", EmitDefaultValue = false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets SuburbId
        /// </summary>
        [DataMember(Name = "suburbId", EmitDefaultValue = false)]
        public int SuburbId { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "postcode", EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets DisplayableAddress
        /// </summary>
        [DataMember(Name = "displayableAddress", EmitDefaultValue = false)]
        public string DisplayableAddress { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public float Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public float Longitude { get; set; }

        /// <summary>
        /// Gets or Sets MapCertainty
        /// </summary>
        [DataMember(Name = "mapCertainty", EmitDefaultValue = false)]
        public int MapCertainty { get; set; }

        /// <summary>
        /// Gets or Sets LandArea
        /// </summary>
        [DataMember(Name = "landArea", EmitDefaultValue = false)]
        public double LandArea { get; set; }

        /// <summary>
        /// Gets or Sets BuildingArea
        /// </summary>
        [DataMember(Name = "buildingArea", EmitDefaultValue = false)]
        public double BuildingArea { get; set; }

        /// <summary>
        /// Gets or Sets OnlyShowProperties
        /// </summary>
        [DataMember(Name = "onlyShowProperties", EmitDefaultValue = false)]
        public List<string> OnlyShowProperties { get; set; }

        /// <summary>
        /// Gets or Sets DisplayAddressType
        /// </summary>
        [DataMember(Name = "displayAddressType", EmitDefaultValue = false)]
        public string DisplayAddressType { get; set; }

        /// <summary>
        /// Gets or Sets IsRural
        /// </summary>
        [DataMember(Name = "isRural", EmitDefaultValue = false)]
        public bool IsRural { get; set; }

        /// <summary>
        /// Gets or Sets TopSpotKeywords
        /// </summary>
        [DataMember(Name = "topSpotKeywords", EmitDefaultValue = false)]
        public List<string> TopSpotKeywords { get; set; }

        /// <summary>
        /// Gets or Sets IsNew
        /// </summary>
        [DataMember(Name = "isNew", EmitDefaultValue = false)]
        public bool IsNew { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  AllPropertyTypes: ").Append(AllPropertyTypes).Append("\n");
            sb.Append("  Bathrooms: ").Append(Bathrooms).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  Carspaces: ").Append(Carspaces).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  SuburbId: ").Append(SuburbId).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  DisplayableAddress: ").Append(DisplayableAddress).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  MapCertainty: ").Append(MapCertainty).Append("\n");
            sb.Append("  LandArea: ").Append(LandArea).Append("\n");
            sb.Append("  BuildingArea: ").Append(BuildingArea).Append("\n");
            sb.Append("  OnlyShowProperties: ").Append(OnlyShowProperties).Append("\n");
            sb.Append("  DisplayAddressType: ").Append(DisplayAddressType).Append("\n");
            sb.Append("  IsRural: ").Append(IsRural).Append("\n");
            sb.Append("  TopSpotKeywords: ").Append(TopSpotKeywords).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    this.PropertyType.Equals(input.PropertyType)
                ) && 
                (
                    this.AllPropertyTypes == input.AllPropertyTypes ||
                    this.AllPropertyTypes.SequenceEqual(input.AllPropertyTypes)
                ) && 
                (
                    this.Bathrooms == input.Bathrooms ||
                    this.Bathrooms.Equals(input.Bathrooms)
                ) && 
                (
                    this.Bedrooms == input.Bedrooms ||
                    this.Bedrooms.Equals(input.Bedrooms)
                ) && 
                (
                    this.Carspaces == input.Carspaces ||
                    this.Carspaces.Equals(input.Carspaces)
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.SuburbId == input.SuburbId ||
                    this.SuburbId.Equals(input.SuburbId)
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.DisplayableAddress == input.DisplayableAddress ||
                    (this.DisplayableAddress != null &&
                    this.DisplayableAddress.Equals(input.DisplayableAddress))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.MapCertainty == input.MapCertainty ||
                    this.MapCertainty.Equals(input.MapCertainty)
                ) && 
                (
                    this.LandArea == input.LandArea ||
                    this.LandArea.Equals(input.LandArea)
                ) && 
                (
                    this.BuildingArea == input.BuildingArea ||
                    this.BuildingArea.Equals(input.BuildingArea)
                ) && 
                (
                    this.OnlyShowProperties == input.OnlyShowProperties ||
                    this.OnlyShowProperties != null &&
                    input.OnlyShowProperties != null &&
                    this.OnlyShowProperties.SequenceEqual(input.OnlyShowProperties)
                ) && 
                (
                    this.DisplayAddressType == input.DisplayAddressType ||
                    (this.DisplayAddressType != null &&
                    this.DisplayAddressType.Equals(input.DisplayAddressType))
                ) && 
                (
                    this.IsRural == input.IsRural ||
                    this.IsRural.Equals(input.IsRural)
                ) && 
                (
                    this.TopSpotKeywords == input.TopSpotKeywords ||
                    this.TopSpotKeywords != null &&
                    input.TopSpotKeywords != null &&
                    this.TopSpotKeywords.SequenceEqual(input.TopSpotKeywords)
                ) && 
                (
                    this.IsNew == input.IsNew ||
                    this.IsNew.Equals(input.IsNew)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.Features.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                hashCode = hashCode * 59 + this.AllPropertyTypes.GetHashCode();
                hashCode = hashCode * 59 + this.Bathrooms.GetHashCode();
                hashCode = hashCode * 59 + this.Bedrooms.GetHashCode();
                hashCode = hashCode * 59 + this.Carspaces.GetHashCode();
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                hashCode = hashCode * 59 + this.SuburbId.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.DisplayableAddress != null)
                    hashCode = hashCode * 59 + this.DisplayableAddress.GetHashCode();
                hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                hashCode = hashCode * 59 + this.MapCertainty.GetHashCode();
                hashCode = hashCode * 59 + this.LandArea.GetHashCode();
                hashCode = hashCode * 59 + this.BuildingArea.GetHashCode();
                if (this.OnlyShowProperties != null)
                    hashCode = hashCode * 59 + this.OnlyShowProperties.GetHashCode();
                if (this.DisplayAddressType != null)
                    hashCode = hashCode * 59 + this.DisplayAddressType.GetHashCode();
                hashCode = hashCode * 59 + this.IsRural.GetHashCode();
                if (this.TopSpotKeywords != null)
                    hashCode = hashCode * 59 + this.TopSpotKeywords.GetHashCode();
                hashCode = hashCode * 59 + this.IsNew.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
