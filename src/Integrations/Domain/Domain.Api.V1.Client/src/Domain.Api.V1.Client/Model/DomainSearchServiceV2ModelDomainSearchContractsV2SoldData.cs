/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelDomainSearchContractsV2SoldData
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.DomainSearchContractsV2SoldData")]
    public partial class DomainSearchServiceV2ModelDomainSearchContractsV2SoldData : IEquatable<DomainSearchServiceV2ModelDomainSearchContractsV2SoldData>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Agency for value: Agency
            /// </summary>
            [EnumMember(Value = "Agency")]
            Agency = 1,

            /// <summary>
            /// Enum Apm for value: Apm
            /// </summary>
            [EnumMember(Value = "Apm")]
            Apm = 2

        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Defines SaleMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SaleMethodEnum
        {
            /// <summary>
            /// Enum NotStated for value: NotStated
            /// </summary>
            [EnumMember(Value = "NotStated")]
            NotStated = 1,

            /// <summary>
            /// Enum SoldByAuction for value: SoldByAuction
            /// </summary>
            [EnumMember(Value = "SoldByAuction")]
            SoldByAuction = 2,

            /// <summary>
            /// Enum SoldByPrivateTreaty for value: SoldByPrivateTreaty
            /// </summary>
            [EnumMember(Value = "SoldByPrivateTreaty")]
            SoldByPrivateTreaty = 3,

            /// <summary>
            /// Enum Withdrawn for value: Withdrawn
            /// </summary>
            [EnumMember(Value = "Withdrawn")]
            Withdrawn = 4,

            /// <summary>
            /// Enum SoldPriorToAuction for value: SoldPriorToAuction
            /// </summary>
            [EnumMember(Value = "SoldPriorToAuction")]
            SoldPriorToAuction = 5

        }

        /// <summary>
        /// Gets or Sets SaleMethod
        /// </summary>
        [DataMember(Name = "saleMethod", EmitDefaultValue = false)]
        public SaleMethodEnum? SaleMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelDomainSearchContractsV2SoldData" /> class.
        /// </summary>
        /// <param name="source">source.</param>
        /// <param name="saleMethod">saleMethod.</param>
        /// <param name="soldDate">soldDate.</param>
        /// <param name="soldPrice">soldPrice.</param>
        public DomainSearchServiceV2ModelDomainSearchContractsV2SoldData(SourceEnum? source = default(SourceEnum?), SaleMethodEnum? saleMethod = default(SaleMethodEnum?), DateTime soldDate = default(DateTime), int soldPrice = default(int))
        {
            this.Source = source;
            this.SaleMethod = saleMethod;
            this.SoldDate = soldDate;
            this.SoldPrice = soldPrice;
        }

        /// <summary>
        /// Gets or Sets SoldDate
        /// </summary>
        [DataMember(Name = "soldDate", EmitDefaultValue = false)]
        public DateTime SoldDate { get; set; }

        /// <summary>
        /// Gets or Sets SoldPrice
        /// </summary>
        [DataMember(Name = "soldPrice", EmitDefaultValue = false)]
        public int SoldPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelDomainSearchContractsV2SoldData {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SaleMethod: ").Append(SaleMethod).Append("\n");
            sb.Append("  SoldDate: ").Append(SoldDate).Append("\n");
            sb.Append("  SoldPrice: ").Append(SoldPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelDomainSearchContractsV2SoldData);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelDomainSearchContractsV2SoldData instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelDomainSearchContractsV2SoldData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelDomainSearchContractsV2SoldData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.SaleMethod == input.SaleMethod ||
                    this.SaleMethod.Equals(input.SaleMethod)
                ) && 
                (
                    this.SoldDate == input.SoldDate ||
                    (this.SoldDate != null &&
                    this.SoldDate.Equals(input.SoldDate))
                ) && 
                (
                    this.SoldPrice == input.SoldPrice ||
                    this.SoldPrice.Equals(input.SoldPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.SaleMethod.GetHashCode();
                if (this.SoldDate != null)
                    hashCode = hashCode * 59 + this.SoldDate.GetHashCode();
                hashCode = hashCode * 59 + this.SoldPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
