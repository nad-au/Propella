/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.DomainSearchWebApiV2ModelsSearchLocation")]
    public partial class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation : IEquatable<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ACT for value: ACT
            /// </summary>
            [EnumMember(Value = "ACT")]
            ACT = 1,

            /// <summary>
            /// Enum NSW for value: NSW
            /// </summary>
            [EnumMember(Value = "NSW")]
            NSW = 2,

            /// <summary>
            /// Enum QLD for value: QLD
            /// </summary>
            [EnumMember(Value = "QLD")]
            QLD = 3,

            /// <summary>
            /// Enum VIC for value: VIC
            /// </summary>
            [EnumMember(Value = "VIC")]
            VIC = 4,

            /// <summary>
            /// Enum SA for value: SA
            /// </summary>
            [EnumMember(Value = "SA")]
            SA = 5,

            /// <summary>
            /// Enum WA for value: WA
            /// </summary>
            [EnumMember(Value = "WA")]
            WA = 6,

            /// <summary>
            /// Enum NT for value: NT
            /// </summary>
            [EnumMember(Value = "NT")]
            NT = 7,

            /// <summary>
            /// Enum TAS for value: TAS
            /// </summary>
            [EnumMember(Value = "TAS")]
            TAS = 8

        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation" /> class.
        /// </summary>
        /// <param name="state">state.</param>
        /// <param name="region">region.</param>
        /// <param name="area">area.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="includeSurroundingSuburbs">includeSurroundingSuburbs.</param>
        /// <param name="surroundingRadiusInMeters">surroundingRadiusInMeters.</param>
        public DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation(StateEnum? state = default(StateEnum?), string region = default(string), string area = default(string), string suburb = default(string), string postCode = default(string), bool includeSurroundingSuburbs = default(bool), int surroundingRadiusInMeters = default(int))
        {
            this.State = state;
            this.Region = region;
            this.Area = area;
            this.Suburb = suburb;
            this.PostCode = postCode;
            this.IncludeSurroundingSuburbs = includeSurroundingSuburbs;
            this.SurroundingRadiusInMeters = surroundingRadiusInMeters;
        }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name = "suburb", EmitDefaultValue = false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name = "postCode", EmitDefaultValue = false)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSurroundingSuburbs
        /// </summary>
        [DataMember(Name = "includeSurroundingSuburbs", EmitDefaultValue = false)]
        public bool IncludeSurroundingSuburbs { get; set; }

        /// <summary>
        /// Gets or Sets SurroundingRadiusInMeters
        /// </summary>
        [DataMember(Name = "surroundingRadiusInMeters", EmitDefaultValue = false)]
        public int SurroundingRadiusInMeters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  IncludeSurroundingSuburbs: ").Append(IncludeSurroundingSuburbs).Append("\n");
            sb.Append("  SurroundingRadiusInMeters: ").Append(SurroundingRadiusInMeters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.IncludeSurroundingSuburbs == input.IncludeSurroundingSuburbs ||
                    this.IncludeSurroundingSuburbs.Equals(input.IncludeSurroundingSuburbs)
                ) && 
                (
                    this.SurroundingRadiusInMeters == input.SurroundingRadiusInMeters ||
                    this.SurroundingRadiusInMeters.Equals(input.SurroundingRadiusInMeters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeSurroundingSuburbs.GetHashCode();
                hashCode = hashCode * 59 + this.SurroundingRadiusInMeters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
