/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.DomainSearchWebApiV2ModelsSearchParameters")]
    public partial class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters : IEquatable<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters>, IValidatableObject
    {
        /// <summary>
        /// Defines ListingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListingTypeEnum
        {
            /// <summary>
            /// Enum Sale for value: Sale
            /// </summary>
            [EnumMember(Value = "Sale")]
            Sale = 1,

            /// <summary>
            /// Enum Rent for value: Rent
            /// </summary>
            [EnumMember(Value = "Rent")]
            Rent = 2,

            /// <summary>
            /// Enum Share for value: Share
            /// </summary>
            [EnumMember(Value = "Share")]
            Share = 3,

            /// <summary>
            /// Enum Sold for value: Sold
            /// </summary>
            [EnumMember(Value = "Sold")]
            Sold = 4,

            /// <summary>
            /// Enum NewHomes for value: NewHomes
            /// </summary>
            [EnumMember(Value = "NewHomes")]
            NewHomes = 5

        }

        /// <summary>
        /// Gets or Sets ListingType
        /// </summary>
        [DataMember(Name = "listingType", EmitDefaultValue = false)]
        public ListingTypeEnum? ListingType { get; set; }
        /// <summary>
        /// Defines PropertyTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropertyTypesEnum
        {
            /// <summary>
            /// Enum AcreageSemiRural for value: AcreageSemiRural
            /// </summary>
            [EnumMember(Value = "AcreageSemiRural")]
            AcreageSemiRural = 1,

            /// <summary>
            /// Enum ApartmentUnitFlat for value: ApartmentUnitFlat
            /// </summary>
            [EnumMember(Value = "ApartmentUnitFlat")]
            ApartmentUnitFlat = 2,

            /// <summary>
            /// Enum Aquaculture for value: Aquaculture
            /// </summary>
            [EnumMember(Value = "Aquaculture")]
            Aquaculture = 3,

            /// <summary>
            /// Enum BlockOfUnits for value: BlockOfUnits
            /// </summary>
            [EnumMember(Value = "BlockOfUnits")]
            BlockOfUnits = 4,

            /// <summary>
            /// Enum CarSpace for value: CarSpace
            /// </summary>
            [EnumMember(Value = "CarSpace")]
            CarSpace = 5,

            /// <summary>
            /// Enum DairyFarming for value: DairyFarming
            /// </summary>
            [EnumMember(Value = "DairyFarming")]
            DairyFarming = 6,

            /// <summary>
            /// Enum DevelopmentSite for value: DevelopmentSite
            /// </summary>
            [EnumMember(Value = "DevelopmentSite")]
            DevelopmentSite = 7,

            /// <summary>
            /// Enum Duplex for value: Duplex
            /// </summary>
            [EnumMember(Value = "Duplex")]
            Duplex = 8,

            /// <summary>
            /// Enum Farm for value: Farm
            /// </summary>
            [EnumMember(Value = "Farm")]
            Farm = 9,

            /// <summary>
            /// Enum FishingForestry for value: FishingForestry
            /// </summary>
            [EnumMember(Value = "FishingForestry")]
            FishingForestry = 10,

            /// <summary>
            /// Enum NewHomeDesigns for value: NewHomeDesigns
            /// </summary>
            [EnumMember(Value = "NewHomeDesigns")]
            NewHomeDesigns = 11,

            /// <summary>
            /// Enum House for value: House
            /// </summary>
            [EnumMember(Value = "House")]
            House = 12,

            /// <summary>
            /// Enum NewHouseLand for value: NewHouseLand
            /// </summary>
            [EnumMember(Value = "NewHouseLand")]
            NewHouseLand = 13,

            /// <summary>
            /// Enum IrrigationServices for value: IrrigationServices
            /// </summary>
            [EnumMember(Value = "IrrigationServices")]
            IrrigationServices = 14,

            /// <summary>
            /// Enum NewLand for value: NewLand
            /// </summary>
            [EnumMember(Value = "NewLand")]
            NewLand = 15,

            /// <summary>
            /// Enum Livestock for value: Livestock
            /// </summary>
            [EnumMember(Value = "Livestock")]
            Livestock = 16,

            /// <summary>
            /// Enum NewApartments for value: NewApartments
            /// </summary>
            [EnumMember(Value = "NewApartments")]
            NewApartments = 17,

            /// <summary>
            /// Enum Penthouse for value: Penthouse
            /// </summary>
            [EnumMember(Value = "Penthouse")]
            Penthouse = 18,

            /// <summary>
            /// Enum RetirementVillage for value: RetirementVillage
            /// </summary>
            [EnumMember(Value = "RetirementVillage")]
            RetirementVillage = 19,

            /// <summary>
            /// Enum Rural for value: Rural
            /// </summary>
            [EnumMember(Value = "Rural")]
            Rural = 20,

            /// <summary>
            /// Enum SemiDetached for value: SemiDetached
            /// </summary>
            [EnumMember(Value = "SemiDetached")]
            SemiDetached = 21,

            /// <summary>
            /// Enum SpecialistFarm for value: SpecialistFarm
            /// </summary>
            [EnumMember(Value = "SpecialistFarm")]
            SpecialistFarm = 22,

            /// <summary>
            /// Enum Studio for value: Studio
            /// </summary>
            [EnumMember(Value = "Studio")]
            Studio = 23,

            /// <summary>
            /// Enum Terrace for value: Terrace
            /// </summary>
            [EnumMember(Value = "Terrace")]
            Terrace = 24,

            /// <summary>
            /// Enum Townhouse for value: Townhouse
            /// </summary>
            [EnumMember(Value = "Townhouse")]
            Townhouse = 25,

            /// <summary>
            /// Enum VacantLand for value: VacantLand
            /// </summary>
            [EnumMember(Value = "VacantLand")]
            VacantLand = 26,

            /// <summary>
            /// Enum Villa for value: Villa
            /// </summary>
            [EnumMember(Value = "Villa")]
            Villa = 27,

            /// <summary>
            /// Enum Cropping for value: Cropping
            /// </summary>
            [EnumMember(Value = "Cropping")]
            Cropping = 28,

            /// <summary>
            /// Enum Viticulture for value: Viticulture
            /// </summary>
            [EnumMember(Value = "Viticulture")]
            Viticulture = 29,

            /// <summary>
            /// Enum MixedFarming for value: MixedFarming
            /// </summary>
            [EnumMember(Value = "MixedFarming")]
            MixedFarming = 30,

            /// <summary>
            /// Enum Grazing for value: Grazing
            /// </summary>
            [EnumMember(Value = "Grazing")]
            Grazing = 31,

            /// <summary>
            /// Enum Horticulture for value: Horticulture
            /// </summary>
            [EnumMember(Value = "Horticulture")]
            Horticulture = 32,

            /// <summary>
            /// Enum Equine for value: Equine
            /// </summary>
            [EnumMember(Value = "Equine")]
            Equine = 33,

            /// <summary>
            /// Enum Farmlet for value: Farmlet
            /// </summary>
            [EnumMember(Value = "Farmlet")]
            Farmlet = 34,

            /// <summary>
            /// Enum Orchard for value: Orchard
            /// </summary>
            [EnumMember(Value = "Orchard")]
            Orchard = 35,

            /// <summary>
            /// Enum RuralLifestyle for value: RuralLifestyle
            /// </summary>
            [EnumMember(Value = "RuralLifestyle")]
            RuralLifestyle = 36

        }


        /// <summary>
        /// Gets or Sets PropertyTypes
        /// </summary>
        [DataMember(Name = "propertyTypes", EmitDefaultValue = false)]
        public List<PropertyTypesEnum> PropertyTypes { get; set; }
        /// <summary>
        /// Defines PropertyFeatures
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropertyFeaturesEnum
        {
            /// <summary>
            /// Enum AirConditioning for value: AirConditioning
            /// </summary>
            [EnumMember(Value = "AirConditioning")]
            AirConditioning = 1,

            /// <summary>
            /// Enum BuiltInWardrobes for value: BuiltInWardrobes
            /// </summary>
            [EnumMember(Value = "BuiltInWardrobes")]
            BuiltInWardrobes = 2,

            /// <summary>
            /// Enum CableOrSatellite for value: CableOrSatellite
            /// </summary>
            [EnumMember(Value = "CableOrSatellite")]
            CableOrSatellite = 3,

            /// <summary>
            /// Enum Ensuite for value: Ensuite
            /// </summary>
            [EnumMember(Value = "Ensuite")]
            Ensuite = 4,

            /// <summary>
            /// Enum Floorboards for value: Floorboards
            /// </summary>
            [EnumMember(Value = "Floorboards")]
            Floorboards = 5,

            /// <summary>
            /// Enum Gas for value: Gas
            /// </summary>
            [EnumMember(Value = "Gas")]
            Gas = 6,

            /// <summary>
            /// Enum InternalLaundry for value: InternalLaundry
            /// </summary>
            [EnumMember(Value = "InternalLaundry")]
            InternalLaundry = 7,

            /// <summary>
            /// Enum PetsAllowed for value: PetsAllowed
            /// </summary>
            [EnumMember(Value = "PetsAllowed")]
            PetsAllowed = 8,

            /// <summary>
            /// Enum SecureParking for value: SecureParking
            /// </summary>
            [EnumMember(Value = "SecureParking")]
            SecureParking = 9,

            /// <summary>
            /// Enum SwimmingPool for value: SwimmingPool
            /// </summary>
            [EnumMember(Value = "SwimmingPool")]
            SwimmingPool = 10,

            /// <summary>
            /// Enum Furnished for value: Furnished
            /// </summary>
            [EnumMember(Value = "Furnished")]
            Furnished = 11,

            /// <summary>
            /// Enum GroundFloor for value: GroundFloor
            /// </summary>
            [EnumMember(Value = "GroundFloor")]
            GroundFloor = 12,

            /// <summary>
            /// Enum WaterViews for value: WaterViews
            /// </summary>
            [EnumMember(Value = "WaterViews")]
            WaterViews = 13,

            /// <summary>
            /// Enum NorthFacing for value: NorthFacing
            /// </summary>
            [EnumMember(Value = "NorthFacing")]
            NorthFacing = 14,

            /// <summary>
            /// Enum CityViews for value: CityViews
            /// </summary>
            [EnumMember(Value = "CityViews")]
            CityViews = 15,

            /// <summary>
            /// Enum IndoorSpa for value: IndoorSpa
            /// </summary>
            [EnumMember(Value = "IndoorSpa")]
            IndoorSpa = 16,

            /// <summary>
            /// Enum Gym for value: Gym
            /// </summary>
            [EnumMember(Value = "Gym")]
            Gym = 17,

            /// <summary>
            /// Enum AlarmSystem for value: AlarmSystem
            /// </summary>
            [EnumMember(Value = "AlarmSystem")]
            AlarmSystem = 18,

            /// <summary>
            /// Enum Intercom for value: Intercom
            /// </summary>
            [EnumMember(Value = "Intercom")]
            Intercom = 19,

            /// <summary>
            /// Enum BroadbandInternetAccess for value: BroadbandInternetAccess
            /// </summary>
            [EnumMember(Value = "BroadbandInternetAccess")]
            BroadbandInternetAccess = 20,

            /// <summary>
            /// Enum Bath for value: Bath
            /// </summary>
            [EnumMember(Value = "Bath")]
            Bath = 21,

            /// <summary>
            /// Enum Fireplace for value: Fireplace
            /// </summary>
            [EnumMember(Value = "Fireplace")]
            Fireplace = 22,

            /// <summary>
            /// Enum SeparateDiningRoom for value: SeparateDiningRoom
            /// </summary>
            [EnumMember(Value = "SeparateDiningRoom")]
            SeparateDiningRoom = 23,

            /// <summary>
            /// Enum Heating for value: Heating
            /// </summary>
            [EnumMember(Value = "Heating")]
            Heating = 24,

            /// <summary>
            /// Enum Dishwasher for value: Dishwasher
            /// </summary>
            [EnumMember(Value = "Dishwasher")]
            Dishwasher = 25,

            /// <summary>
            /// Enum Study for value: Study
            /// </summary>
            [EnumMember(Value = "Study")]
            Study = 26,

            /// <summary>
            /// Enum TennisCourt for value: TennisCourt
            /// </summary>
            [EnumMember(Value = "TennisCourt")]
            TennisCourt = 27,

            /// <summary>
            /// Enum Shed for value: Shed
            /// </summary>
            [EnumMember(Value = "Shed")]
            Shed = 28,

            /// <summary>
            /// Enum FullyFenced for value: FullyFenced
            /// </summary>
            [EnumMember(Value = "FullyFenced")]
            FullyFenced = 29,

            /// <summary>
            /// Enum BalconyDeck for value: BalconyDeck
            /// </summary>
            [EnumMember(Value = "BalconyDeck")]
            BalconyDeck = 30,

            /// <summary>
            /// Enum GardenCourtyard for value: GardenCourtyard
            /// </summary>
            [EnumMember(Value = "GardenCourtyard")]
            GardenCourtyard = 31,

            /// <summary>
            /// Enum OutdoorSpa for value: OutdoorSpa
            /// </summary>
            [EnumMember(Value = "OutdoorSpa")]
            OutdoorSpa = 32,

            /// <summary>
            /// Enum DoubleGlazedWindows for value: DoubleGlazedWindows
            /// </summary>
            [EnumMember(Value = "DoubleGlazedWindows")]
            DoubleGlazedWindows = 33,

            /// <summary>
            /// Enum EnergyEfficientAppliances for value: EnergyEfficientAppliances
            /// </summary>
            [EnumMember(Value = "EnergyEfficientAppliances")]
            EnergyEfficientAppliances = 34,

            /// <summary>
            /// Enum WaterEfficientAppliances for value: WaterEfficientAppliances
            /// </summary>
            [EnumMember(Value = "WaterEfficientAppliances")]
            WaterEfficientAppliances = 35,

            /// <summary>
            /// Enum WallCeilingInsulation for value: WallCeilingInsulation
            /// </summary>
            [EnumMember(Value = "WallCeilingInsulation")]
            WallCeilingInsulation = 36,

            /// <summary>
            /// Enum RainwaterStorageTank for value: RainwaterStorageTank
            /// </summary>
            [EnumMember(Value = "RainwaterStorageTank")]
            RainwaterStorageTank = 37,

            /// <summary>
            /// Enum GreywaterSystem for value: GreywaterSystem
            /// </summary>
            [EnumMember(Value = "GreywaterSystem")]
            GreywaterSystem = 38,

            /// <summary>
            /// Enum WaterEfficientFixtures for value: WaterEfficientFixtures
            /// </summary>
            [EnumMember(Value = "WaterEfficientFixtures")]
            WaterEfficientFixtures = 39,

            /// <summary>
            /// Enum SolarHotWater for value: SolarHotWater
            /// </summary>
            [EnumMember(Value = "SolarHotWater")]
            SolarHotWater = 40,

            /// <summary>
            /// Enum SolarPanels for value: SolarPanels
            /// </summary>
            [EnumMember(Value = "SolarPanels")]
            SolarPanels = 41

        }


        /// <summary>
        /// Gets or Sets PropertyFeatures
        /// </summary>
        [DataMember(Name = "propertyFeatures", EmitDefaultValue = false)]
        public List<PropertyFeaturesEnum> PropertyFeatures { get; set; }
        /// <summary>
        /// Defines ListingAttributes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListingAttributesEnum
        {
            /// <summary>
            /// Enum HasPhotos for value: HasPhotos
            /// </summary>
            [EnumMember(Value = "HasPhotos")]
            HasPhotos = 1,

            /// <summary>
            /// Enum HasPrice for value: HasPrice
            /// </summary>
            [EnumMember(Value = "HasPrice")]
            HasPrice = 2,

            /// <summary>
            /// Enum NotUpForAuction for value: NotUpForAuction
            /// </summary>
            [EnumMember(Value = "NotUpForAuction")]
            NotUpForAuction = 3,

            /// <summary>
            /// Enum NotUnderContract for value: NotUnderContract
            /// </summary>
            [EnumMember(Value = "NotUnderContract")]
            NotUnderContract = 4,

            /// <summary>
            /// Enum MarkedAsNew for value: MarkedAsNew
            /// </summary>
            [EnumMember(Value = "MarkedAsNew")]
            MarkedAsNew = 5

        }


        /// <summary>
        /// Gets or Sets ListingAttributes
        /// </summary>
        [DataMember(Name = "listingAttributes", EmitDefaultValue = false)]
        public List<ListingAttributesEnum> ListingAttributes { get; set; }
        /// <summary>
        /// Defines PropertyEstablishedType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropertyEstablishedTypeEnum
        {
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            [EnumMember(Value = "Any")]
            Any = 1,

            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 2,

            /// <summary>
            /// Enum Established for value: Established
            /// </summary>
            [EnumMember(Value = "Established")]
            Established = 3

        }

        /// <summary>
        /// Gets or Sets PropertyEstablishedType
        /// </summary>
        [DataMember(Name = "propertyEstablishedType", EmitDefaultValue = false)]
        public PropertyEstablishedTypeEnum? PropertyEstablishedType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters" /> class.
        /// </summary>
        /// <param name="listingType">listingType.</param>
        /// <param name="propertyTypes">propertyTypes.</param>
        /// <param name="propertyFeatures">propertyFeatures.</param>
        /// <param name="listingAttributes">listingAttributes.</param>
        /// <param name="propertyEstablishedType">propertyEstablishedType.</param>
        /// <param name="minBedrooms">minBedrooms.</param>
        /// <param name="maxBedrooms">maxBedrooms.</param>
        /// <param name="minBathrooms">minBathrooms.</param>
        /// <param name="maxBathrooms">maxBathrooms.</param>
        /// <param name="minCarspaces">minCarspaces.</param>
        /// <param name="maxCarspaces">maxCarspaces.</param>
        /// <param name="minPrice">minPrice.</param>
        /// <param name="maxPrice">maxPrice.</param>
        /// <param name="minLandArea">minLandArea.</param>
        /// <param name="maxLandArea">maxLandArea.</param>
        /// <param name="advertiserIds">advertiserIds.</param>
        /// <param name="adIds">adIds.</param>
        /// <param name="excludeAdIds">excludeAdIds.</param>
        /// <param name="locations">locations.</param>
        /// <param name="schoolCatchments">schoolCatchments.</param>
        /// <param name="locationTerms">locationTerms.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="newDevOnly">newDevOnly.</param>
        /// <param name="inspectionFrom">inspectionFrom.</param>
        /// <param name="inspectionTo">inspectionTo.</param>
        /// <param name="auctionFrom">auctionFrom.</param>
        /// <param name="auctionTo">auctionTo.</param>
        /// <param name="dateAvailableFrom">dateAvailableFrom.</param>
        /// <param name="dateAvailableTo">dateAvailableTo.</param>
        /// <param name="ruralOnly">ruralOnly.</param>
        /// <param name="excludePriceWithheld">excludePriceWithheld.</param>
        /// <param name="excludeDepositTaken">excludeDepositTaken.</param>
        /// <param name="topspotKeywords">topspotKeywords.</param>
        /// <param name="customSort">customSort.</param>
        /// <param name="sort">sort.</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="geoWindow">geoWindow.</param>
        /// <param name="updatedSince">updatedSince.</param>
        /// <param name="listedSince">listedSince.</param>
        /// <param name="includeInspectionAggregations">includeInspectionAggregations.</param>
        /// <param name="tags">tags.</param>
        /// <param name="pageNumber">pageNumber.</param>
        public DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters(ListingTypeEnum? listingType = default(ListingTypeEnum?), List<PropertyTypesEnum> propertyTypes = default(List<PropertyTypesEnum>), List<PropertyFeaturesEnum> propertyFeatures = default(List<PropertyFeaturesEnum>), List<ListingAttributesEnum> listingAttributes = default(List<ListingAttributesEnum>), PropertyEstablishedTypeEnum? propertyEstablishedType = default(PropertyEstablishedTypeEnum?), float minBedrooms = default(float), float maxBedrooms = default(float), float minBathrooms = default(float), float maxBathrooms = default(float), int minCarspaces = default(int), int maxCarspaces = default(int), int minPrice = default(int), int maxPrice = default(int), int minLandArea = default(int), int maxLandArea = default(int), List<int> advertiserIds = default(List<int>), List<int> adIds = default(List<int>), List<int> excludeAdIds = default(List<int>), List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation> locations = default(List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation>), List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment> schoolCatchments = default(List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment>), string locationTerms = default(string), List<string> keywords = default(List<string>), bool newDevOnly = default(bool), DateTime inspectionFrom = default(DateTime), DateTime inspectionTo = default(DateTime), DateTime auctionFrom = default(DateTime), DateTime auctionTo = default(DateTime), DateTime dateAvailableFrom = default(DateTime), DateTime dateAvailableTo = default(DateTime), bool ruralOnly = default(bool), bool excludePriceWithheld = default(bool), bool excludeDepositTaken = default(bool), List<string> topspotKeywords = default(List<string>), DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort customSort = default(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort), DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy sort = default(DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy), int pageSize = default(int), DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow geoWindow = default(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow), DateTime updatedSince = default(DateTime), DateTime listedSince = default(DateTime), bool includeInspectionAggregations = default(bool), List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery> tags = default(List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery>), int pageNumber = default(int))
        {
            this.ListingType = listingType;
            this.PropertyTypes = propertyTypes;
            this.PropertyFeatures = propertyFeatures;
            this.ListingAttributes = listingAttributes;
            this.PropertyEstablishedType = propertyEstablishedType;
            this.MinBedrooms = minBedrooms;
            this.MaxBedrooms = maxBedrooms;
            this.MinBathrooms = minBathrooms;
            this.MaxBathrooms = maxBathrooms;
            this.MinCarspaces = minCarspaces;
            this.MaxCarspaces = maxCarspaces;
            this.MinPrice = minPrice;
            this.MaxPrice = maxPrice;
            this.MinLandArea = minLandArea;
            this.MaxLandArea = maxLandArea;
            this.AdvertiserIds = advertiserIds;
            this.AdIds = adIds;
            this.ExcludeAdIds = excludeAdIds;
            this.Locations = locations;
            this.SchoolCatchments = schoolCatchments;
            this.LocationTerms = locationTerms;
            this.Keywords = keywords;
            this.NewDevOnly = newDevOnly;
            this.InspectionFrom = inspectionFrom;
            this.InspectionTo = inspectionTo;
            this.AuctionFrom = auctionFrom;
            this.AuctionTo = auctionTo;
            this.DateAvailableFrom = dateAvailableFrom;
            this.DateAvailableTo = dateAvailableTo;
            this.RuralOnly = ruralOnly;
            this.ExcludePriceWithheld = excludePriceWithheld;
            this.ExcludeDepositTaken = excludeDepositTaken;
            this.TopspotKeywords = topspotKeywords;
            this.CustomSort = customSort;
            this.Sort = sort;
            this.PageSize = pageSize;
            this.GeoWindow = geoWindow;
            this.UpdatedSince = updatedSince;
            this.ListedSince = listedSince;
            this.IncludeInspectionAggregations = includeInspectionAggregations;
            this.Tags = tags;
            this.PageNumber = pageNumber;
        }

        /// <summary>
        /// Gets or Sets MinBedrooms
        /// </summary>
        [DataMember(Name = "minBedrooms", EmitDefaultValue = false)]
        public float MinBedrooms { get; set; }

        /// <summary>
        /// Gets or Sets MaxBedrooms
        /// </summary>
        [DataMember(Name = "maxBedrooms", EmitDefaultValue = false)]
        public float MaxBedrooms { get; set; }

        /// <summary>
        /// Gets or Sets MinBathrooms
        /// </summary>
        [DataMember(Name = "minBathrooms", EmitDefaultValue = false)]
        public float MinBathrooms { get; set; }

        /// <summary>
        /// Gets or Sets MaxBathrooms
        /// </summary>
        [DataMember(Name = "maxBathrooms", EmitDefaultValue = false)]
        public float MaxBathrooms { get; set; }

        /// <summary>
        /// Gets or Sets MinCarspaces
        /// </summary>
        [DataMember(Name = "minCarspaces", EmitDefaultValue = false)]
        public int MinCarspaces { get; set; }

        /// <summary>
        /// Gets or Sets MaxCarspaces
        /// </summary>
        [DataMember(Name = "maxCarspaces", EmitDefaultValue = false)]
        public int MaxCarspaces { get; set; }

        /// <summary>
        /// Gets or Sets MinPrice
        /// </summary>
        [DataMember(Name = "minPrice", EmitDefaultValue = false)]
        public int MinPrice { get; set; }

        /// <summary>
        /// Gets or Sets MaxPrice
        /// </summary>
        [DataMember(Name = "maxPrice", EmitDefaultValue = false)]
        public int MaxPrice { get; set; }

        /// <summary>
        /// Gets or Sets MinLandArea
        /// </summary>
        [DataMember(Name = "minLandArea", EmitDefaultValue = false)]
        public int MinLandArea { get; set; }

        /// <summary>
        /// Gets or Sets MaxLandArea
        /// </summary>
        [DataMember(Name = "maxLandArea", EmitDefaultValue = false)]
        public int MaxLandArea { get; set; }

        /// <summary>
        /// Gets or Sets AdvertiserIds
        /// </summary>
        [DataMember(Name = "advertiserIds", EmitDefaultValue = false)]
        public List<int> AdvertiserIds { get; set; }

        /// <summary>
        /// Gets or Sets AdIds
        /// </summary>
        [DataMember(Name = "adIds", EmitDefaultValue = false)]
        public List<int> AdIds { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeAdIds
        /// </summary>
        [DataMember(Name = "excludeAdIds", EmitDefaultValue = false)]
        public List<int> ExcludeAdIds { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name = "locations", EmitDefaultValue = false)]
        public List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation> Locations { get; set; }

        /// <summary>
        /// Gets or Sets SchoolCatchments
        /// </summary>
        [DataMember(Name = "schoolCatchments", EmitDefaultValue = false)]
        public List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment> SchoolCatchments { get; set; }

        /// <summary>
        /// Gets or Sets LocationTerms
        /// </summary>
        [DataMember(Name = "locationTerms", EmitDefaultValue = false)]
        public string LocationTerms { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Gets or Sets NewDevOnly
        /// </summary>
        [DataMember(Name = "newDevOnly", EmitDefaultValue = false)]
        public bool NewDevOnly { get; set; }

        /// <summary>
        /// Gets or Sets InspectionFrom
        /// </summary>
        [DataMember(Name = "inspectionFrom", EmitDefaultValue = false)]
        public DateTime InspectionFrom { get; set; }

        /// <summary>
        /// Gets or Sets InspectionTo
        /// </summary>
        [DataMember(Name = "inspectionTo", EmitDefaultValue = false)]
        public DateTime InspectionTo { get; set; }

        /// <summary>
        /// Gets or Sets AuctionFrom
        /// </summary>
        [DataMember(Name = "auctionFrom", EmitDefaultValue = false)]
        public DateTime AuctionFrom { get; set; }

        /// <summary>
        /// Gets or Sets AuctionTo
        /// </summary>
        [DataMember(Name = "auctionTo", EmitDefaultValue = false)]
        public DateTime AuctionTo { get; set; }

        /// <summary>
        /// Gets or Sets DateAvailableFrom
        /// </summary>
        [DataMember(Name = "dateAvailableFrom", EmitDefaultValue = false)]
        public DateTime DateAvailableFrom { get; set; }

        /// <summary>
        /// Gets or Sets DateAvailableTo
        /// </summary>
        [DataMember(Name = "dateAvailableTo", EmitDefaultValue = false)]
        public DateTime DateAvailableTo { get; set; }

        /// <summary>
        /// Gets or Sets RuralOnly
        /// </summary>
        [DataMember(Name = "ruralOnly", EmitDefaultValue = false)]
        public bool RuralOnly { get; set; }

        /// <summary>
        /// Gets or Sets ExcludePriceWithheld
        /// </summary>
        [DataMember(Name = "excludePriceWithheld", EmitDefaultValue = false)]
        public bool ExcludePriceWithheld { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeDepositTaken
        /// </summary>
        [DataMember(Name = "excludeDepositTaken", EmitDefaultValue = false)]
        public bool ExcludeDepositTaken { get; set; }

        /// <summary>
        /// Gets or Sets TopspotKeywords
        /// </summary>
        [DataMember(Name = "topspotKeywords", EmitDefaultValue = false)]
        public List<string> TopspotKeywords { get; set; }

        /// <summary>
        /// Gets or Sets CustomSort
        /// </summary>
        [DataMember(Name = "customSort", EmitDefaultValue = false)]
        public DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort CustomSort { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy Sort { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "pageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or Sets GeoWindow
        /// </summary>
        [DataMember(Name = "geoWindow", EmitDefaultValue = false)]
        public DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow GeoWindow { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedSince
        /// </summary>
        [DataMember(Name = "updatedSince", EmitDefaultValue = false)]
        public DateTime UpdatedSince { get; set; }

        /// <summary>
        /// Gets or Sets ListedSince
        /// </summary>
        [DataMember(Name = "listedSince", EmitDefaultValue = false)]
        public DateTime ListedSince { get; set; }

        /// <summary>
        /// Gets or Sets IncludeInspectionAggregations
        /// </summary>
        [DataMember(Name = "includeInspectionAggregations", EmitDefaultValue = false)]
        public bool IncludeInspectionAggregations { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery> Tags { get; set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name = "pageNumber", EmitDefaultValue = false)]
        public int PageNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters {\n");
            sb.Append("  ListingType: ").Append(ListingType).Append("\n");
            sb.Append("  PropertyTypes: ").Append(PropertyTypes).Append("\n");
            sb.Append("  PropertyFeatures: ").Append(PropertyFeatures).Append("\n");
            sb.Append("  ListingAttributes: ").Append(ListingAttributes).Append("\n");
            sb.Append("  PropertyEstablishedType: ").Append(PropertyEstablishedType).Append("\n");
            sb.Append("  MinBedrooms: ").Append(MinBedrooms).Append("\n");
            sb.Append("  MaxBedrooms: ").Append(MaxBedrooms).Append("\n");
            sb.Append("  MinBathrooms: ").Append(MinBathrooms).Append("\n");
            sb.Append("  MaxBathrooms: ").Append(MaxBathrooms).Append("\n");
            sb.Append("  MinCarspaces: ").Append(MinCarspaces).Append("\n");
            sb.Append("  MaxCarspaces: ").Append(MaxCarspaces).Append("\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  MinLandArea: ").Append(MinLandArea).Append("\n");
            sb.Append("  MaxLandArea: ").Append(MaxLandArea).Append("\n");
            sb.Append("  AdvertiserIds: ").Append(AdvertiserIds).Append("\n");
            sb.Append("  AdIds: ").Append(AdIds).Append("\n");
            sb.Append("  ExcludeAdIds: ").Append(ExcludeAdIds).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  SchoolCatchments: ").Append(SchoolCatchments).Append("\n");
            sb.Append("  LocationTerms: ").Append(LocationTerms).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  NewDevOnly: ").Append(NewDevOnly).Append("\n");
            sb.Append("  InspectionFrom: ").Append(InspectionFrom).Append("\n");
            sb.Append("  InspectionTo: ").Append(InspectionTo).Append("\n");
            sb.Append("  AuctionFrom: ").Append(AuctionFrom).Append("\n");
            sb.Append("  AuctionTo: ").Append(AuctionTo).Append("\n");
            sb.Append("  DateAvailableFrom: ").Append(DateAvailableFrom).Append("\n");
            sb.Append("  DateAvailableTo: ").Append(DateAvailableTo).Append("\n");
            sb.Append("  RuralOnly: ").Append(RuralOnly).Append("\n");
            sb.Append("  ExcludePriceWithheld: ").Append(ExcludePriceWithheld).Append("\n");
            sb.Append("  ExcludeDepositTaken: ").Append(ExcludeDepositTaken).Append("\n");
            sb.Append("  TopspotKeywords: ").Append(TopspotKeywords).Append("\n");
            sb.Append("  CustomSort: ").Append(CustomSort).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  GeoWindow: ").Append(GeoWindow).Append("\n");
            sb.Append("  UpdatedSince: ").Append(UpdatedSince).Append("\n");
            sb.Append("  ListedSince: ").Append(ListedSince).Append("\n");
            sb.Append("  IncludeInspectionAggregations: ").Append(IncludeInspectionAggregations).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListingType == input.ListingType ||
                    this.ListingType.Equals(input.ListingType)
                ) && 
                (
                    this.PropertyTypes == input.PropertyTypes ||
                    this.PropertyTypes.SequenceEqual(input.PropertyTypes)
                ) && 
                (
                    this.PropertyFeatures == input.PropertyFeatures ||
                    this.PropertyFeatures.SequenceEqual(input.PropertyFeatures)
                ) && 
                (
                    this.ListingAttributes == input.ListingAttributes ||
                    this.ListingAttributes.SequenceEqual(input.ListingAttributes)
                ) && 
                (
                    this.PropertyEstablishedType == input.PropertyEstablishedType ||
                    this.PropertyEstablishedType.Equals(input.PropertyEstablishedType)
                ) && 
                (
                    this.MinBedrooms == input.MinBedrooms ||
                    this.MinBedrooms.Equals(input.MinBedrooms)
                ) && 
                (
                    this.MaxBedrooms == input.MaxBedrooms ||
                    this.MaxBedrooms.Equals(input.MaxBedrooms)
                ) && 
                (
                    this.MinBathrooms == input.MinBathrooms ||
                    this.MinBathrooms.Equals(input.MinBathrooms)
                ) && 
                (
                    this.MaxBathrooms == input.MaxBathrooms ||
                    this.MaxBathrooms.Equals(input.MaxBathrooms)
                ) && 
                (
                    this.MinCarspaces == input.MinCarspaces ||
                    this.MinCarspaces.Equals(input.MinCarspaces)
                ) && 
                (
                    this.MaxCarspaces == input.MaxCarspaces ||
                    this.MaxCarspaces.Equals(input.MaxCarspaces)
                ) && 
                (
                    this.MinPrice == input.MinPrice ||
                    this.MinPrice.Equals(input.MinPrice)
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    this.MaxPrice.Equals(input.MaxPrice)
                ) && 
                (
                    this.MinLandArea == input.MinLandArea ||
                    this.MinLandArea.Equals(input.MinLandArea)
                ) && 
                (
                    this.MaxLandArea == input.MaxLandArea ||
                    this.MaxLandArea.Equals(input.MaxLandArea)
                ) && 
                (
                    this.AdvertiserIds == input.AdvertiserIds ||
                    this.AdvertiserIds != null &&
                    input.AdvertiserIds != null &&
                    this.AdvertiserIds.SequenceEqual(input.AdvertiserIds)
                ) && 
                (
                    this.AdIds == input.AdIds ||
                    this.AdIds != null &&
                    input.AdIds != null &&
                    this.AdIds.SequenceEqual(input.AdIds)
                ) && 
                (
                    this.ExcludeAdIds == input.ExcludeAdIds ||
                    this.ExcludeAdIds != null &&
                    input.ExcludeAdIds != null &&
                    this.ExcludeAdIds.SequenceEqual(input.ExcludeAdIds)
                ) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    input.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && 
                (
                    this.SchoolCatchments == input.SchoolCatchments ||
                    this.SchoolCatchments != null &&
                    input.SchoolCatchments != null &&
                    this.SchoolCatchments.SequenceEqual(input.SchoolCatchments)
                ) && 
                (
                    this.LocationTerms == input.LocationTerms ||
                    (this.LocationTerms != null &&
                    this.LocationTerms.Equals(input.LocationTerms))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.NewDevOnly == input.NewDevOnly ||
                    this.NewDevOnly.Equals(input.NewDevOnly)
                ) && 
                (
                    this.InspectionFrom == input.InspectionFrom ||
                    (this.InspectionFrom != null &&
                    this.InspectionFrom.Equals(input.InspectionFrom))
                ) && 
                (
                    this.InspectionTo == input.InspectionTo ||
                    (this.InspectionTo != null &&
                    this.InspectionTo.Equals(input.InspectionTo))
                ) && 
                (
                    this.AuctionFrom == input.AuctionFrom ||
                    (this.AuctionFrom != null &&
                    this.AuctionFrom.Equals(input.AuctionFrom))
                ) && 
                (
                    this.AuctionTo == input.AuctionTo ||
                    (this.AuctionTo != null &&
                    this.AuctionTo.Equals(input.AuctionTo))
                ) && 
                (
                    this.DateAvailableFrom == input.DateAvailableFrom ||
                    (this.DateAvailableFrom != null &&
                    this.DateAvailableFrom.Equals(input.DateAvailableFrom))
                ) && 
                (
                    this.DateAvailableTo == input.DateAvailableTo ||
                    (this.DateAvailableTo != null &&
                    this.DateAvailableTo.Equals(input.DateAvailableTo))
                ) && 
                (
                    this.RuralOnly == input.RuralOnly ||
                    this.RuralOnly.Equals(input.RuralOnly)
                ) && 
                (
                    this.ExcludePriceWithheld == input.ExcludePriceWithheld ||
                    this.ExcludePriceWithheld.Equals(input.ExcludePriceWithheld)
                ) && 
                (
                    this.ExcludeDepositTaken == input.ExcludeDepositTaken ||
                    this.ExcludeDepositTaken.Equals(input.ExcludeDepositTaken)
                ) && 
                (
                    this.TopspotKeywords == input.TopspotKeywords ||
                    this.TopspotKeywords != null &&
                    input.TopspotKeywords != null &&
                    this.TopspotKeywords.SequenceEqual(input.TopspotKeywords)
                ) && 
                (
                    this.CustomSort == input.CustomSort ||
                    (this.CustomSort != null &&
                    this.CustomSort.Equals(input.CustomSort))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.GeoWindow == input.GeoWindow ||
                    (this.GeoWindow != null &&
                    this.GeoWindow.Equals(input.GeoWindow))
                ) && 
                (
                    this.UpdatedSince == input.UpdatedSince ||
                    (this.UpdatedSince != null &&
                    this.UpdatedSince.Equals(input.UpdatedSince))
                ) && 
                (
                    this.ListedSince == input.ListedSince ||
                    (this.ListedSince != null &&
                    this.ListedSince.Equals(input.ListedSince))
                ) && 
                (
                    this.IncludeInspectionAggregations == input.IncludeInspectionAggregations ||
                    this.IncludeInspectionAggregations.Equals(input.IncludeInspectionAggregations)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    this.PageNumber.Equals(input.PageNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ListingType.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyTypes.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyFeatures.GetHashCode();
                hashCode = hashCode * 59 + this.ListingAttributes.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyEstablishedType.GetHashCode();
                hashCode = hashCode * 59 + this.MinBedrooms.GetHashCode();
                hashCode = hashCode * 59 + this.MaxBedrooms.GetHashCode();
                hashCode = hashCode * 59 + this.MinBathrooms.GetHashCode();
                hashCode = hashCode * 59 + this.MaxBathrooms.GetHashCode();
                hashCode = hashCode * 59 + this.MinCarspaces.GetHashCode();
                hashCode = hashCode * 59 + this.MaxCarspaces.GetHashCode();
                hashCode = hashCode * 59 + this.MinPrice.GetHashCode();
                hashCode = hashCode * 59 + this.MaxPrice.GetHashCode();
                hashCode = hashCode * 59 + this.MinLandArea.GetHashCode();
                hashCode = hashCode * 59 + this.MaxLandArea.GetHashCode();
                if (this.AdvertiserIds != null)
                    hashCode = hashCode * 59 + this.AdvertiserIds.GetHashCode();
                if (this.AdIds != null)
                    hashCode = hashCode * 59 + this.AdIds.GetHashCode();
                if (this.ExcludeAdIds != null)
                    hashCode = hashCode * 59 + this.ExcludeAdIds.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.SchoolCatchments != null)
                    hashCode = hashCode * 59 + this.SchoolCatchments.GetHashCode();
                if (this.LocationTerms != null)
                    hashCode = hashCode * 59 + this.LocationTerms.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                hashCode = hashCode * 59 + this.NewDevOnly.GetHashCode();
                if (this.InspectionFrom != null)
                    hashCode = hashCode * 59 + this.InspectionFrom.GetHashCode();
                if (this.InspectionTo != null)
                    hashCode = hashCode * 59 + this.InspectionTo.GetHashCode();
                if (this.AuctionFrom != null)
                    hashCode = hashCode * 59 + this.AuctionFrom.GetHashCode();
                if (this.AuctionTo != null)
                    hashCode = hashCode * 59 + this.AuctionTo.GetHashCode();
                if (this.DateAvailableFrom != null)
                    hashCode = hashCode * 59 + this.DateAvailableFrom.GetHashCode();
                if (this.DateAvailableTo != null)
                    hashCode = hashCode * 59 + this.DateAvailableTo.GetHashCode();
                hashCode = hashCode * 59 + this.RuralOnly.GetHashCode();
                hashCode = hashCode * 59 + this.ExcludePriceWithheld.GetHashCode();
                hashCode = hashCode * 59 + this.ExcludeDepositTaken.GetHashCode();
                if (this.TopspotKeywords != null)
                    hashCode = hashCode * 59 + this.TopspotKeywords.GetHashCode();
                if (this.CustomSort != null)
                    hashCode = hashCode * 59 + this.CustomSort.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.GeoWindow != null)
                    hashCode = hashCode * 59 + this.GeoWindow.GetHashCode();
                if (this.UpdatedSince != null)
                    hashCode = hashCode * 59 + this.UpdatedSince.GetHashCode();
                if (this.ListedSince != null)
                    hashCode = hashCode * 59 + this.ListedSince.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInspectionAggregations.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
