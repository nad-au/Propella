/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.SystemNullableDomainSearchWebApiV2ModelsSortBy")]
    public partial class DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy : IEquatable<DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy>, IValidatableObject
    {
        /// <summary>
        /// Defines SortKey
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortKeyEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum Suburb for value: Suburb
            /// </summary>
            [EnumMember(Value = "Suburb")]
            Suburb = 2,

            /// <summary>
            /// Enum Price for value: Price
            /// </summary>
            [EnumMember(Value = "Price")]
            Price = 3,

            /// <summary>
            /// Enum DateUpdated for value: DateUpdated
            /// </summary>
            [EnumMember(Value = "DateUpdated")]
            DateUpdated = 4,

            /// <summary>
            /// Enum InspectionTime for value: InspectionTime
            /// </summary>
            [EnumMember(Value = "InspectionTime")]
            InspectionTime = 5,

            /// <summary>
            /// Enum AuctionTime for value: AuctionTime
            /// </summary>
            [EnumMember(Value = "AuctionTime")]
            AuctionTime = 6,

            /// <summary>
            /// Enum Proximity for value: Proximity
            /// </summary>
            [EnumMember(Value = "Proximity")]
            Proximity = 7,

            /// <summary>
            /// Enum SoldDate for value: SoldDate
            /// </summary>
            [EnumMember(Value = "SoldDate")]
            SoldDate = 8,

            /// <summary>
            /// Enum DefaultThenDateUpdated for value: DefaultThenDateUpdated
            /// </summary>
            [EnumMember(Value = "DefaultThenDateUpdated")]
            DefaultThenDateUpdated = 9,

            /// <summary>
            /// Enum DateAvailable for value: DateAvailable
            /// </summary>
            [EnumMember(Value = "DateAvailable")]
            DateAvailable = 10,

            /// <summary>
            /// Enum DateListed for value: DateListed
            /// </summary>
            [EnumMember(Value = "DateListed")]
            DateListed = 11

        }

        /// <summary>
        /// Gets or Sets SortKey
        /// </summary>
        [DataMember(Name = "sortKey", EmitDefaultValue = false)]
        public SortKeyEnum? SortKey { get; set; }
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy" /> class.
        /// </summary>
        /// <param name="sortKey">sortKey.</param>
        /// <param name="direction">direction.</param>
        /// <param name="proximityTo">proximityTo.</param>
        public DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy(SortKeyEnum? sortKey = default(SortKeyEnum?), DirectionEnum? direction = default(DirectionEnum?), DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint proximityTo = default(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint))
        {
            this.SortKey = sortKey;
            this.Direction = direction;
            this.ProximityTo = proximityTo;
        }

        /// <summary>
        /// Gets or Sets ProximityTo
        /// </summary>
        [DataMember(Name = "proximityTo", EmitDefaultValue = false)]
        public DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint ProximityTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy {\n");
            sb.Append("  SortKey: ").Append(SortKey).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ProximityTo: ").Append(ProximityTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SortKey == input.SortKey ||
                    this.SortKey.Equals(input.SortKey)
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && 
                (
                    this.ProximityTo == input.ProximityTo ||
                    (this.ProximityTo != null &&
                    this.ProximityTo.Equals(input.ProximityTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SortKey.GetHashCode();
                hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.ProximityTo != null)
                    hashCode = hashCode * 59 + this.ProximityTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
