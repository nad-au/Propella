/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Encapsulates the details of a Listing&#39;s Inspection
    /// </summary>
    [DataContract(Name = "Listings.V2.Inspection")]
    public partial class ListingsV2Inspection : IEquatable<ListingsV2Inspection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsV2Inspection" /> class.
        /// </summary>
        /// <param name="recurrence">recurrence.</param>
        /// <param name="openingDateTime">Opening date and time of the inspection. e.g. 2015-01-01T12:00:00.  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="closingDateTime">Closing date and time of the inspection. e.g. 2015-01-01T12:00:00  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="description">Description of the inspection provided by the Advertiser.  When listings are bulk uploaded, inspection times are provided as a string.  Other inspection details will not be provided.</param>
        public ListingsV2Inspection(ListingsV2InspectionRecurrence recurrence = default(ListingsV2InspectionRecurrence), DateTime? openingDateTime = default(DateTime?), DateTime? closingDateTime = default(DateTime?), string description = default(string))
        {
            this.Recurrence = recurrence;
            this.OpeningDateTime = openingDateTime;
            this.ClosingDateTime = closingDateTime;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Recurrence
        /// </summary>
        [DataMember(Name = "recurrence", EmitDefaultValue = false)]
        public ListingsV2InspectionRecurrence Recurrence { get; set; }

        /// <summary>
        /// Opening date and time of the inspection. e.g. 2015-01-01T12:00:00.  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>Opening date and time of the inspection. e.g. 2015-01-01T12:00:00.  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "openingDateTime", EmitDefaultValue = true)]
        public DateTime? OpeningDateTime { get; set; }

        /// <summary>
        /// Closing date and time of the inspection. e.g. 2015-01-01T12:00:00  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>Closing date and time of the inspection. e.g. 2015-01-01T12:00:00  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "closingDateTime", EmitDefaultValue = true)]
        public DateTime? ClosingDateTime { get; set; }

        /// <summary>
        /// Description of the inspection provided by the Advertiser.  When listings are bulk uploaded, inspection times are provided as a string.  Other inspection details will not be provided
        /// </summary>
        /// <value>Description of the inspection provided by the Advertiser.  When listings are bulk uploaded, inspection times are provided as a string.  Other inspection details will not be provided</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsV2Inspection {\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  OpeningDateTime: ").Append(OpeningDateTime).Append("\n");
            sb.Append("  ClosingDateTime: ").Append(ClosingDateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingsV2Inspection);
        }

        /// <summary>
        /// Returns true if ListingsV2Inspection instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsV2Inspection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsV2Inspection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Recurrence == input.Recurrence ||
                    (this.Recurrence != null &&
                    this.Recurrence.Equals(input.Recurrence))
                ) && 
                (
                    this.OpeningDateTime == input.OpeningDateTime ||
                    (this.OpeningDateTime != null &&
                    this.OpeningDateTime.Equals(input.OpeningDateTime))
                ) && 
                (
                    this.ClosingDateTime == input.ClosingDateTime ||
                    (this.ClosingDateTime != null &&
                    this.ClosingDateTime.Equals(input.ClosingDateTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Recurrence != null)
                    hashCode = hashCode * 59 + this.Recurrence.GetHashCode();
                if (this.OpeningDateTime != null)
                    hashCode = hashCode * 59 + this.OpeningDateTime.GetHashCode();
                if (this.ClosingDateTime != null)
                    hashCode = hashCode * 59 + this.ClosingDateTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
