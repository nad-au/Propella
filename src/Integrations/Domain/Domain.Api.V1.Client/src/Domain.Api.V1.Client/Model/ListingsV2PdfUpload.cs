/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// PDF file
    /// </summary>
    [DataContract(Name = "Listings.V2.PdfUpload")]
    public partial class ListingsV2PdfUpload : IEquatable<ListingsV2PdfUpload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsV2PdfUpload" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="url">Url of the PDF.</param>
        /// <param name="filename">Original file name of the PDF.</param>
        /// <param name="fileDescription">Description of the PDF.</param>
        public ListingsV2PdfUpload(ListingsV2PdfType type = default(ListingsV2PdfType), string url = default(string), string filename = default(string), string fileDescription = default(string))
        {
            this.Type = type;
            this.Url = url;
            this.Filename = filename;
            this.FileDescription = fileDescription;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ListingsV2PdfType Type { get; set; }

        /// <summary>
        /// Url of the PDF
        /// </summary>
        /// <value>Url of the PDF</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Original file name of the PDF
        /// </summary>
        /// <value>Original file name of the PDF</value>
        [DataMember(Name = "filename", EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// Description of the PDF
        /// </summary>
        /// <value>Description of the PDF</value>
        [DataMember(Name = "fileDescription", EmitDefaultValue = true)]
        public string FileDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsV2PdfUpload {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  FileDescription: ").Append(FileDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingsV2PdfUpload);
        }

        /// <summary>
        /// Returns true if ListingsV2PdfUpload instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsV2PdfUpload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsV2PdfUpload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.FileDescription == input.FileDescription ||
                    (this.FileDescription != null &&
                    this.FileDescription.Equals(input.FileDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.FileDescription != null)
                    hashCode = hashCode * 59 + this.FileDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
