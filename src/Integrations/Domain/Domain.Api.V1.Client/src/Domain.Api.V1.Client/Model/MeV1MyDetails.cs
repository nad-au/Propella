/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// MeV1MyDetails
    /// </summary>
    [DataContract(Name = "Me.V1.MyDetails")]
    public partial class MeV1MyDetails : IEquatable<MeV1MyDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeV1MyDetails" /> class.
        /// </summary>
        /// <param name="authenticated">True if the current request was successfully authenticated.</param>
        /// <param name="clientId">The Client ID or API Key used to authenticated this request.</param>
        /// <param name="subjectId">A unique user id, only if this request is authenticated as a user context..</param>
        /// <param name="subjectEmail">The users email address if available.</param>
        public MeV1MyDetails(bool authenticated = default(bool), string clientId = default(string), string subjectId = default(string), string subjectEmail = default(string))
        {
            this.Authenticated = authenticated;
            this.ClientId = clientId;
            this.SubjectId = subjectId;
            this.SubjectEmail = subjectEmail;
        }

        /// <summary>
        /// True if the current request was successfully authenticated
        /// </summary>
        /// <value>True if the current request was successfully authenticated</value>
        [DataMember(Name = "authenticated", EmitDefaultValue = false)]
        public bool Authenticated { get; set; }

        /// <summary>
        /// The Client ID or API Key used to authenticated this request
        /// </summary>
        /// <value>The Client ID or API Key used to authenticated this request</value>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// A unique user id, only if this request is authenticated as a user context.
        /// </summary>
        /// <value>A unique user id, only if this request is authenticated as a user context.</value>
        [DataMember(Name = "subjectId", EmitDefaultValue = true)]
        public string SubjectId { get; set; }

        /// <summary>
        /// The users email address if available
        /// </summary>
        /// <value>The users email address if available</value>
        [DataMember(Name = "subjectEmail", EmitDefaultValue = true)]
        public string SubjectEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeV1MyDetails {\n");
            sb.Append("  Authenticated: ").Append(Authenticated).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectEmail: ").Append(SubjectEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeV1MyDetails);
        }

        /// <summary>
        /// Returns true if MeV1MyDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of MeV1MyDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeV1MyDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Authenticated == input.Authenticated ||
                    this.Authenticated.Equals(input.Authenticated)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                ) && 
                (
                    this.SubjectEmail == input.SubjectEmail ||
                    (this.SubjectEmail != null &&
                    this.SubjectEmail.Equals(input.SubjectEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Authenticated.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.SubjectId != null)
                    hashCode = hashCode * 59 + this.SubjectId.GetHashCode();
                if (this.SubjectEmail != null)
                    hashCode = hashCode * 59 + this.SubjectEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
