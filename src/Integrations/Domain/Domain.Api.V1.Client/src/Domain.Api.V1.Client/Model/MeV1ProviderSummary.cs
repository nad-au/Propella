/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Client.Model
{
    /// <summary>
    /// Create provider response
    /// </summary>
    [DataContract(Name = "Me.V1.ProviderSummary")]
    public partial class MeV1ProviderSummary : IEquatable<MeV1ProviderSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeV1ProviderSummary" /> class.
        /// </summary>
        /// <param name="id">Provider identifier - this will map to the username.</param>
        /// <param name="companyName">Company name.</param>
        /// <param name="contactNameTechnical">Contact person&#39;s name for technical related enquiries.</param>
        /// <param name="emailTechnical">Email address to receive technical related emails.</param>
        /// <param name="phoneTechnical">Phone to be contact for technical related enquiries.</param>
        /// <param name="contactNameBusiness">Contact person&#39;s name for business related enquiries.</param>
        /// <param name="emailBusiness">Email address to receive business related emails.</param>
        /// <param name="phoneBusiness">Phone to be contact for business related enquiries.</param>
        public MeV1ProviderSummary(string id = default(string), string companyName = default(string), string contactNameTechnical = default(string), string emailTechnical = default(string), string phoneTechnical = default(string), string contactNameBusiness = default(string), string emailBusiness = default(string), string phoneBusiness = default(string))
        {
            this.Id = id;
            this.CompanyName = companyName;
            this.ContactNameTechnical = contactNameTechnical;
            this.EmailTechnical = emailTechnical;
            this.PhoneTechnical = phoneTechnical;
            this.ContactNameBusiness = contactNameBusiness;
            this.EmailBusiness = emailBusiness;
            this.PhoneBusiness = phoneBusiness;
        }

        /// <summary>
        /// Provider identifier - this will map to the username
        /// </summary>
        /// <value>Provider identifier - this will map to the username</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Company name
        /// </summary>
        /// <value>Company name</value>
        [DataMember(Name = "companyName", EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Contact person&#39;s name for technical related enquiries
        /// </summary>
        /// <value>Contact person&#39;s name for technical related enquiries</value>
        [DataMember(Name = "contactNameTechnical", EmitDefaultValue = true)]
        public string ContactNameTechnical { get; set; }

        /// <summary>
        /// Email address to receive technical related emails
        /// </summary>
        /// <value>Email address to receive technical related emails</value>
        [DataMember(Name = "emailTechnical", EmitDefaultValue = true)]
        public string EmailTechnical { get; set; }

        /// <summary>
        /// Phone to be contact for technical related enquiries
        /// </summary>
        /// <value>Phone to be contact for technical related enquiries</value>
        [DataMember(Name = "phoneTechnical", EmitDefaultValue = true)]
        public string PhoneTechnical { get; set; }

        /// <summary>
        /// Contact person&#39;s name for business related enquiries
        /// </summary>
        /// <value>Contact person&#39;s name for business related enquiries</value>
        [DataMember(Name = "contactNameBusiness", EmitDefaultValue = true)]
        public string ContactNameBusiness { get; set; }

        /// <summary>
        /// Email address to receive business related emails
        /// </summary>
        /// <value>Email address to receive business related emails</value>
        [DataMember(Name = "emailBusiness", EmitDefaultValue = true)]
        public string EmailBusiness { get; set; }

        /// <summary>
        /// Phone to be contact for business related enquiries
        /// </summary>
        /// <value>Phone to be contact for business related enquiries</value>
        [DataMember(Name = "phoneBusiness", EmitDefaultValue = true)]
        public string PhoneBusiness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeV1ProviderSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ContactNameTechnical: ").Append(ContactNameTechnical).Append("\n");
            sb.Append("  EmailTechnical: ").Append(EmailTechnical).Append("\n");
            sb.Append("  PhoneTechnical: ").Append(PhoneTechnical).Append("\n");
            sb.Append("  ContactNameBusiness: ").Append(ContactNameBusiness).Append("\n");
            sb.Append("  EmailBusiness: ").Append(EmailBusiness).Append("\n");
            sb.Append("  PhoneBusiness: ").Append(PhoneBusiness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeV1ProviderSummary);
        }

        /// <summary>
        /// Returns true if MeV1ProviderSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of MeV1ProviderSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeV1ProviderSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.ContactNameTechnical == input.ContactNameTechnical ||
                    (this.ContactNameTechnical != null &&
                    this.ContactNameTechnical.Equals(input.ContactNameTechnical))
                ) && 
                (
                    this.EmailTechnical == input.EmailTechnical ||
                    (this.EmailTechnical != null &&
                    this.EmailTechnical.Equals(input.EmailTechnical))
                ) && 
                (
                    this.PhoneTechnical == input.PhoneTechnical ||
                    (this.PhoneTechnical != null &&
                    this.PhoneTechnical.Equals(input.PhoneTechnical))
                ) && 
                (
                    this.ContactNameBusiness == input.ContactNameBusiness ||
                    (this.ContactNameBusiness != null &&
                    this.ContactNameBusiness.Equals(input.ContactNameBusiness))
                ) && 
                (
                    this.EmailBusiness == input.EmailBusiness ||
                    (this.EmailBusiness != null &&
                    this.EmailBusiness.Equals(input.EmailBusiness))
                ) && 
                (
                    this.PhoneBusiness == input.PhoneBusiness ||
                    (this.PhoneBusiness != null &&
                    this.PhoneBusiness.Equals(input.PhoneBusiness))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.ContactNameTechnical != null)
                    hashCode = hashCode * 59 + this.ContactNameTechnical.GetHashCode();
                if (this.EmailTechnical != null)
                    hashCode = hashCode * 59 + this.EmailTechnical.GetHashCode();
                if (this.PhoneTechnical != null)
                    hashCode = hashCode * 59 + this.PhoneTechnical.GetHashCode();
                if (this.ContactNameBusiness != null)
                    hashCode = hashCode * 59 + this.ContactNameBusiness.GetHashCode();
                if (this.EmailBusiness != null)
                    hashCode = hashCode * 59 + this.EmailBusiness.GetHashCode();
                if (this.PhoneBusiness != null)
                    hashCode = hashCode * 59 + this.PhoneBusiness.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
