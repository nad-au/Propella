/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V1.Client;
using Domain.Api.V1.Model;

namespace Domain.Api.V1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Suggests listing locations
        /// </summary>
        /// <remarks>
        /// The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation> ListingLocationsSearch(string terms = default(string));

        /// <summary>
        /// Suggests listing locations
        /// </summary>
        /// <remarks>
        /// The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>> ListingLocationsSearchWithHttpInfo(string terms = default(string));
        /// <summary>
        /// Retrieves business listings matching the specified criteria.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing> ListingsDetailedBusinessSearch(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest);

        /// <summary>
        /// Retrieves business listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>> ListingsDetailedBusinessSearchWithHttpInfo(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest);
        /// <summary>
        /// Retrieves commercial listings matching the specified criteria.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing> ListingsDetailedCommercialSearch(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest);

        /// <summary>
        /// Retrieves commercial listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>> ListingsDetailedCommercialSearchWithHttpInfo(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest);
        /// <summary>
        /// Retrieves residential listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <returns>List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;</returns>
        List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult> ListingsDetailedResidentialSearch(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters);

        /// <summary>
        /// Retrieves residential listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <returns>ApiResponse of List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;</returns>
        ApiResponse<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>> ListingsDetailedResidentialSearchWithHttpInfo(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters);
        /// <summary>
        /// Retrieves a specific listing.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <returns>DomainPublicAdapterWebApiModelsV1ListingsListing</returns>
        DomainPublicAdapterWebApiModelsV1ListingsListing ListingsGet(int id);

        /// <summary>
        /// Retrieves a specific listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <returns>ApiResponse of DomainPublicAdapterWebApiModelsV1ListingsListing</returns>
        ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsListing> ListingsGetWithHttpInfo(int id);
        /// <summary>
        /// Returns enquiries for a given listing
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport> ListingsGetEnquiries(int id, int? pageNumber = default(int?));

        /// <summary>
        /// Returns enquiries for a given listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>> ListingsGetEnquiriesWithHttpInfo(int id, int? pageNumber = default(int?));
        /// <summary>
        /// Gets the processing report
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <returns>DomainListingAdminServiceV1ModelListingReport</returns>
        DomainListingAdminServiceV1ModelListingReport ListingsGetListingReport(string id);

        /// <summary>
        /// Gets the processing report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingReport</returns>
        ApiResponse<DomainListingAdminServiceV1ModelListingReport> ListingsGetListingReportWithHttpInfo(string id);
        /// <summary>
        /// Searches processing reports
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <returns>List&lt;DomainListingAdminServiceV1ModelListingReport&gt;</returns>
        List<DomainListingAdminServiceV1ModelListingReport> ListingsGetListingReportByReference(int agencyId, string providerAdId);

        /// <summary>
        /// Searches processing reports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <returns>ApiResponse of List&lt;DomainListingAdminServiceV1ModelListingReport&gt;</returns>
        ApiResponse<List<DomainListingAdminServiceV1ModelListingReport>> ListingsGetListingReportByReferenceWithHttpInfo(int agencyId, string providerAdId);
        /// <summary>
        /// Retrieves listings stats for the specified listing
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <returns>DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport</returns>
        DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport ListingsGetListingStatistics(int id, string timePeriod = default(string));

        /// <summary>
        /// Retrieves listings stats for the specified listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <returns>ApiResponse of DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport</returns>
        ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport> ListingsGetListingStatisticsWithHttpInfo(int id, string timePeriod = default(string));
        /// <summary>
        /// Retrieves stats for the listings of a given agent
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        List<DomainPublicAdapterWebApiModelsV1ListingsStatistics> ListingsGetListingStatisticsByAgentId(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Retrieves stats for the listings of a given agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> ListingsGetListingStatisticsByAgentIdWithHttpInfo(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Takes a listing offmarket
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        DomainListingAdminServiceV1ModelListingResponse ListingsUpdateOffmarketDetails(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails);

        /// <summary>
        /// Takes a listing offmarket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpdateOffmarketDetailsWithHttpInfo(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails);
        /// <summary>
        /// Creates or updates a business listing
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        DomainListingAdminServiceV1ModelListingResponse ListingsUpsertBusinessListing(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing);

        /// <summary>
        /// Creates or updates a business listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertBusinessListingWithHttpInfo(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing);
        /// <summary>
        /// Creates or updates a commercial listing
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        DomainListingAdminServiceV1ModelListingResponse ListingsUpsertCommercialListing(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing);

        /// <summary>
        /// Creates or updates a commercial listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertCommercialListingWithHttpInfo(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing);
        /// <summary>
        /// Creates or updates a residential listing
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        DomainListingAdminServiceV1ModelListingResponse ListingsUpsertResidentialListing(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing);

        /// <summary>
        /// Creates or updates a residential listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertResidentialListingWithHttpInfo(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing);
        /// <summary>
        /// Details of project
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <returns>ListingsV2Project</returns>
        ListingsV2Project ProjectsGet(int id);

        /// <summary>
        /// Details of project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <returns>ApiResponse of ListingsV2Project</returns>
        ApiResponse<ListingsV2Project> ProjectsGetWithHttpInfo(int id);
        /// <summary>
        /// Searches projects
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <returns>List&lt;ListingsV2Project&gt;</returns>
        List<ListingsV2Project> ProjectsSearch(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Searches projects
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;ListingsV2Project&gt;</returns>
        ApiResponse<List<ListingsV2Project>> ProjectsSearchWithHttpInfo(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Suggests listing locations
        /// </summary>
        /// <remarks>
        /// The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>> ListingLocationsSearchAsync(string terms = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Suggests listing locations
        /// </summary>
        /// <remarks>
        /// The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>>> ListingLocationsSearchWithHttpInfoAsync(string terms = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves business listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>> ListingsDetailedBusinessSearchAsync(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves business listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>>> ListingsDetailedBusinessSearchWithHttpInfoAsync(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves commercial listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>> ListingsDetailedCommercialSearchAsync(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves commercial listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>>> ListingsDetailedCommercialSearchWithHttpInfoAsync(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves residential listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>> ListingsDetailedResidentialSearchAsync(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves residential listings matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>>> ListingsDetailedResidentialSearchWithHttpInfoAsync(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPublicAdapterWebApiModelsV1ListingsListing</returns>
        System.Threading.Tasks.Task<DomainPublicAdapterWebApiModelsV1ListingsListing> ListingsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPublicAdapterWebApiModelsV1ListingsListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsListing>> ListingsGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns enquiries for a given listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>> ListingsGetEnquiriesAsync(int id, int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns enquiries for a given listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>>> ListingsGetEnquiriesWithHttpInfoAsync(int id, int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the processing report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingReport</returns>
        System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingReport> ListingsGetListingReportAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the processing report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainListingAdminServiceV1ModelListingReport>> ListingsGetListingReportWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Searches processing reports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainListingAdminServiceV1ModelListingReport&gt;</returns>
        System.Threading.Tasks.Task<List<DomainListingAdminServiceV1ModelListingReport>> ListingsGetListingReportByReferenceAsync(int agencyId, string providerAdId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Searches processing reports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainListingAdminServiceV1ModelListingReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainListingAdminServiceV1ModelListingReport>>> ListingsGetListingReportByReferenceWithHttpInfoAsync(int agencyId, string providerAdId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves listings stats for the specified listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport</returns>
        System.Threading.Tasks.Task<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport> ListingsGetListingStatisticsAsync(int id, string timePeriod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves listings stats for the specified listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport>> ListingsGetListingStatisticsWithHttpInfoAsync(int id, string timePeriod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves stats for the listings of a given agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> ListingsGetListingStatisticsByAgentIdAsync(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves stats for the listings of a given agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>> ListingsGetListingStatisticsByAgentIdWithHttpInfoAsync(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Takes a listing offmarket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpdateOffmarketDetailsAsync(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Takes a listing offmarket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpdateOffmarketDetailsWithHttpInfoAsync(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a business listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertBusinessListingAsync(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a business listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpsertBusinessListingWithHttpInfoAsync(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a commercial listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertCommercialListingAsync(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a commercial listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpsertCommercialListingWithHttpInfoAsync(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a residential listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertResidentialListingAsync(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a residential listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpsertResidentialListingWithHttpInfoAsync(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingsV2Project</returns>
        System.Threading.Tasks.Task<ListingsV2Project> ProjectsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingsV2Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingsV2Project>> ProjectsGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Searches projects
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ListingsV2Project&gt;</returns>
        System.Threading.Tasks.Task<List<ListingsV2Project>> ProjectsSearchAsync(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Searches projects
        /// </summary>
        /// <remarks>
        /// Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </remarks>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ListingsV2Project&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ListingsV2Project>>> ProjectsSearchWithHttpInfoAsync(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApi : IListingsApiSync, IListingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListingsApi : IListingsApi
    {
        private Domain.Api.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListingsApi(String basePath)
        {
            this.Configuration = Domain.Api.V1.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.GlobalConfiguration.Instance,
                new Domain.Api.V1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListingsApi(Domain.Api.V1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V1.Client.Configuration.MergeConfigurations(
                Domain.Api.V1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ListingsApi(Domain.Api.V1.Client.ISynchronousClient client, Domain.Api.V1.Client.IAsynchronousClient asyncClient, Domain.Api.V1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Suggests listing locations The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation> ListingLocationsSearch(string terms = default(string))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>> localVarResponse = ListingLocationsSearchWithHttpInfo(terms);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Suggests listing locations The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>> ListingLocationsSearchWithHttpInfo(string terms = default(string))
        {
            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (terms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "terms", terms));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>>("/v1/listings/locations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingLocationsSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Suggests listing locations The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>> ListingLocationsSearchAsync(string terms = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>> localVarResponse = await ListingLocationsSearchWithHttpInfoAsync(terms, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Suggests listing locations The resulting suggested location can be of type \&quot;suburb\&quot; / \&quot;area\&quot; / \&quot;region\&quot;.    The &#x60;name&#x60; property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [&#x60;v1/listings/residential/_search&#x60;](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terms">Suburb / area / region prefix, or postcode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsListingLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>>> ListingLocationsSearchWithHttpInfoAsync(string terms = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (terms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "terms", terms));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>>("/v1/listings/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingLocationsSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves business listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing> ListingsDetailedBusinessSearch(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest)
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>> localVarResponse = ListingsDetailedBusinessSearchWithHttpInfo(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves business listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>> ListingsDetailedBusinessSearchWithHttpInfo(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest)
        {
            // verify the required parameter 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest' is set
            if (domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest' when calling ListingsApi->ListingsDetailedBusinessSearch");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>>("/v1/listings/business/_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsDetailedBusinessSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves business listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>> ListingsDetailedBusinessSearchAsync(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>> localVarResponse = await ListingsDetailedBusinessSearchWithHttpInfoAsync(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves business listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsBusinessListing&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>>> ListingsDetailedBusinessSearchWithHttpInfoAsync(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest' is set
            if (domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest' when calling ListingsApi->ListingsDetailedBusinessSearch");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>>("/v1/listings/business/_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsDetailedBusinessSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves commercial listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing> ListingsDetailedCommercialSearch(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest)
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>> localVarResponse = ListingsDetailedCommercialSearchWithHttpInfo(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves commercial listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>> ListingsDetailedCommercialSearchWithHttpInfo(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest)
        {
            // verify the required parameter 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest' is set
            if (domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest' when calling ListingsApi->ListingsDetailedCommercialSearch");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>>("/v1/listings/commercial/_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsDetailedCommercialSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves commercial listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>> ListingsDetailedCommercialSearchAsync(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>> localVarResponse = await ListingsDetailedCommercialSearchWithHttpInfoAsync(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves commercial listings matching the specified criteria. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsCommercialListing&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>>> ListingsDetailedCommercialSearchWithHttpInfoAsync(DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest' is set
            if (domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest' when calling ListingsApi->ListingsDetailedCommercialSearch");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>>("/v1/listings/commercial/_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsDetailedCommercialSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves residential listings matching the specified criteria. Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <returns>List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;</returns>
        public List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult> ListingsDetailedResidentialSearch(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters)
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>> localVarResponse = ListingsDetailedResidentialSearchWithHttpInfo(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves residential listings matching the specified criteria. Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <returns>ApiResponse of List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>> ListingsDetailedResidentialSearchWithHttpInfo(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters)
        {
            // verify the required parameter 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters' is set
            if (domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters' when calling ListingsApi->ListingsDetailedResidentialSearch");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>>("/v1/listings/residential/_search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsDetailedResidentialSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves residential listings matching the specified criteria. Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>> ListingsDetailedResidentialSearchAsync(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>> localVarResponse = await ListingsDetailedResidentialSearchWithHttpInfoAsync(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves residential listings matching the specified criteria. Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters">Search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>>> ListingsDetailedResidentialSearchWithHttpInfoAsync(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters' is set
            if (domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters' when calling ListingsApi->ListingsDetailedResidentialSearch");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>>("/v1/listings/residential/_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsDetailedResidentialSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <returns>DomainPublicAdapterWebApiModelsV1ListingsListing</returns>
        public DomainPublicAdapterWebApiModelsV1ListingsListing ListingsGet(int id)
        {
            Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsListing> localVarResponse = ListingsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <returns>ApiResponse of DomainPublicAdapterWebApiModelsV1ListingsListing</returns>
        public Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsListing> ListingsGetWithHttpInfo(int id)
        {
            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainPublicAdapterWebApiModelsV1ListingsListing>("/v1/listings/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPublicAdapterWebApiModelsV1ListingsListing</returns>
        public async System.Threading.Tasks.Task<DomainPublicAdapterWebApiModelsV1ListingsListing> ListingsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsListing> localVarResponse = await ListingsGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPublicAdapterWebApiModelsV1ListingsListing)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsListing>> ListingsGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainPublicAdapterWebApiModelsV1ListingsListing>("/v1/listings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns enquiries for a given listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport> ListingsGetEnquiries(int id, int? pageNumber = default(int?))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>> localVarResponse = ListingsGetEnquiriesWithHttpInfo(id, pageNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns enquiries for a given listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>> ListingsGetEnquiriesWithHttpInfo(int id, int? pageNumber = default(int?))
        {
            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>>("/v1/listings/{id}/enquiries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetEnquiries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns enquiries for a given listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>> ListingsGetEnquiriesAsync(int id, int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>> localVarResponse = await ListingsGetEnquiriesWithHttpInfoAsync(id, pageNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns enquiries for a given listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="pageNumber">Page number for paginated results (25 per page) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>>> ListingsGetEnquiriesWithHttpInfoAsync(int id, int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport>>("/v1/listings/{id}/enquiries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetEnquiries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the processing report 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <returns>DomainListingAdminServiceV1ModelListingReport</returns>
        public DomainListingAdminServiceV1ModelListingReport ListingsGetListingReport(string id)
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingReport> localVarResponse = ListingsGetListingReportWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the processing report 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingReport</returns>
        public Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingReport> ListingsGetListingReportWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'id' when calling ListingsApi->ListingsGetListingReport");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainListingAdminServiceV1ModelListingReport>("/v1/listings/processingReports/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the processing report 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingReport</returns>
        public async System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingReport> ListingsGetListingReportAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingReport> localVarResponse = await ListingsGetListingReportWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the processing report 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingReport)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingReport>> ListingsGetListingReportWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'id' when calling ListingsApi->ListingsGetListingReport");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainListingAdminServiceV1ModelListingReport>("/v1/listings/processingReports/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searches processing reports 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <returns>List&lt;DomainListingAdminServiceV1ModelListingReport&gt;</returns>
        public List<DomainListingAdminServiceV1ModelListingReport> ListingsGetListingReportByReference(int agencyId, string providerAdId)
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainListingAdminServiceV1ModelListingReport>> localVarResponse = ListingsGetListingReportByReferenceWithHttpInfo(agencyId, providerAdId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searches processing reports 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <returns>ApiResponse of List&lt;DomainListingAdminServiceV1ModelListingReport&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<DomainListingAdminServiceV1ModelListingReport>> ListingsGetListingReportByReferenceWithHttpInfo(int agencyId, string providerAdId)
        {
            // verify the required parameter 'providerAdId' is set
            if (providerAdId == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'providerAdId' when calling ListingsApi->ListingsGetListingReportByReference");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "agencyId", agencyId));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "providerAdId", providerAdId));

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainListingAdminServiceV1ModelListingReport>>("/v1/listings/processingReports", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingReportByReference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searches processing reports 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainListingAdminServiceV1ModelListingReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainListingAdminServiceV1ModelListingReport>> ListingsGetListingReportByReferenceAsync(int agencyId, string providerAdId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainListingAdminServiceV1ModelListingReport>> localVarResponse = await ListingsGetListingReportByReferenceWithHttpInfoAsync(agencyId, providerAdId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searches processing reports 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Domain agency Id</param>
        /// <param name="providerAdId">External provider advertisement identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainListingAdminServiceV1ModelListingReport&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<DomainListingAdminServiceV1ModelListingReport>>> ListingsGetListingReportByReferenceWithHttpInfoAsync(int agencyId, string providerAdId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerAdId' is set
            if (providerAdId == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'providerAdId' when calling ListingsApi->ListingsGetListingReportByReference");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "agencyId", agencyId));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "providerAdId", providerAdId));

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainListingAdminServiceV1ModelListingReport>>("/v1/listings/processingReports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingReportByReference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves listings stats for the specified listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <returns>DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport</returns>
        public DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport ListingsGetListingStatistics(int id, string timePeriod = default(string))
        {
            Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport> localVarResponse = ListingsGetListingStatisticsWithHttpInfo(id, timePeriod);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves listings stats for the specified listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <returns>ApiResponse of DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport</returns>
        public Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport> ListingsGetListingStatisticsWithHttpInfo(int id, string timePeriod = default(string))
        {
            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport>("/v1/listings/{id}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves listings stats for the specified listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport</returns>
        public async System.Threading.Tasks.Task<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport> ListingsGetListingStatisticsAsync(int id, string timePeriod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport> localVarResponse = await ListingsGetListingStatisticsWithHttpInfoAsync(id, timePeriod, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves listings stats for the specified listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport>> ListingsGetListingStatisticsWithHttpInfoAsync(int id, string timePeriod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport>("/v1/listings/{id}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves stats for the listings of a given agent 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        public List<DomainPublicAdapterWebApiModelsV1ListingsStatistics> ListingsGetListingStatisticsByAgentId(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> localVarResponse = ListingsGetListingStatisticsByAgentIdWithHttpInfo(agentId, timePeriod, statusFilter, pageNumber, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves stats for the listings of a given agent 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <returns>ApiResponse of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> ListingsGetListingStatisticsByAgentIdWithHttpInfo(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'timePeriod' is set
            if (timePeriod == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'timePeriod' when calling ListingsApi->ListingsGetListingStatisticsByAgentId");

            // verify the required parameter 'statusFilter' is set
            if (statusFilter == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'statusFilter' when calling ListingsApi->ListingsGetListingStatisticsByAgentId");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "agentId", agentId));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "statusFilter", statusFilter));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>("/v1/listings/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingStatisticsByAgentId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves stats for the listings of a given agent 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> ListingsGetListingStatisticsByAgentIdAsync(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>> localVarResponse = await ListingsGetListingStatisticsByAgentIdWithHttpInfoAsync(agentId, timePeriod, statusFilter, pageNumber, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves stats for the listings of a given agent 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="timePeriod">The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;</param>
        /// <param name="statusFilter">Listing filter</param>
        /// <param name="pageNumber">Page number for paginated results (optional)</param>
        /// <param name="pageSize">Page size for paginated results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainPublicAdapterWebApiModelsV1ListingsStatistics&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>> ListingsGetListingStatisticsByAgentIdWithHttpInfoAsync(int agentId, string timePeriod, string statusFilter, int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timePeriod' is set
            if (timePeriod == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'timePeriod' when calling ListingsApi->ListingsGetListingStatisticsByAgentId");

            // verify the required parameter 'statusFilter' is set
            if (statusFilter == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'statusFilter' when calling ListingsApi->ListingsGetListingStatisticsByAgentId");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "agentId", agentId));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "statusFilter", statusFilter));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainPublicAdapterWebApiModelsV1ListingsStatistics>>("/v1/listings/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsGetListingStatisticsByAgentId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Takes a listing offmarket 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        public DomainListingAdminServiceV1ModelListingResponse ListingsUpdateOffmarketDetails(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails)
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = ListingsUpdateOffmarketDetailsWithHttpInfo(id, domainListingAdminServiceV1ModelOffMarketDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a listing offmarket 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        public Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpdateOffmarketDetailsWithHttpInfo(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails)
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelOffMarketDetails' is set
            if (domainListingAdminServiceV1ModelOffMarketDetails == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelOffMarketDetails' when calling ListingsApi->ListingsUpdateOffmarketDetails");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = domainListingAdminServiceV1ModelOffMarketDetails;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/{id}/offmarket", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpdateOffmarketDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Takes a listing offmarket 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        public async System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpdateOffmarketDetailsAsync(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = await ListingsUpdateOffmarketDetailsWithHttpInfoAsync(id, domainListingAdminServiceV1ModelOffMarketDetails, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a listing offmarket 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing identifier</param>
        /// <param name="domainListingAdminServiceV1ModelOffMarketDetails"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpdateOffmarketDetailsWithHttpInfoAsync(int id, DomainListingAdminServiceV1ModelOffMarketDetails domainListingAdminServiceV1ModelOffMarketDetails, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelOffMarketDetails' is set
            if (domainListingAdminServiceV1ModelOffMarketDetails == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelOffMarketDetails' when calling ListingsApi->ListingsUpdateOffmarketDetails");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = domainListingAdminServiceV1ModelOffMarketDetails;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/{id}/offmarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpdateOffmarketDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a business listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        public DomainListingAdminServiceV1ModelListingResponse ListingsUpsertBusinessListing(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing)
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = ListingsUpsertBusinessListingWithHttpInfo(domainListingAdminServiceV1ModelBusinessListing);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a business listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        public Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertBusinessListingWithHttpInfo(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing)
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelBusinessListing' is set
            if (domainListingAdminServiceV1ModelBusinessListing == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelBusinessListing' when calling ListingsApi->ListingsUpsertBusinessListing");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainListingAdminServiceV1ModelBusinessListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/business", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertBusinessListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a business listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        public async System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertBusinessListingAsync(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = await ListingsUpsertBusinessListingWithHttpInfoAsync(domainListingAdminServiceV1ModelBusinessListing, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a business listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelBusinessListing">The business listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpsertBusinessListingWithHttpInfoAsync(DomainListingAdminServiceV1ModelBusinessListing domainListingAdminServiceV1ModelBusinessListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelBusinessListing' is set
            if (domainListingAdminServiceV1ModelBusinessListing == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelBusinessListing' when calling ListingsApi->ListingsUpsertBusinessListing");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainListingAdminServiceV1ModelBusinessListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/business", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertBusinessListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a commercial listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        public DomainListingAdminServiceV1ModelListingResponse ListingsUpsertCommercialListing(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing)
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = ListingsUpsertCommercialListingWithHttpInfo(domainListingAdminServiceV1ModelCommercialListing);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a commercial listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        public Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertCommercialListingWithHttpInfo(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing)
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelCommercialListing' is set
            if (domainListingAdminServiceV1ModelCommercialListing == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelCommercialListing' when calling ListingsApi->ListingsUpsertCommercialListing");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainListingAdminServiceV1ModelCommercialListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/commercial", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertCommercialListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a commercial listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        public async System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertCommercialListingAsync(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = await ListingsUpsertCommercialListingWithHttpInfoAsync(domainListingAdminServiceV1ModelCommercialListing, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a commercial listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelCommercialListing">The commercial listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpsertCommercialListingWithHttpInfoAsync(DomainListingAdminServiceV1ModelCommercialListing domainListingAdminServiceV1ModelCommercialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelCommercialListing' is set
            if (domainListingAdminServiceV1ModelCommercialListing == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelCommercialListing' when calling ListingsApi->ListingsUpsertCommercialListing");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainListingAdminServiceV1ModelCommercialListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/commercial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertCommercialListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a residential listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <returns>DomainListingAdminServiceV1ModelListingResponse</returns>
        public DomainListingAdminServiceV1ModelListingResponse ListingsUpsertResidentialListing(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing)
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = ListingsUpsertResidentialListingWithHttpInfo(domainListingAdminServiceV1ModelResidentialListing);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a residential listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <returns>ApiResponse of DomainListingAdminServiceV1ModelListingResponse</returns>
        public Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertResidentialListingWithHttpInfo(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing)
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelResidentialListing' is set
            if (domainListingAdminServiceV1ModelResidentialListing == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelResidentialListing' when calling ListingsApi->ListingsUpsertResidentialListing");

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainListingAdminServiceV1ModelResidentialListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/residential", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertResidentialListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a residential listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainListingAdminServiceV1ModelListingResponse</returns>
        public async System.Threading.Tasks.Task<DomainListingAdminServiceV1ModelListingResponse> ListingsUpsertResidentialListingAsync(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse> localVarResponse = await ListingsUpsertResidentialListingWithHttpInfoAsync(domainListingAdminServiceV1ModelResidentialListing, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a residential listing 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainListingAdminServiceV1ModelResidentialListing">The residential listing</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainListingAdminServiceV1ModelListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<DomainListingAdminServiceV1ModelListingResponse>> ListingsUpsertResidentialListingWithHttpInfoAsync(DomainListingAdminServiceV1ModelResidentialListing domainListingAdminServiceV1ModelResidentialListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainListingAdminServiceV1ModelResidentialListing' is set
            if (domainListingAdminServiceV1ModelResidentialListing == null)
                throw new Domain.Api.V1.Client.ApiException(400, "Missing required parameter 'domainListingAdminServiceV1ModelResidentialListing' when calling ListingsApi->ListingsUpsertResidentialListing");


            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = domainListingAdminServiceV1ModelResidentialListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<DomainListingAdminServiceV1ModelListingResponse>("/v1/listings/residential", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertResidentialListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of project 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <returns>ListingsV2Project</returns>
        public ListingsV2Project ProjectsGet(int id)
        {
            Domain.Api.V1.Client.ApiResponse<ListingsV2Project> localVarResponse = ProjectsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of project 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <returns>ApiResponse of ListingsV2Project</returns>
        public Domain.Api.V1.Client.ApiResponse<ListingsV2Project> ProjectsGetWithHttpInfo(int id)
        {
            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListingsV2Project>("/v1/projects/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of project 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingsV2Project</returns>
        public async System.Threading.Tasks.Task<ListingsV2Project> ProjectsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<ListingsV2Project> localVarResponse = await ProjectsGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of project 
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingsV2Project)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<ListingsV2Project>> ProjectsGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V1.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListingsV2Project>("/v1/projects/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searches projects Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <returns>List&lt;ListingsV2Project&gt;</returns>
        public List<ListingsV2Project> ProjectsSearch(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.ApiResponse<List<ListingsV2Project>> localVarResponse = ProjectsSearchWithHttpInfo(agencyId, pageNumber, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searches projects Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;ListingsV2Project&gt;</returns>
        public Domain.Api.V1.Client.ApiResponse<List<ListingsV2Project>> ProjectsSearchWithHttpInfo(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?))
        {
            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (agencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "agencyId", agencyId));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ListingsV2Project>>("/v1/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searches projects Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ListingsV2Project&gt;</returns>
        public async System.Threading.Tasks.Task<List<ListingsV2Project>> ProjectsSearchAsync(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V1.Client.ApiResponse<List<ListingsV2Project>> localVarResponse = await ProjectsSearchWithHttpInfoAsync(agencyId, pageNumber, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searches projects Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
        /// </summary>
        /// <exception cref="Domain.Api.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">Restricts to the provided agency (optional)</param>
        /// <param name="pageNumber">Page number for paginated results (optional, default to 1)</param>
        /// <param name="pageSize">Page size for paginated results (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ListingsV2Project&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V1.Client.ApiResponse<List<ListingsV2Project>>> ProjectsSearchWithHttpInfoAsync(int? agencyId = default(int?), int? pageNumber = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V1.Client.RequestOptions localVarRequestOptions = new Domain.Api.V1.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (agencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "agencyId", agencyId));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V1.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ListingsV2Project>>("/v1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
