/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// NewListingRateResponse
    /// </summary>
    [DataContract(Name = "Bookings.V2.RateForNewListing")]
    public partial class BookingsV2RateForNewListing : IEquatable<BookingsV2RateForNewListing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingsV2RateForNewListing" /> class.
        /// </summary>
        /// <param name="costExGst">Gets or Sets CostExGst.</param>
        /// <param name="costIncGst">Gets or Sets CostIncGst.</param>
        /// <param name="contractEndDate">Gets or Sets ContractEndDate.</param>
        public BookingsV2RateForNewListing(double costExGst = default(double), double costIncGst = default(double), DateTime contractEndDate = default(DateTime))
        {
            this.CostExGst = costExGst;
            this.CostIncGst = costIncGst;
            this.ContractEndDate = contractEndDate;
        }

        /// <summary>
        /// Gets or Sets CostExGst
        /// </summary>
        /// <value>Gets or Sets CostExGst</value>
        [DataMember(Name = "costExGst", EmitDefaultValue = false)]
        public double CostExGst { get; set; }

        /// <summary>
        /// Gets or Sets CostIncGst
        /// </summary>
        /// <value>Gets or Sets CostIncGst</value>
        [DataMember(Name = "costIncGst", EmitDefaultValue = false)]
        public double CostIncGst { get; set; }

        /// <summary>
        /// Gets or Sets ContractEndDate
        /// </summary>
        /// <value>Gets or Sets ContractEndDate</value>
        [DataMember(Name = "contractEndDate", EmitDefaultValue = false)]
        public DateTime ContractEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingsV2RateForNewListing {\n");
            sb.Append("  CostExGst: ").Append(CostExGst).Append("\n");
            sb.Append("  CostIncGst: ").Append(CostIncGst).Append("\n");
            sb.Append("  ContractEndDate: ").Append(ContractEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookingsV2RateForNewListing);
        }

        /// <summary>
        /// Returns true if BookingsV2RateForNewListing instances are equal
        /// </summary>
        /// <param name="input">Instance of BookingsV2RateForNewListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingsV2RateForNewListing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CostExGst == input.CostExGst ||
                    this.CostExGst.Equals(input.CostExGst)
                ) && 
                (
                    this.CostIncGst == input.CostIncGst ||
                    this.CostIncGst.Equals(input.CostIncGst)
                ) && 
                (
                    this.ContractEndDate == input.ContractEndDate ||
                    (this.ContractEndDate != null &&
                    this.ContractEndDate.Equals(input.ContractEndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CostExGst.GetHashCode();
                hashCode = hashCode * 59 + this.CostIncGst.GetHashCode();
                if (this.ContractEndDate != null)
                    hashCode = hashCode * 59 + this.ContractEndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
