/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel
    /// </summary>
    [DataContract(Name = "Domain.APMService.v2.Model.APMAPIModelsDisclaimerV2DisclaimerModel")]
    public partial class DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel : IEquatable<DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="version">version.</param>
        /// <param name="text">text.</param>
        /// <param name="imageurl">imageurl.</param>
        /// <param name="authorityname">authorityname.</param>
        public DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel(string id = default(string), string version = default(string), string text = default(string), string imageurl = default(string), string authorityname = default(string))
        {
            this.Id = id;
            this.Version = version;
            this.Text = text;
            this.Imageurl = imageurl;
            this.Authorityname = authorityname;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Imageurl
        /// </summary>
        [DataMember(Name = "imageurl", EmitDefaultValue = false)]
        public string Imageurl { get; set; }

        /// <summary>
        /// Gets or Sets Authorityname
        /// </summary>
        [DataMember(Name = "authorityname", EmitDefaultValue = false)]
        public string Authorityname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Imageurl: ").Append(Imageurl).Append("\n");
            sb.Append("  Authorityname: ").Append(Authorityname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel);
        }

        /// <summary>
        /// Returns true if DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainAPMServiceV2ModelAPMAPIModelsDisclaimerV2DisclaimerModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Imageurl == input.Imageurl ||
                    (this.Imageurl != null &&
                    this.Imageurl.Equals(input.Imageurl))
                ) && 
                (
                    this.Authorityname == input.Authorityname ||
                    (this.Authorityname != null &&
                    this.Authorityname.Equals(input.Authorityname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Imageurl != null)
                    hashCode = hashCode * 59 + this.Imageurl.GetHashCode();
                if (this.Authorityname != null)
                    hashCode = hashCode * 59 + this.Authorityname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
