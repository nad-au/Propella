/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel
    /// </summary>
    [DataContract(Name = "Domain.APMService.v2.Model.APMAPIModelsSuburbV2SeriesModel")]
    public partial class DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel : IEquatable<DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel" /> class.
        /// </summary>
        /// <param name="seriesInfo">seriesInfo.</param>
        public DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel(List<DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesInfoModel> seriesInfo = default(List<DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesInfoModel>))
        {
            this.SeriesInfo = seriesInfo;
        }

        /// <summary>
        /// Gets or Sets SeriesInfo
        /// </summary>
        [DataMember(Name = "seriesInfo", EmitDefaultValue = false)]
        public List<DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesInfoModel> SeriesInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel {\n");
            sb.Append("  SeriesInfo: ").Append(SeriesInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel);
        }

        /// <summary>
        /// Returns true if DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SeriesInfo == input.SeriesInfo ||
                    this.SeriesInfo != null &&
                    input.SeriesInfo != null &&
                    this.SeriesInfo.SequenceEqual(input.SeriesInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SeriesInfo != null)
                    hashCode = hashCode * 59 + this.SeriesInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
