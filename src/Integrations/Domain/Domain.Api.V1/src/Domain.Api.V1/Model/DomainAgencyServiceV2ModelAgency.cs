/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainAgencyServiceV2ModelAgency
    /// </summary>
    [DataContract(Name = "Domain.AgencyService.v2.Model.Agency")]
    public partial class DomainAgencyServiceV2ModelAgency : IEquatable<DomainAgencyServiceV2ModelAgency>, IValidatableObject
    {
        /// <summary>
        /// Defines AccountType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Residential for value: residential
            /// </summary>
            [EnumMember(Value = "residential")]
            Residential = 2,

            /// <summary>
            /// Enum CommercialLight for value: commercialLight
            /// </summary>
            [EnumMember(Value = "commercialLight")]
            CommercialLight = 3,

            /// <summary>
            /// Enum CommercialFull for value: commercialFull
            /// </summary>
            [EnumMember(Value = "commercialFull")]
            CommercialFull = 4,

            /// <summary>
            /// Enum Developer for value: developer
            /// </summary>
            [EnumMember(Value = "developer")]
            Developer = 5,

            /// <summary>
            /// Enum Holiday for value: holiday
            /// </summary>
            [EnumMember(Value = "holiday")]
            Holiday = 6,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 7

        }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public AccountTypeEnum? AccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainAgencyServiceV2ModelAgency" /> class.
        /// </summary>
        /// <param name="accountType">accountType.</param>
        /// <param name="profile">profile.</param>
        /// <param name="dateUpdated">dateUpdated.</param>
        /// <param name="name">name.</param>
        /// <param name="details">details.</param>
        /// <param name="id">id.</param>
        /// <param name="creId">creId.</param>
        /// <param name="agents">agents.</param>
        /// <param name="contactDetails">contactDetails.</param>
        /// <param name="homepassEnabled">homepassEnabled.</param>
        /// <param name="suburbsServed">suburbsServed.</param>
        /// <param name="subscribedToAgencyPerformanceReport">subscribedToAgencyPerformanceReport.</param>
        /// <param name="agencyOptions">agencyOptions.</param>
        /// <param name="welcomeMessage">welcomeMessage.</param>
        /// <param name="adFormat">adFormat.</param>
        /// <param name="providerAgencyId">providerAgencyId.</param>
        public DomainAgencyServiceV2ModelAgency(AccountTypeEnum? accountType = default(AccountTypeEnum?), DomainAgencyServiceV2ModelAgencyProfile profile = default(DomainAgencyServiceV2ModelAgencyProfile), DateTime dateUpdated = default(DateTime), string name = default(string), DomainAgencyServiceV2ModelAgencyDetails details = default(DomainAgencyServiceV2ModelAgencyDetails), int id = default(int), int creId = default(int), List<DomainAgencyServiceV2ModelAgentInAgencyList> agents = default(List<DomainAgencyServiceV2ModelAgentInAgencyList>), DomainAgencyServiceV2ModelContactDetails contactDetails = default(DomainAgencyServiceV2ModelContactDetails), bool homepassEnabled = default(bool), string suburbsServed = default(string), bool subscribedToAgencyPerformanceReport = default(bool), DomainAgencyServiceV2ModelAgencyOptions agencyOptions = default(DomainAgencyServiceV2ModelAgencyOptions), string welcomeMessage = default(string), string adFormat = default(string), string providerAgencyId = default(string))
        {
            this.AccountType = accountType;
            this.Profile = profile;
            this.DateUpdated = dateUpdated;
            this.Name = name;
            this.Details = details;
            this.Id = id;
            this.CreId = creId;
            this.Agents = agents;
            this.ContactDetails = contactDetails;
            this.HomepassEnabled = homepassEnabled;
            this.SuburbsServed = suburbsServed;
            this.SubscribedToAgencyPerformanceReport = subscribedToAgencyPerformanceReport;
            this.AgencyOptions = agencyOptions;
            this.WelcomeMessage = welcomeMessage;
            this.AdFormat = adFormat;
            this.ProviderAgencyId = providerAgencyId;
        }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public DomainAgencyServiceV2ModelAgencyProfile Profile { get; set; }

        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public DateTime DateUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public DomainAgencyServiceV2ModelAgencyDetails Details { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets CreId
        /// </summary>
        [DataMember(Name = "creId", EmitDefaultValue = false)]
        public int CreId { get; set; }

        /// <summary>
        /// Gets or Sets Agents
        /// </summary>
        [DataMember(Name = "agents", EmitDefaultValue = false)]
        public List<DomainAgencyServiceV2ModelAgentInAgencyList> Agents { get; set; }

        /// <summary>
        /// Gets or Sets ContactDetails
        /// </summary>
        [DataMember(Name = "contactDetails", EmitDefaultValue = false)]
        public DomainAgencyServiceV2ModelContactDetails ContactDetails { get; set; }

        /// <summary>
        /// Gets or Sets HomepassEnabled
        /// </summary>
        [DataMember(Name = "homepassEnabled", EmitDefaultValue = false)]
        public bool HomepassEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SuburbsServed
        /// </summary>
        [DataMember(Name = "suburbsServed", EmitDefaultValue = false)]
        public string SuburbsServed { get; set; }

        /// <summary>
        /// Gets or Sets SubscribedToAgencyPerformanceReport
        /// </summary>
        [DataMember(Name = "subscribedToAgencyPerformanceReport", EmitDefaultValue = false)]
        public bool SubscribedToAgencyPerformanceReport { get; set; }

        /// <summary>
        /// Gets or Sets AgencyOptions
        /// </summary>
        [DataMember(Name = "agencyOptions", EmitDefaultValue = false)]
        public DomainAgencyServiceV2ModelAgencyOptions AgencyOptions { get; set; }

        /// <summary>
        /// Gets or Sets WelcomeMessage
        /// </summary>
        [DataMember(Name = "welcomeMessage", EmitDefaultValue = false)]
        public string WelcomeMessage { get; set; }

        /// <summary>
        /// Gets or Sets AdFormat
        /// </summary>
        [DataMember(Name = "adFormat", EmitDefaultValue = false)]
        public string AdFormat { get; set; }

        /// <summary>
        /// Gets or Sets ProviderAgencyId
        /// </summary>
        [DataMember(Name = "providerAgencyId", EmitDefaultValue = false)]
        public string ProviderAgencyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainAgencyServiceV2ModelAgency {\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreId: ").Append(CreId).Append("\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  ContactDetails: ").Append(ContactDetails).Append("\n");
            sb.Append("  HomepassEnabled: ").Append(HomepassEnabled).Append("\n");
            sb.Append("  SuburbsServed: ").Append(SuburbsServed).Append("\n");
            sb.Append("  SubscribedToAgencyPerformanceReport: ").Append(SubscribedToAgencyPerformanceReport).Append("\n");
            sb.Append("  AgencyOptions: ").Append(AgencyOptions).Append("\n");
            sb.Append("  WelcomeMessage: ").Append(WelcomeMessage).Append("\n");
            sb.Append("  AdFormat: ").Append(AdFormat).Append("\n");
            sb.Append("  ProviderAgencyId: ").Append(ProviderAgencyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainAgencyServiceV2ModelAgency);
        }

        /// <summary>
        /// Returns true if DomainAgencyServiceV2ModelAgency instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainAgencyServiceV2ModelAgency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainAgencyServiceV2ModelAgency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType.Equals(input.AccountType)
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CreId == input.CreId ||
                    this.CreId.Equals(input.CreId)
                ) && 
                (
                    this.Agents == input.Agents ||
                    this.Agents != null &&
                    input.Agents != null &&
                    this.Agents.SequenceEqual(input.Agents)
                ) && 
                (
                    this.ContactDetails == input.ContactDetails ||
                    (this.ContactDetails != null &&
                    this.ContactDetails.Equals(input.ContactDetails))
                ) && 
                (
                    this.HomepassEnabled == input.HomepassEnabled ||
                    this.HomepassEnabled.Equals(input.HomepassEnabled)
                ) && 
                (
                    this.SuburbsServed == input.SuburbsServed ||
                    (this.SuburbsServed != null &&
                    this.SuburbsServed.Equals(input.SuburbsServed))
                ) && 
                (
                    this.SubscribedToAgencyPerformanceReport == input.SubscribedToAgencyPerformanceReport ||
                    this.SubscribedToAgencyPerformanceReport.Equals(input.SubscribedToAgencyPerformanceReport)
                ) && 
                (
                    this.AgencyOptions == input.AgencyOptions ||
                    (this.AgencyOptions != null &&
                    this.AgencyOptions.Equals(input.AgencyOptions))
                ) && 
                (
                    this.WelcomeMessage == input.WelcomeMessage ||
                    (this.WelcomeMessage != null &&
                    this.WelcomeMessage.Equals(input.WelcomeMessage))
                ) && 
                (
                    this.AdFormat == input.AdFormat ||
                    (this.AdFormat != null &&
                    this.AdFormat.Equals(input.AdFormat))
                ) && 
                (
                    this.ProviderAgencyId == input.ProviderAgencyId ||
                    (this.ProviderAgencyId != null &&
                    this.ProviderAgencyId.Equals(input.ProviderAgencyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.DateUpdated != null)
                    hashCode = hashCode * 59 + this.DateUpdated.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.CreId.GetHashCode();
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.ContactDetails != null)
                    hashCode = hashCode * 59 + this.ContactDetails.GetHashCode();
                hashCode = hashCode * 59 + this.HomepassEnabled.GetHashCode();
                if (this.SuburbsServed != null)
                    hashCode = hashCode * 59 + this.SuburbsServed.GetHashCode();
                hashCode = hashCode * 59 + this.SubscribedToAgencyPerformanceReport.GetHashCode();
                if (this.AgencyOptions != null)
                    hashCode = hashCode * 59 + this.AgencyOptions.GetHashCode();
                if (this.WelcomeMessage != null)
                    hashCode = hashCode * 59 + this.WelcomeMessage.GetHashCode();
                if (this.AdFormat != null)
                    hashCode = hashCode * 59 + this.AdFormat.GetHashCode();
                if (this.ProviderAgencyId != null)
                    hashCode = hashCode * 59 + this.ProviderAgencyId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
