/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Business Listing
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.BusinessListing")]
    public partial class DomainListingAdminServiceV1ModelBusinessListing : IEquatable<DomainListingAdminServiceV1ModelBusinessListing>, IValidatableObject
    {
        /// <summary>
        /// Sale or Rent
        /// </summary>
        /// <value>Sale or Rent</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListingActionEnum
        {
            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            [EnumMember(Value = "sale")]
            Sale = 1,

            /// <summary>
            /// Enum Rent for value: rent
            /// </summary>
            [EnumMember(Value = "rent")]
            Rent = 2,

            /// <summary>
            /// Enum SaleAndLease for value: saleAndLease
            /// </summary>
            [EnumMember(Value = "saleAndLease")]
            SaleAndLease = 3

        }

        /// <summary>
        /// Sale or Rent
        /// </summary>
        /// <value>Sale or Rent</value>
        [DataMember(Name = "listingAction", EmitDefaultValue = false)]
        public ListingActionEnum? ListingAction { get; set; }
        /// <summary>
        /// Indicates the listing preferred contact method. Default by both phone and email if not provided.
        /// </summary>
        /// <value>Indicates the listing preferred contact method. Default by both phone and email if not provided.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContactPreferenceEnum
        {
            /// <summary>
            /// Enum ByPhone for value: byPhone
            /// </summary>
            [EnumMember(Value = "byPhone")]
            ByPhone = 1

        }

        /// <summary>
        /// Indicates the listing preferred contact method. Default by both phone and email if not provided.
        /// </summary>
        /// <value>Indicates the listing preferred contact method. Default by both phone and email if not provided.</value>
        [DataMember(Name = "contactPreference", EmitDefaultValue = false)]
        public ContactPreferenceEnum? ContactPreference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelBusinessListing" /> class.
        /// </summary>
        /// <param name="listingAction">Sale or Rent.</param>
        /// <param name="contactPreference">Indicates the listing preferred contact method. Default by both phone and email if not provided..</param>
        /// <param name="underOfferOrContract">Set for Sale listings only.</param>
        /// <param name="nabers">The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au.</param>
        /// <param name="propertyDetails">propertyDetails.</param>
        /// <param name="leaseHoldDetails">leaseHoldDetails.</param>
        /// <param name="saleInfo">saleInfo.</param>
        /// <param name="freeholdCommercialAdId">The ad id of the commercial property with a freehold that the business belongs to.   Leasehold and freehold are mutually exclusive properties, only specify one.</param>
        /// <param name="price">price.</param>
        /// <param name="domainAdId">Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers..</param>
        /// <param name="domainAgencyID">The Domain Agency Id number.</param>
        /// <param name="providerAdId">External Advertisement Id of up to 50 characters will be stored.&amp;lt;br /&amp;gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&amp;lt;br /&amp;gt;  This value is case-insensitive (meaning AAAA will update aaaa)..</param>
        /// <param name="features">Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels.</param>
        /// <param name="description">Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;amp;lt;br /&amp;amp;gt;, &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;, &amp;amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1.</param>
        /// <param name="summary">&#39;Headline&#39; Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters..</param>
        /// <param name="inspectionDetails">inspectionDetails.</param>
        /// <param name="media">Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters..</param>
        /// <param name="contacts">Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found..</param>
        /// <param name="otherEnquiryEmail">Sets an additional Email Address to which enquiries on the Listing will be sent.</param>
        /// <param name="receiveEmailsToDefaultAddress">Send email enquiries to the default address for this listing type.</param>
        /// <param name="isRural">True if the property is rural.</param>
        /// <param name="supplementary">Rural attributes    *Improvements* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    &#x60;description&#x60; (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    &#x60;description&#x60; (string, optional): description of the homestead and construction, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;area&#x60; (decimal, optional): homestead area in square metres.    Available &#x60;types&#x60; (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    &#x60;description&#x60; (string, optional): water comments, maximum 250 characters.    Available &#x60;types&#x60; (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    &#x60;description&#x60; (string, optional): description of the crops, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;croppedAnnually&#x60; (decimal, optional): average annual area cropped in hectares.  * &#x60;fallowAnnually&#x60; (decimal, optional): average annual fallow area in hectares.  * &#x60;pastures&#x60; (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    &#x60;description&#x60; (string, optional): additional comments, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;capacity&#x60; (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    &#x60;description&#x60; (string, optional): description of plant and machinery included in sale, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;livestock&#x60; (string, optional): description of livestock included in sale, maximum 250 characters.  * &#x60;crop&#x60; (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    &#x60;description&#x60; (string, optional): irrigation comments, maximum 250 characters    &#x60;metadata&#x60; (optional)  * &#x60;rainfall&#x60; (decimal, optional): annual rainfall in millimetres..</param>
        public DomainListingAdminServiceV1ModelBusinessListing(ListingActionEnum? listingAction = default(ListingActionEnum?), ContactPreferenceEnum? contactPreference = default(ContactPreferenceEnum?), bool underOfferOrContract = default(bool), double nabers = default(double), DomainListingAdminServiceV1ModelBusinessProperty propertyDetails = default(DomainListingAdminServiceV1ModelBusinessProperty), DomainListingAdminServiceV1ModelLeaseHoldDetail leaseHoldDetails = default(DomainListingAdminServiceV1ModelLeaseHoldDetail), DomainListingAdminServiceV1ModelSaleInfo saleInfo = default(DomainListingAdminServiceV1ModelSaleInfo), int freeholdCommercialAdId = default(int), DomainListingAdminServiceV1ModelPrice price = default(DomainListingAdminServiceV1ModelPrice), int domainAdId = default(int), int domainAgencyID = default(int), string providerAdId = default(string), string features = default(string), string description = default(string), string summary = default(string), DomainListingAdminServiceV1ModelInspectionDetails inspectionDetails = default(DomainListingAdminServiceV1ModelInspectionDetails), List<DomainListingAdminServiceV1ModelPropertyMedia> media = default(List<DomainListingAdminServiceV1ModelPropertyMedia>), List<DomainListingAdminServiceV1ModelContact> contacts = default(List<DomainListingAdminServiceV1ModelContact>), string otherEnquiryEmail = default(string), bool receiveEmailsToDefaultAddress = default(bool), bool isRural = default(bool), List<DomainListingAdminServiceV1ModelListingSupplementary> supplementary = default(List<DomainListingAdminServiceV1ModelListingSupplementary>))
        {
            this.ListingAction = listingAction;
            this.ContactPreference = contactPreference;
            this.UnderOfferOrContract = underOfferOrContract;
            this.Nabers = nabers;
            this.PropertyDetails = propertyDetails;
            this.LeaseHoldDetails = leaseHoldDetails;
            this.SaleInfo = saleInfo;
            this.FreeholdCommercialAdId = freeholdCommercialAdId;
            this.Price = price;
            this.DomainAdId = domainAdId;
            this.DomainAgencyID = domainAgencyID;
            this.ProviderAdId = providerAdId;
            this.Features = features;
            this.Description = description;
            this.Summary = summary;
            this.InspectionDetails = inspectionDetails;
            this.Media = media;
            this.Contacts = contacts;
            this.OtherEnquiryEmail = otherEnquiryEmail;
            this.ReceiveEmailsToDefaultAddress = receiveEmailsToDefaultAddress;
            this.IsRural = isRural;
            this.Supplementary = supplementary;
        }

        /// <summary>
        /// Set for Sale listings only
        /// </summary>
        /// <value>Set for Sale listings only</value>
        [DataMember(Name = "underOfferOrContract", EmitDefaultValue = false)]
        public bool UnderOfferOrContract { get; set; }

        /// <summary>
        /// The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au
        /// </summary>
        /// <value>The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au</value>
        [DataMember(Name = "nabers", EmitDefaultValue = false)]
        public double Nabers { get; set; }

        /// <summary>
        /// Gets or Sets PropertyDetails
        /// </summary>
        [DataMember(Name = "propertyDetails", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelBusinessProperty PropertyDetails { get; set; }

        /// <summary>
        /// Gets or Sets LeaseHoldDetails
        /// </summary>
        [DataMember(Name = "leaseHoldDetails", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelLeaseHoldDetail LeaseHoldDetails { get; set; }

        /// <summary>
        /// Gets or Sets SaleInfo
        /// </summary>
        [DataMember(Name = "saleInfo", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelSaleInfo SaleInfo { get; set; }

        /// <summary>
        /// The ad id of the commercial property with a freehold that the business belongs to.   Leasehold and freehold are mutually exclusive properties, only specify one
        /// </summary>
        /// <value>The ad id of the commercial property with a freehold that the business belongs to.   Leasehold and freehold are mutually exclusive properties, only specify one</value>
        [DataMember(Name = "freeholdCommercialAdId", EmitDefaultValue = false)]
        public int FreeholdCommercialAdId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelPrice Price { get; set; }

        /// <summary>
        /// Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.
        /// </summary>
        /// <value>Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.</value>
        [DataMember(Name = "domainAdId", EmitDefaultValue = false)]
        public int DomainAdId { get; set; }

        /// <summary>
        /// The Domain Agency Id number
        /// </summary>
        /// <value>The Domain Agency Id number</value>
        [DataMember(Name = "domainAgencyID", EmitDefaultValue = false)]
        public int DomainAgencyID { get; set; }

        /// <summary>
        /// External Advertisement Id of up to 50 characters will be stored.&amp;lt;br /&amp;gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&amp;lt;br /&amp;gt;  This value is case-insensitive (meaning AAAA will update aaaa).
        /// </summary>
        /// <value>External Advertisement Id of up to 50 characters will be stored.&amp;lt;br /&amp;gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&amp;lt;br /&amp;gt;  This value is case-insensitive (meaning AAAA will update aaaa).</value>
        [DataMember(Name = "providerAdId", EmitDefaultValue = false)]
        public string ProviderAdId { get; set; }

        /// <summary>
        /// Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels
        /// </summary>
        /// <value>Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels</value>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public string Features { get; set; }

        /// <summary>
        /// Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;amp;lt;br /&amp;amp;gt;, &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;, &amp;amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
        /// </summary>
        /// <value>Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;amp;lt;br /&amp;amp;gt;, &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;, &amp;amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// &#39;Headline&#39; Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
        /// </summary>
        /// <value>&#39;Headline&#39; Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets InspectionDetails
        /// </summary>
        [DataMember(Name = "inspectionDetails", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelInspectionDetails InspectionDetails { get; set; }

        /// <summary>
        /// Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.
        /// </summary>
        /// <value>Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.</value>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelPropertyMedia> Media { get; set; }

        /// <summary>
        /// Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
        /// </summary>
        /// <value>Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.</value>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelContact> Contacts { get; set; }

        /// <summary>
        /// Sets an additional Email Address to which enquiries on the Listing will be sent
        /// </summary>
        /// <value>Sets an additional Email Address to which enquiries on the Listing will be sent</value>
        [DataMember(Name = "otherEnquiryEmail", EmitDefaultValue = false)]
        public string OtherEnquiryEmail { get; set; }

        /// <summary>
        /// Send email enquiries to the default address for this listing type
        /// </summary>
        /// <value>Send email enquiries to the default address for this listing type</value>
        [DataMember(Name = "receiveEmailsToDefaultAddress", EmitDefaultValue = false)]
        public bool ReceiveEmailsToDefaultAddress { get; set; }

        /// <summary>
        /// True if the property is rural
        /// </summary>
        /// <value>True if the property is rural</value>
        [DataMember(Name = "isRural", EmitDefaultValue = false)]
        public bool IsRural { get; set; }

        /// <summary>
        /// Rural attributes    *Improvements* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    &#x60;description&#x60; (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    &#x60;description&#x60; (string, optional): description of the homestead and construction, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;area&#x60; (decimal, optional): homestead area in square metres.    Available &#x60;types&#x60; (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    &#x60;description&#x60; (string, optional): water comments, maximum 250 characters.    Available &#x60;types&#x60; (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    &#x60;description&#x60; (string, optional): description of the crops, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;croppedAnnually&#x60; (decimal, optional): average annual area cropped in hectares.  * &#x60;fallowAnnually&#x60; (decimal, optional): average annual fallow area in hectares.  * &#x60;pastures&#x60; (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    &#x60;description&#x60; (string, optional): additional comments, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;capacity&#x60; (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    &#x60;description&#x60; (string, optional): description of plant and machinery included in sale, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;livestock&#x60; (string, optional): description of livestock included in sale, maximum 250 characters.  * &#x60;crop&#x60; (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    &#x60;description&#x60; (string, optional): irrigation comments, maximum 250 characters    &#x60;metadata&#x60; (optional)  * &#x60;rainfall&#x60; (decimal, optional): annual rainfall in millimetres.
        /// </summary>
        /// <value>Rural attributes    *Improvements* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    &#x60;description&#x60; (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    &#x60;description&#x60; (string, optional): description of the homestead and construction, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;area&#x60; (decimal, optional): homestead area in square metres.    Available &#x60;types&#x60; (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    &#x60;description&#x60; (string, optional): water comments, maximum 250 characters.    Available &#x60;types&#x60; (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    &#x60;description&#x60; (string, optional): description of the crops, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;croppedAnnually&#x60; (decimal, optional): average annual area cropped in hectares.  * &#x60;fallowAnnually&#x60; (decimal, optional): average annual fallow area in hectares.  * &#x60;pastures&#x60; (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    &#x60;description&#x60; (string, optional): additional comments, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;capacity&#x60; (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    &#x60;description&#x60; (string, optional): description of plant and machinery included in sale, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;livestock&#x60; (string, optional): description of livestock included in sale, maximum 250 characters.  * &#x60;crop&#x60; (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    &#x60;description&#x60; (string, optional): irrigation comments, maximum 250 characters    &#x60;metadata&#x60; (optional)  * &#x60;rainfall&#x60; (decimal, optional): annual rainfall in millimetres.</value>
        [DataMember(Name = "supplementary", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelListingSupplementary> Supplementary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelBusinessListing {\n");
            sb.Append("  ListingAction: ").Append(ListingAction).Append("\n");
            sb.Append("  ContactPreference: ").Append(ContactPreference).Append("\n");
            sb.Append("  UnderOfferOrContract: ").Append(UnderOfferOrContract).Append("\n");
            sb.Append("  Nabers: ").Append(Nabers).Append("\n");
            sb.Append("  PropertyDetails: ").Append(PropertyDetails).Append("\n");
            sb.Append("  LeaseHoldDetails: ").Append(LeaseHoldDetails).Append("\n");
            sb.Append("  SaleInfo: ").Append(SaleInfo).Append("\n");
            sb.Append("  FreeholdCommercialAdId: ").Append(FreeholdCommercialAdId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DomainAdId: ").Append(DomainAdId).Append("\n");
            sb.Append("  DomainAgencyID: ").Append(DomainAgencyID).Append("\n");
            sb.Append("  ProviderAdId: ").Append(ProviderAdId).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  InspectionDetails: ").Append(InspectionDetails).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  OtherEnquiryEmail: ").Append(OtherEnquiryEmail).Append("\n");
            sb.Append("  ReceiveEmailsToDefaultAddress: ").Append(ReceiveEmailsToDefaultAddress).Append("\n");
            sb.Append("  IsRural: ").Append(IsRural).Append("\n");
            sb.Append("  Supplementary: ").Append(Supplementary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelBusinessListing);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelBusinessListing instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelBusinessListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelBusinessListing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListingAction == input.ListingAction ||
                    this.ListingAction.Equals(input.ListingAction)
                ) && 
                (
                    this.ContactPreference == input.ContactPreference ||
                    this.ContactPreference.Equals(input.ContactPreference)
                ) && 
                (
                    this.UnderOfferOrContract == input.UnderOfferOrContract ||
                    this.UnderOfferOrContract.Equals(input.UnderOfferOrContract)
                ) && 
                (
                    this.Nabers == input.Nabers ||
                    this.Nabers.Equals(input.Nabers)
                ) && 
                (
                    this.PropertyDetails == input.PropertyDetails ||
                    (this.PropertyDetails != null &&
                    this.PropertyDetails.Equals(input.PropertyDetails))
                ) && 
                (
                    this.LeaseHoldDetails == input.LeaseHoldDetails ||
                    (this.LeaseHoldDetails != null &&
                    this.LeaseHoldDetails.Equals(input.LeaseHoldDetails))
                ) && 
                (
                    this.SaleInfo == input.SaleInfo ||
                    (this.SaleInfo != null &&
                    this.SaleInfo.Equals(input.SaleInfo))
                ) && 
                (
                    this.FreeholdCommercialAdId == input.FreeholdCommercialAdId ||
                    this.FreeholdCommercialAdId.Equals(input.FreeholdCommercialAdId)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.DomainAdId == input.DomainAdId ||
                    this.DomainAdId.Equals(input.DomainAdId)
                ) && 
                (
                    this.DomainAgencyID == input.DomainAgencyID ||
                    this.DomainAgencyID.Equals(input.DomainAgencyID)
                ) && 
                (
                    this.ProviderAdId == input.ProviderAdId ||
                    (this.ProviderAdId != null &&
                    this.ProviderAdId.Equals(input.ProviderAdId))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.InspectionDetails == input.InspectionDetails ||
                    (this.InspectionDetails != null &&
                    this.InspectionDetails.Equals(input.InspectionDetails))
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.OtherEnquiryEmail == input.OtherEnquiryEmail ||
                    (this.OtherEnquiryEmail != null &&
                    this.OtherEnquiryEmail.Equals(input.OtherEnquiryEmail))
                ) && 
                (
                    this.ReceiveEmailsToDefaultAddress == input.ReceiveEmailsToDefaultAddress ||
                    this.ReceiveEmailsToDefaultAddress.Equals(input.ReceiveEmailsToDefaultAddress)
                ) && 
                (
                    this.IsRural == input.IsRural ||
                    this.IsRural.Equals(input.IsRural)
                ) && 
                (
                    this.Supplementary == input.Supplementary ||
                    this.Supplementary != null &&
                    input.Supplementary != null &&
                    this.Supplementary.SequenceEqual(input.Supplementary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ListingAction.GetHashCode();
                hashCode = hashCode * 59 + this.ContactPreference.GetHashCode();
                hashCode = hashCode * 59 + this.UnderOfferOrContract.GetHashCode();
                hashCode = hashCode * 59 + this.Nabers.GetHashCode();
                if (this.PropertyDetails != null)
                    hashCode = hashCode * 59 + this.PropertyDetails.GetHashCode();
                if (this.LeaseHoldDetails != null)
                    hashCode = hashCode * 59 + this.LeaseHoldDetails.GetHashCode();
                if (this.SaleInfo != null)
                    hashCode = hashCode * 59 + this.SaleInfo.GetHashCode();
                hashCode = hashCode * 59 + this.FreeholdCommercialAdId.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.DomainAdId.GetHashCode();
                hashCode = hashCode * 59 + this.DomainAgencyID.GetHashCode();
                if (this.ProviderAdId != null)
                    hashCode = hashCode * 59 + this.ProviderAdId.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.InspectionDetails != null)
                    hashCode = hashCode * 59 + this.InspectionDetails.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.OtherEnquiryEmail != null)
                    hashCode = hashCode * 59 + this.OtherEnquiryEmail.GetHashCode();
                hashCode = hashCode * 59 + this.ReceiveEmailsToDefaultAddress.GetHashCode();
                hashCode = hashCode * 59 + this.IsRural.GetHashCode();
                if (this.Supplementary != null)
                    hashCode = hashCode * 59 + this.Supplementary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
