/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Commercial Auction Details
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.CommercialAuction")]
    public partial class DomainListingAdminServiceV1ModelCommercialAuction : IEquatable<DomainListingAdminServiceV1ModelCommercialAuction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelCommercialAuction" /> class.
        /// </summary>
        /// <param name="auctionTerms">Terms for the auctions, up to 200 characters. Example: \\\&quot;10% deposit, balance 60 days\\\&quot;.</param>
        /// <param name="dateTime">Date of the auction. format: yyyy-MM-ddTHH:mm:ss.</param>
        /// <param name="location">Optional. Venue for the Auction. String max 100 characters. If the Location is omitted, or included but empty, the Venue will default to \\\&quot;On Site\\\&quot;..</param>
        /// <param name="url">Optional on-line auction URL. Must be a valid URL and maximum 255 characters. If an empty string is received, the property will be re-set..</param>
        public DomainListingAdminServiceV1ModelCommercialAuction(string auctionTerms = default(string), DateTime dateTime = default(DateTime), string location = default(string), string url = default(string))
        {
            this.AuctionTerms = auctionTerms;
            this.DateTime = dateTime;
            this.Location = location;
            this.Url = url;
        }

        /// <summary>
        /// Terms for the auctions, up to 200 characters. Example: \\\&quot;10% deposit, balance 60 days\\\&quot;
        /// </summary>
        /// <value>Terms for the auctions, up to 200 characters. Example: \\\&quot;10% deposit, balance 60 days\\\&quot;</value>
        [DataMember(Name = "auctionTerms", EmitDefaultValue = false)]
        public string AuctionTerms { get; set; }

        /// <summary>
        /// Date of the auction. format: yyyy-MM-ddTHH:mm:ss
        /// </summary>
        /// <value>Date of the auction. format: yyyy-MM-ddTHH:mm:ss</value>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Optional. Venue for the Auction. String max 100 characters. If the Location is omitted, or included but empty, the Venue will default to \\\&quot;On Site\\\&quot;.
        /// </summary>
        /// <value>Optional. Venue for the Auction. String max 100 characters. If the Location is omitted, or included but empty, the Venue will default to \\\&quot;On Site\\\&quot;.</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Optional on-line auction URL. Must be a valid URL and maximum 255 characters. If an empty string is received, the property will be re-set.
        /// </summary>
        /// <value>Optional on-line auction URL. Must be a valid URL and maximum 255 characters. If an empty string is received, the property will be re-set.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelCommercialAuction {\n");
            sb.Append("  AuctionTerms: ").Append(AuctionTerms).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelCommercialAuction);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelCommercialAuction instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelCommercialAuction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelCommercialAuction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuctionTerms == input.AuctionTerms ||
                    (this.AuctionTerms != null &&
                    this.AuctionTerms.Equals(input.AuctionTerms))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuctionTerms != null)
                    hashCode = hashCode * 59 + this.AuctionTerms.GetHashCode();
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
