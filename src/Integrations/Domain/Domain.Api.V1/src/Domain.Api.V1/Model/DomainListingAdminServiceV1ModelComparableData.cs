/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Information regarding past comparable   property sales that influenced the setting of teh estimationPrice
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.ComparableData")]
    public partial class DomainListingAdminServiceV1ModelComparableData : IEquatable<DomainListingAdminServiceV1ModelComparableData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelComparableData" /> class.
        /// </summary>
        /// <param name="comparableProperty">To be comparable, property must be Of a similar standard or condition to the property for sale  And Sold in the last six months and be within two kilometres of the property for sale (if the property for sale is in the Melbourne metropolitan area)  Or Sold in the last 18 months and be within five kilometres of the property for sale (if the property for sale is outside the Melbourne metropolitan area)..</param>
        /// <param name="declarationText">Text description should be provided   If you reasonably believe that there are less than three comparable sales within the prescribed period outlined above  for ComparableProperty {Domain.Listing.Admin.Model.Entities.ComparableData.ComparableProperty}  Required when no past sale property data   was provided.</param>
        public DomainListingAdminServiceV1ModelComparableData(List<DomainListingAdminServiceV1ModelPastSaleData> comparableProperty = default(List<DomainListingAdminServiceV1ModelPastSaleData>), string declarationText = default(string))
        {
            this.ComparableProperty = comparableProperty;
            this.DeclarationText = declarationText;
        }

        /// <summary>
        /// To be comparable, property must be Of a similar standard or condition to the property for sale  And Sold in the last six months and be within two kilometres of the property for sale (if the property for sale is in the Melbourne metropolitan area)  Or Sold in the last 18 months and be within five kilometres of the property for sale (if the property for sale is outside the Melbourne metropolitan area).
        /// </summary>
        /// <value>To be comparable, property must be Of a similar standard or condition to the property for sale  And Sold in the last six months and be within two kilometres of the property for sale (if the property for sale is in the Melbourne metropolitan area)  Or Sold in the last 18 months and be within five kilometres of the property for sale (if the property for sale is outside the Melbourne metropolitan area).</value>
        [DataMember(Name = "comparableProperty", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelPastSaleData> ComparableProperty { get; set; }

        /// <summary>
        /// Text description should be provided   If you reasonably believe that there are less than three comparable sales within the prescribed period outlined above  for ComparableProperty {Domain.Listing.Admin.Model.Entities.ComparableData.ComparableProperty}  Required when no past sale property data   was provided
        /// </summary>
        /// <value>Text description should be provided   If you reasonably believe that there are less than three comparable sales within the prescribed period outlined above  for ComparableProperty {Domain.Listing.Admin.Model.Entities.ComparableData.ComparableProperty}  Required when no past sale property data   was provided</value>
        [DataMember(Name = "declarationText", EmitDefaultValue = false)]
        public string DeclarationText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelComparableData {\n");
            sb.Append("  ComparableProperty: ").Append(ComparableProperty).Append("\n");
            sb.Append("  DeclarationText: ").Append(DeclarationText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelComparableData);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelComparableData instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelComparableData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelComparableData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComparableProperty == input.ComparableProperty ||
                    this.ComparableProperty != null &&
                    input.ComparableProperty != null &&
                    this.ComparableProperty.SequenceEqual(input.ComparableProperty)
                ) && 
                (
                    this.DeclarationText == input.DeclarationText ||
                    (this.DeclarationText != null &&
                    this.DeclarationText.Equals(input.DeclarationText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComparableProperty != null)
                    hashCode = hashCode * 59 + this.ComparableProperty.GetHashCode();
                if (this.DeclarationText != null)
                    hashCode = hashCode * 59 + this.DeclarationText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
