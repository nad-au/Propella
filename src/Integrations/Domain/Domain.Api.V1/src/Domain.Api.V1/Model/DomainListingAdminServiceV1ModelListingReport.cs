/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Represent current listing status and aggregation of status messages
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.ListingReport")]
    public partial class DomainListingAdminServiceV1ModelListingReport : IEquatable<DomainListingAdminServiceV1ModelListingReport>, IValidatableObject
    {
        /// <summary>
        /// Status of listing been processed  * Queued - We received request  * Processing - Request been processed  * Processed - Successful processed request  * Failed - Processing failed  * Error - Individual errors encountered
        /// </summary>
        /// <value>Status of listing been processed  * Queued - We received request  * Processing - Request been processed  * Processed - Successful processed request  * Failed - Processing failed  * Error - Individual errors encountered</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessStatusEnum
        {
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 2,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 3,

            /// <summary>
            /// Enum Searchable for value: searchable
            /// </summary>
            [EnumMember(Value = "searchable")]
            Searchable = 4,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 6

        }

        /// <summary>
        /// Status of listing been processed  * Queued - We received request  * Processing - Request been processed  * Processed - Successful processed request  * Failed - Processing failed  * Error - Individual errors encountered
        /// </summary>
        /// <value>Status of listing been processed  * Queued - We received request  * Processing - Request been processed  * Processed - Successful processed request  * Failed - Processing failed  * Error - Individual errors encountered</value>
        [DataMember(Name = "processStatus", EmitDefaultValue = false)]
        public ProcessStatusEnum? ProcessStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelListingReport" /> class.
        /// </summary>
        /// <param name="processStatus">Status of listing been processed  * Queued - We received request  * Processing - Request been processed  * Processed - Successful processed request  * Failed - Processing failed  * Error - Individual errors encountered.</param>
        /// <param name="agencyId">AgencyId from Domain.</param>
        /// <param name="providerId">ProviderId for the agency.</param>
        /// <param name="providerAdId">Listing identifier provided by CRM.</param>
        /// <param name="adId">Advertisement Id from domain.</param>
        /// <param name="qualityScore">Quality score of the listing, based on data completeness.</param>
        /// <param name="events">All Events associated with this processing request.</param>
        /// <param name="versions">version list.</param>
        public DomainListingAdminServiceV1ModelListingReport(ProcessStatusEnum? processStatus = default(ProcessStatusEnum?), long agencyId = default(long), string providerId = default(string), string providerAdId = default(string), List<long> adId = default(List<long>), int qualityScore = default(int), List<DomainListingAdminServiceV1ModelModelEvent> events = default(List<DomainListingAdminServiceV1ModelModelEvent>), List<DomainListingAdminServiceV1ModelReportVersion> versions = default(List<DomainListingAdminServiceV1ModelReportVersion>))
        {
            this.ProcessStatus = processStatus;
            this.AgencyId = agencyId;
            this.ProviderId = providerId;
            this.ProviderAdId = providerAdId;
            this.AdId = adId;
            this.QualityScore = qualityScore;
            this.Events = events;
            this.Versions = versions;
        }

        /// <summary>
        /// AgencyId from Domain
        /// </summary>
        /// <value>AgencyId from Domain</value>
        [DataMember(Name = "agencyId", EmitDefaultValue = false)]
        public long AgencyId { get; set; }

        /// <summary>
        /// ProviderId for the agency
        /// </summary>
        /// <value>ProviderId for the agency</value>
        [DataMember(Name = "providerId", EmitDefaultValue = false)]
        public string ProviderId { get; set; }

        /// <summary>
        /// Listing identifier provided by CRM
        /// </summary>
        /// <value>Listing identifier provided by CRM</value>
        [DataMember(Name = "providerAdId", EmitDefaultValue = false)]
        public string ProviderAdId { get; set; }

        /// <summary>
        /// Advertisement Id from domain
        /// </summary>
        /// <value>Advertisement Id from domain</value>
        [DataMember(Name = "adId", EmitDefaultValue = false)]
        public List<long> AdId { get; set; }

        /// <summary>
        /// Quality score of the listing, based on data completeness
        /// </summary>
        /// <value>Quality score of the listing, based on data completeness</value>
        [DataMember(Name = "qualityScore", EmitDefaultValue = false)]
        public int QualityScore { get; set; }

        /// <summary>
        /// All Events associated with this processing request
        /// </summary>
        /// <value>All Events associated with this processing request</value>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelModelEvent> Events { get; set; }

        /// <summary>
        /// version list
        /// </summary>
        /// <value>version list</value>
        [DataMember(Name = "versions", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelReportVersion> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelListingReport {\n");
            sb.Append("  ProcessStatus: ").Append(ProcessStatus).Append("\n");
            sb.Append("  AgencyId: ").Append(AgencyId).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProviderAdId: ").Append(ProviderAdId).Append("\n");
            sb.Append("  AdId: ").Append(AdId).Append("\n");
            sb.Append("  QualityScore: ").Append(QualityScore).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelListingReport);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelListingReport instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelListingReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelListingReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessStatus == input.ProcessStatus ||
                    this.ProcessStatus.Equals(input.ProcessStatus)
                ) && 
                (
                    this.AgencyId == input.AgencyId ||
                    this.AgencyId.Equals(input.AgencyId)
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.ProviderAdId == input.ProviderAdId ||
                    (this.ProviderAdId != null &&
                    this.ProviderAdId.Equals(input.ProviderAdId))
                ) && 
                (
                    this.AdId == input.AdId ||
                    this.AdId != null &&
                    input.AdId != null &&
                    this.AdId.SequenceEqual(input.AdId)
                ) && 
                (
                    this.QualityScore == input.QualityScore ||
                    this.QualityScore.Equals(input.QualityScore)
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Versions == input.Versions ||
                    this.Versions != null &&
                    input.Versions != null &&
                    this.Versions.SequenceEqual(input.Versions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ProcessStatus.GetHashCode();
                hashCode = hashCode * 59 + this.AgencyId.GetHashCode();
                if (this.ProviderId != null)
                    hashCode = hashCode * 59 + this.ProviderId.GetHashCode();
                if (this.ProviderAdId != null)
                    hashCode = hashCode * 59 + this.ProviderAdId.GetHashCode();
                if (this.AdId != null)
                    hashCode = hashCode * 59 + this.AdId.GetHashCode();
                hashCode = hashCode * 59 + this.QualityScore.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.Versions != null)
                    hashCode = hashCode * 59 + this.Versions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
