/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Processing Event, use to show information, warnings or Errors
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.ModelEvent")]
    public partial class DomainListingAdminServiceV1ModelModelEvent : IEquatable<DomainListingAdminServiceV1ModelModelEvent>, IValidatableObject
    {
        /// <summary>
        /// Severity of the Event
        /// </summary>
        /// <value>Severity of the Event</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Info for value: Info
            /// </summary>
            [EnumMember(Value = "Info")]
            Info = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3

        }

        /// <summary>
        /// Severity of the Event
        /// </summary>
        /// <value>Severity of the Event</value>
        [DataMember(Name = "severity", EmitDefaultValue = false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Type of the issue
        /// </summary>
        /// <value>Type of the issue</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IssueTypeEnum
        {
            /// <summary>
            /// Enum Internal for value: Internal
            /// </summary>
            [EnumMember(Value = "Internal")]
            Internal = 1,

            /// <summary>
            /// Enum External for value: External
            /// </summary>
            [EnumMember(Value = "External")]
            External = 2

        }

        /// <summary>
        /// Type of the issue
        /// </summary>
        /// <value>Type of the issue</value>
        [DataMember(Name = "issueType", EmitDefaultValue = false)]
        public IssueTypeEnum? IssueType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelModelEvent" /> class.
        /// </summary>
        /// <param name="severity">Severity of the Event.</param>
        /// <param name="issueType">Type of the issue.</param>
        /// <param name="message">Message associated with the event.</param>
        public DomainListingAdminServiceV1ModelModelEvent(SeverityEnum? severity = default(SeverityEnum?), IssueTypeEnum? issueType = default(IssueTypeEnum?), string message = default(string))
        {
            this.Severity = severity;
            this.IssueType = issueType;
            this.Message = message;
        }

        /// <summary>
        /// Message associated with the event
        /// </summary>
        /// <value>Message associated with the event</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelModelEvent {\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelModelEvent);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelModelEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelModelEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelModelEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Severity == input.Severity ||
                    this.Severity.Equals(input.Severity)
                ) && 
                (
                    this.IssueType == input.IssueType ||
                    this.IssueType.Equals(input.IssueType)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Severity.GetHashCode();
                hashCode = hashCode * 59 + this.IssueType.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
