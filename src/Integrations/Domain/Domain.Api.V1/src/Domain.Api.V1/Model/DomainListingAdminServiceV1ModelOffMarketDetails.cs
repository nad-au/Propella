/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Shows offmarket info
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.OffMarketDetails")]
    public partial class DomainListingAdminServiceV1ModelOffMarketDetails : IEquatable<DomainListingAdminServiceV1ModelOffMarketDetails>, IValidatableObject
    {
        /// <summary>
        /// Sale or Rent. Optional if Domain Ad ID is provided.
        /// </summary>
        /// <value>Sale or Rent. Optional if Domain Ad ID is provided.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListingActionEnum
        {
            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            [EnumMember(Value = "sale")]
            Sale = 1,

            /// <summary>
            /// Enum Rent for value: rent
            /// </summary>
            [EnumMember(Value = "rent")]
            Rent = 2

        }

        /// <summary>
        /// Sale or Rent. Optional if Domain Ad ID is provided.
        /// </summary>
        /// <value>Sale or Rent. Optional if Domain Ad ID is provided.</value>
        [DataMember(Name = "listingAction", EmitDefaultValue = false)]
        public ListingActionEnum? ListingAction { get; set; }
        /// <summary>
        /// Off Market Action
        /// </summary>
        /// <value>Off Market Action</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OffMarketActionEnum
        {
            /// <summary>
            /// Enum WithDrawn for value: withDrawn
            /// </summary>
            [EnumMember(Value = "withDrawn")]
            WithDrawn = 1,

            /// <summary>
            /// Enum Sold for value: sold
            /// </summary>
            [EnumMember(Value = "sold")]
            Sold = 2,

            /// <summary>
            /// Enum Leased for value: leased
            /// </summary>
            [EnumMember(Value = "leased")]
            Leased = 3

        }

        /// <summary>
        /// Off Market Action
        /// </summary>
        /// <value>Off Market Action</value>
        [DataMember(Name = "offMarketAction", EmitDefaultValue = false)]
        public OffMarketActionEnum? OffMarketAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelOffMarketDetails" /> class.
        /// </summary>
        /// <param name="listingAction">Sale or Rent. Optional if Domain Ad ID is provided..</param>
        /// <param name="offMarketAction">Off Market Action.</param>
        /// <param name="listingProvider">A string identifying the data provider.</param>
        /// <param name="domainAgencyID">Domain Agency ID. Optional if Domain Ad ID is provided..</param>
        /// <param name="providerAdId">External Advertisement ID. Optional if Domain Ad ID is provided..</param>
        /// <param name="actionDate">The date property was sold, leased or withdrawn.</param>
        /// <param name="soldDetails">soldDetails.</param>
        /// <param name="leasedDetails">leasedDetails.</param>
        /// <param name="comment">Extra details for off market action.</param>
        public DomainListingAdminServiceV1ModelOffMarketDetails(ListingActionEnum? listingAction = default(ListingActionEnum?), OffMarketActionEnum? offMarketAction = default(OffMarketActionEnum?), string listingProvider = default(string), int domainAgencyID = default(int), string providerAdId = default(string), DateTime actionDate = default(DateTime), DomainListingAdminServiceV1ModelSoldDetails soldDetails = default(DomainListingAdminServiceV1ModelSoldDetails), DomainListingAdminServiceV1ModelLeasedDetails leasedDetails = default(DomainListingAdminServiceV1ModelLeasedDetails), string comment = default(string))
        {
            this.ListingAction = listingAction;
            this.OffMarketAction = offMarketAction;
            this.ListingProvider = listingProvider;
            this.DomainAgencyID = domainAgencyID;
            this.ProviderAdId = providerAdId;
            this.ActionDate = actionDate;
            this.SoldDetails = soldDetails;
            this.LeasedDetails = leasedDetails;
            this.Comment = comment;
        }

        /// <summary>
        /// A string identifying the data provider
        /// </summary>
        /// <value>A string identifying the data provider</value>
        [DataMember(Name = "listingProvider", EmitDefaultValue = false)]
        public string ListingProvider { get; set; }

        /// <summary>
        /// Domain Agency ID. Optional if Domain Ad ID is provided.
        /// </summary>
        /// <value>Domain Agency ID. Optional if Domain Ad ID is provided.</value>
        [DataMember(Name = "domainAgencyID", EmitDefaultValue = false)]
        public int DomainAgencyID { get; set; }

        /// <summary>
        /// External Advertisement ID. Optional if Domain Ad ID is provided.
        /// </summary>
        /// <value>External Advertisement ID. Optional if Domain Ad ID is provided.</value>
        [DataMember(Name = "providerAdId", EmitDefaultValue = false)]
        public string ProviderAdId { get; set; }

        /// <summary>
        /// The date property was sold, leased or withdrawn
        /// </summary>
        /// <value>The date property was sold, leased or withdrawn</value>
        [DataMember(Name = "actionDate", EmitDefaultValue = false)]
        public DateTime ActionDate { get; set; }

        /// <summary>
        /// Gets or Sets SoldDetails
        /// </summary>
        [DataMember(Name = "soldDetails", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelSoldDetails SoldDetails { get; set; }

        /// <summary>
        /// Gets or Sets LeasedDetails
        /// </summary>
        [DataMember(Name = "leasedDetails", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelLeasedDetails LeasedDetails { get; set; }

        /// <summary>
        /// Extra details for off market action
        /// </summary>
        /// <value>Extra details for off market action</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelOffMarketDetails {\n");
            sb.Append("  ListingAction: ").Append(ListingAction).Append("\n");
            sb.Append("  OffMarketAction: ").Append(OffMarketAction).Append("\n");
            sb.Append("  ListingProvider: ").Append(ListingProvider).Append("\n");
            sb.Append("  DomainAgencyID: ").Append(DomainAgencyID).Append("\n");
            sb.Append("  ProviderAdId: ").Append(ProviderAdId).Append("\n");
            sb.Append("  ActionDate: ").Append(ActionDate).Append("\n");
            sb.Append("  SoldDetails: ").Append(SoldDetails).Append("\n");
            sb.Append("  LeasedDetails: ").Append(LeasedDetails).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelOffMarketDetails);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelOffMarketDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelOffMarketDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelOffMarketDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListingAction == input.ListingAction ||
                    this.ListingAction.Equals(input.ListingAction)
                ) && 
                (
                    this.OffMarketAction == input.OffMarketAction ||
                    this.OffMarketAction.Equals(input.OffMarketAction)
                ) && 
                (
                    this.ListingProvider == input.ListingProvider ||
                    (this.ListingProvider != null &&
                    this.ListingProvider.Equals(input.ListingProvider))
                ) && 
                (
                    this.DomainAgencyID == input.DomainAgencyID ||
                    this.DomainAgencyID.Equals(input.DomainAgencyID)
                ) && 
                (
                    this.ProviderAdId == input.ProviderAdId ||
                    (this.ProviderAdId != null &&
                    this.ProviderAdId.Equals(input.ProviderAdId))
                ) && 
                (
                    this.ActionDate == input.ActionDate ||
                    (this.ActionDate != null &&
                    this.ActionDate.Equals(input.ActionDate))
                ) && 
                (
                    this.SoldDetails == input.SoldDetails ||
                    (this.SoldDetails != null &&
                    this.SoldDetails.Equals(input.SoldDetails))
                ) && 
                (
                    this.LeasedDetails == input.LeasedDetails ||
                    (this.LeasedDetails != null &&
                    this.LeasedDetails.Equals(input.LeasedDetails))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ListingAction.GetHashCode();
                hashCode = hashCode * 59 + this.OffMarketAction.GetHashCode();
                if (this.ListingProvider != null)
                    hashCode = hashCode * 59 + this.ListingProvider.GetHashCode();
                hashCode = hashCode * 59 + this.DomainAgencyID.GetHashCode();
                if (this.ProviderAdId != null)
                    hashCode = hashCode * 59 + this.ProviderAdId.GetHashCode();
                if (this.ActionDate != null)
                    hashCode = hashCode * 59 + this.ActionDate.GetHashCode();
                if (this.SoldDetails != null)
                    hashCode = hashCode * 59 + this.SoldDetails.GetHashCode();
                if (this.LeasedDetails != null)
                    hashCode = hashCode * 59 + this.LeasedDetails.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
