/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Parking Details
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.ParkingDetails")]
    public partial class DomainListingAdminServiceV1ModelParkingDetails : IEquatable<DomainListingAdminServiceV1ModelParkingDetails>, IValidatableObject
    {
        /// <summary>
        /// Can have the value \\\&quot;OnSite\\\&quot;, \\\&quot;OnStreet\\\&quot;, \\\&quot;NoParking\\\&quot;. Default: \\\&quot;NoParking\\\&quot;
        /// </summary>
        /// <value>Can have the value \\\&quot;OnSite\\\&quot;, \\\&quot;OnStreet\\\&quot;, \\\&quot;NoParking\\\&quot;. Default: \\\&quot;NoParking\\\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParkingTypeEnum
        {
            /// <summary>
            /// Enum OnSite for value: onSite
            /// </summary>
            [EnumMember(Value = "onSite")]
            OnSite = 1,

            /// <summary>
            /// Enum OnStreet for value: onStreet
            /// </summary>
            [EnumMember(Value = "onStreet")]
            OnStreet = 2,

            /// <summary>
            /// Enum NoParking for value: noParking
            /// </summary>
            [EnumMember(Value = "noParking")]
            NoParking = 3,

            /// <summary>
            /// Enum Garage for value: garage
            /// </summary>
            [EnumMember(Value = "garage")]
            Garage = 4,

            /// <summary>
            /// Enum Carport for value: carport
            /// </summary>
            [EnumMember(Value = "carport")]
            Carport = 5,

            /// <summary>
            /// Enum Outdoor for value: outdoor
            /// </summary>
            [EnumMember(Value = "outdoor")]
            Outdoor = 6

        }

        /// <summary>
        /// Can have the value \\\&quot;OnSite\\\&quot;, \\\&quot;OnStreet\\\&quot;, \\\&quot;NoParking\\\&quot;. Default: \\\&quot;NoParking\\\&quot;
        /// </summary>
        /// <value>Can have the value \\\&quot;OnSite\\\&quot;, \\\&quot;OnStreet\\\&quot;, \\\&quot;NoParking\\\&quot;. Default: \\\&quot;NoParking\\\&quot;</value>
        [DataMember(Name = "parkingType", EmitDefaultValue = false)]
        public ParkingTypeEnum? ParkingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelParkingDetails" /> class.
        /// </summary>
        /// <param name="parkingType">Can have the value \\\&quot;OnSite\\\&quot;, \\\&quot;OnStreet\\\&quot;, \\\&quot;NoParking\\\&quot;. Default: \\\&quot;NoParking\\\&quot;.</param>
        /// <param name="numberOfSpaces">Number of parking spaces on site.</param>
        public DomainListingAdminServiceV1ModelParkingDetails(ParkingTypeEnum? parkingType = default(ParkingTypeEnum?), int numberOfSpaces = default(int))
        {
            this.ParkingType = parkingType;
            this.NumberOfSpaces = numberOfSpaces;
        }

        /// <summary>
        /// Number of parking spaces on site
        /// </summary>
        /// <value>Number of parking spaces on site</value>
        [DataMember(Name = "numberOfSpaces", EmitDefaultValue = false)]
        public int NumberOfSpaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelParkingDetails {\n");
            sb.Append("  ParkingType: ").Append(ParkingType).Append("\n");
            sb.Append("  NumberOfSpaces: ").Append(NumberOfSpaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelParkingDetails);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelParkingDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelParkingDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelParkingDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParkingType == input.ParkingType ||
                    this.ParkingType.Equals(input.ParkingType)
                ) && 
                (
                    this.NumberOfSpaces == input.NumberOfSpaces ||
                    this.NumberOfSpaces.Equals(input.NumberOfSpaces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ParkingType.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfSpaces.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
