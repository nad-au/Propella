/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Pricing Information
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.Price")]
    public partial class DomainListingAdminServiceV1ModelPrice : IEquatable<DomainListingAdminServiceV1ModelPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelPrice" /> class.
        /// </summary>
        /// <param name="displayText">When provided this will be shown instead of the price range, e.g.: \\\&quot;Offers over $450K considered\\\&quot;.</param>
        /// <param name="from">Lowest price the property is expected to sell/rent for to set search price. For a fixed price, set this value the same as To.</param>
        /// <param name="to">Highest price the property is expected to sell/rent for to set search price.   For a fixed price, set this value the same as From.</param>
        public DomainListingAdminServiceV1ModelPrice(string displayText = default(string), int from = default(int), int to = default(int))
        {
            this.DisplayText = displayText;
            this.From = from;
            this.To = to;
        }

        /// <summary>
        /// When provided this will be shown instead of the price range, e.g.: \\\&quot;Offers over $450K considered\\\&quot;
        /// </summary>
        /// <value>When provided this will be shown instead of the price range, e.g.: \\\&quot;Offers over $450K considered\\\&quot;</value>
        [DataMember(Name = "displayText", EmitDefaultValue = false)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Lowest price the property is expected to sell/rent for to set search price. For a fixed price, set this value the same as To
        /// </summary>
        /// <value>Lowest price the property is expected to sell/rent for to set search price. For a fixed price, set this value the same as To</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public int From { get; set; }

        /// <summary>
        /// Highest price the property is expected to sell/rent for to set search price.   For a fixed price, set this value the same as From
        /// </summary>
        /// <value>Highest price the property is expected to sell/rent for to set search price.   For a fixed price, set this value the same as From</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public int To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelPrice {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelPrice);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelPrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.From == input.From ||
                    this.From.Equals(input.From)
                ) && 
                (
                    this.To == input.To ||
                    this.To.Equals(input.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                hashCode = hashCode * 59 + this.From.GetHashCode();
                hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
