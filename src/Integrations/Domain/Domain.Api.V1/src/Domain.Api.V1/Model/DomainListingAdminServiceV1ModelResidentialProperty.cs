/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Residential Property
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.ResidentialProperty")]
    public partial class DomainListingAdminServiceV1ModelResidentialProperty : IEquatable<DomainListingAdminServiceV1ModelResidentialProperty>, IValidatableObject
    {
        /// <summary>
        /// Defines PropertyType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropertyTypeEnum
        {
            /// <summary>
            /// Enum AcreageSemiRural for value: acreageSemiRural
            /// </summary>
            [EnumMember(Value = "acreageSemiRural")]
            AcreageSemiRural = 1,

            /// <summary>
            /// Enum ApartmentUnitFlat for value: apartmentUnitFlat
            /// </summary>
            [EnumMember(Value = "apartmentUnitFlat")]
            ApartmentUnitFlat = 2,

            /// <summary>
            /// Enum Aquaculture for value: aquaculture
            /// </summary>
            [EnumMember(Value = "aquaculture")]
            Aquaculture = 3,

            /// <summary>
            /// Enum BlockOfUnits for value: blockOfUnits
            /// </summary>
            [EnumMember(Value = "blockOfUnits")]
            BlockOfUnits = 4,

            /// <summary>
            /// Enum CarSpace for value: carSpace
            /// </summary>
            [EnumMember(Value = "carSpace")]
            CarSpace = 5,

            /// <summary>
            /// Enum DairyFarming for value: dairyFarming
            /// </summary>
            [EnumMember(Value = "dairyFarming")]
            DairyFarming = 6,

            /// <summary>
            /// Enum DevelopmentSite for value: developmentSite
            /// </summary>
            [EnumMember(Value = "developmentSite")]
            DevelopmentSite = 7,

            /// <summary>
            /// Enum Duplex for value: duplex
            /// </summary>
            [EnumMember(Value = "duplex")]
            Duplex = 8,

            /// <summary>
            /// Enum Farm for value: farm
            /// </summary>
            [EnumMember(Value = "farm")]
            Farm = 9,

            /// <summary>
            /// Enum FishingForestry for value: fishingForestry
            /// </summary>
            [EnumMember(Value = "fishingForestry")]
            FishingForestry = 10,

            /// <summary>
            /// Enum NewHomeDesigns for value: newHomeDesigns
            /// </summary>
            [EnumMember(Value = "newHomeDesigns")]
            NewHomeDesigns = 11,

            /// <summary>
            /// Enum House for value: house
            /// </summary>
            [EnumMember(Value = "house")]
            House = 12,

            /// <summary>
            /// Enum NewHouseLand for value: newHouseLand
            /// </summary>
            [EnumMember(Value = "newHouseLand")]
            NewHouseLand = 13,

            /// <summary>
            /// Enum IrrigationServices for value: irrigationServices
            /// </summary>
            [EnumMember(Value = "irrigationServices")]
            IrrigationServices = 14,

            /// <summary>
            /// Enum NewLand for value: newLand
            /// </summary>
            [EnumMember(Value = "newLand")]
            NewLand = 15,

            /// <summary>
            /// Enum Livestock for value: livestock
            /// </summary>
            [EnumMember(Value = "livestock")]
            Livestock = 16,

            /// <summary>
            /// Enum NewApartments for value: newApartments
            /// </summary>
            [EnumMember(Value = "newApartments")]
            NewApartments = 17,

            /// <summary>
            /// Enum Penthouse for value: penthouse
            /// </summary>
            [EnumMember(Value = "penthouse")]
            Penthouse = 18,

            /// <summary>
            /// Enum Retirement for value: retirement
            /// </summary>
            [EnumMember(Value = "retirement")]
            Retirement = 19,

            /// <summary>
            /// Enum Rural for value: rural
            /// </summary>
            [EnumMember(Value = "rural")]
            Rural = 20,

            /// <summary>
            /// Enum SemiDetached for value: semiDetached
            /// </summary>
            [EnumMember(Value = "semiDetached")]
            SemiDetached = 21,

            /// <summary>
            /// Enum SpecialistFarm for value: specialistFarm
            /// </summary>
            [EnumMember(Value = "specialistFarm")]
            SpecialistFarm = 22,

            /// <summary>
            /// Enum Studio for value: studio
            /// </summary>
            [EnumMember(Value = "studio")]
            Studio = 23,

            /// <summary>
            /// Enum Terrace for value: terrace
            /// </summary>
            [EnumMember(Value = "terrace")]
            Terrace = 24,

            /// <summary>
            /// Enum Townhouse for value: townhouse
            /// </summary>
            [EnumMember(Value = "townhouse")]
            Townhouse = 25,

            /// <summary>
            /// Enum VacantLand for value: vacantLand
            /// </summary>
            [EnumMember(Value = "vacantLand")]
            VacantLand = 26,

            /// <summary>
            /// Enum Villa for value: villa
            /// </summary>
            [EnumMember(Value = "villa")]
            Villa = 27,

            /// <summary>
            /// Enum Cropping for value: cropping
            /// </summary>
            [EnumMember(Value = "cropping")]
            Cropping = 28,

            /// <summary>
            /// Enum Viticulture for value: viticulture
            /// </summary>
            [EnumMember(Value = "viticulture")]
            Viticulture = 29,

            /// <summary>
            /// Enum MixedFarming for value: mixedFarming
            /// </summary>
            [EnumMember(Value = "mixedFarming")]
            MixedFarming = 30,

            /// <summary>
            /// Enum Grazing for value: grazing
            /// </summary>
            [EnumMember(Value = "grazing")]
            Grazing = 31,

            /// <summary>
            /// Enum Horticulture for value: horticulture
            /// </summary>
            [EnumMember(Value = "horticulture")]
            Horticulture = 32,

            /// <summary>
            /// Enum Equine for value: equine
            /// </summary>
            [EnumMember(Value = "equine")]
            Equine = 33,

            /// <summary>
            /// Enum Farmlet for value: farmlet
            /// </summary>
            [EnumMember(Value = "farmlet")]
            Farmlet = 34,

            /// <summary>
            /// Enum Orchard for value: orchard
            /// </summary>
            [EnumMember(Value = "orchard")]
            Orchard = 35,

            /// <summary>
            /// Enum RuralLifestyle for value: ruralLifestyle
            /// </summary>
            [EnumMember(Value = "ruralLifestyle")]
            RuralLifestyle = 36

        }


        /// <summary>
        /// &#39;Retirement&#39; requires at least one more property type to be specified with it (for example: \\\&quot;Retirement\\\&quot;, \\\&quot;ApartmentUnitFlat\\\&quot;) [&#39;acreageSemiRural&#39;, &#39;apartmentUnitFlat&#39;, &#39;aquaculture&#39;, &#39;blockOfUnits&#39;, &#39;carSpace&#39;, &#39;dairyFarming&#39;, &#39;developmentSite&#39;, &#39;duplex&#39;, &#39;farm&#39;, &#39;fishingForestry&#39;, &#39;newHomeDesigns&#39;, &#39;house&#39;, &#39;newHouseLand&#39;, &#39;irrigationServices&#39;, &#39;newLand&#39;, &#39;livestock&#39;, &#39;newApartments&#39;, &#39;penthouse&#39;, &#39;retirement&#39;, &#39;rural&#39;, &#39;semiDetached&#39;, &#39;specialistFarm&#39;, &#39;studio&#39;, &#39;terrace&#39;, &#39;townhouse&#39;, &#39;vacantLand&#39;, &#39;villa&#39;, &#39;cropping&#39;, &#39;viticulture&#39;, &#39;mixedFarming&#39;, &#39;grazing&#39;, &#39;horticulture&#39;, &#39;equine&#39;, &#39;farmlet&#39;, &#39;orchard&#39;, &#39;ruralLifestyle&#39;].
        /// </summary>
        /// <value>&#39;Retirement&#39; requires at least one more property type to be specified with it (for example: \\\&quot;Retirement\\\&quot;, \\\&quot;ApartmentUnitFlat\\\&quot;) [&#39;acreageSemiRural&#39;, &#39;apartmentUnitFlat&#39;, &#39;aquaculture&#39;, &#39;blockOfUnits&#39;, &#39;carSpace&#39;, &#39;dairyFarming&#39;, &#39;developmentSite&#39;, &#39;duplex&#39;, &#39;farm&#39;, &#39;fishingForestry&#39;, &#39;newHomeDesigns&#39;, &#39;house&#39;, &#39;newHouseLand&#39;, &#39;irrigationServices&#39;, &#39;newLand&#39;, &#39;livestock&#39;, &#39;newApartments&#39;, &#39;penthouse&#39;, &#39;retirement&#39;, &#39;rural&#39;, &#39;semiDetached&#39;, &#39;specialistFarm&#39;, &#39;studio&#39;, &#39;terrace&#39;, &#39;townhouse&#39;, &#39;vacantLand&#39;, &#39;villa&#39;, &#39;cropping&#39;, &#39;viticulture&#39;, &#39;mixedFarming&#39;, &#39;grazing&#39;, &#39;horticulture&#39;, &#39;equine&#39;, &#39;farmlet&#39;, &#39;orchard&#39;, &#39;ruralLifestyle&#39;].</value>
        [DataMember(Name = "propertyType", EmitDefaultValue = false)]
        public List<PropertyTypeEnum> PropertyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelResidentialProperty" /> class.
        /// </summary>
        /// <param name="propertyType">&#39;Retirement&#39; requires at least one more property type to be specified with it (for example: \\\&quot;Retirement\\\&quot;, \\\&quot;ApartmentUnitFlat\\\&quot;) [&#39;acreageSemiRural&#39;, &#39;apartmentUnitFlat&#39;, &#39;aquaculture&#39;, &#39;blockOfUnits&#39;, &#39;carSpace&#39;, &#39;dairyFarming&#39;, &#39;developmentSite&#39;, &#39;duplex&#39;, &#39;farm&#39;, &#39;fishingForestry&#39;, &#39;newHomeDesigns&#39;, &#39;house&#39;, &#39;newHouseLand&#39;, &#39;irrigationServices&#39;, &#39;newLand&#39;, &#39;livestock&#39;, &#39;newApartments&#39;, &#39;penthouse&#39;, &#39;retirement&#39;, &#39;rural&#39;, &#39;semiDetached&#39;, &#39;specialistFarm&#39;, &#39;studio&#39;, &#39;terrace&#39;, &#39;townhouse&#39;, &#39;vacantLand&#39;, &#39;villa&#39;, &#39;cropping&#39;, &#39;viticulture&#39;, &#39;mixedFarming&#39;, &#39;grazing&#39;, &#39;horticulture&#39;, &#39;equine&#39;, &#39;farmlet&#39;, &#39;orchard&#39;, &#39;ruralLifestyle&#39;]..</param>
        /// <param name="bedRooms">Number of bedrooms.</param>
        /// <param name="bathRooms">Number of bathrooms.</param>
        /// <param name="parkingInfo">parkingInfo.</param>
        /// <param name="energyEfficiencyRating">Optional, although must be set for ACT dwellings for sale. Valid values range from 0 to 10 inclusive, in increments of 0.5.</param>
        /// <param name="pdfs">List of PDF files related to the listing.</param>
        /// <param name="isMarkedForLiveability">Is the property liveability compliant.</param>
        /// <param name="propertyName">Name of the property up to 70 characters.</param>
        /// <param name="location">Short location information up to 30 character, e.g.: Greenhills Beach.</param>
        /// <param name="images">List of image files, photos or floor plans related to the listing..</param>
        /// <param name="address">address.</param>
        /// <param name="area">area.</param>
        /// <param name="landArea">landArea.</param>
        public DomainListingAdminServiceV1ModelResidentialProperty(List<PropertyTypeEnum> propertyType = default(List<PropertyTypeEnum>), int bedRooms = default(int), int bathRooms = default(int), DomainListingAdminServiceV1ModelParkingInfo parkingInfo = default(DomainListingAdminServiceV1ModelParkingInfo), double energyEfficiencyRating = default(double), List<DomainListingAdminServiceV1ModelPropertyPdf> pdfs = default(List<DomainListingAdminServiceV1ModelPropertyPdf>), bool isMarkedForLiveability = default(bool), string propertyName = default(string), string location = default(string), List<DomainListingAdminServiceV1ModelPropertyMedia> images = default(List<DomainListingAdminServiceV1ModelPropertyMedia>), DomainListingAdminServiceV1ModelAddress address = default(DomainListingAdminServiceV1ModelAddress), DomainListingAdminServiceV1ModelArea area = default(DomainListingAdminServiceV1ModelArea), DomainListingAdminServiceV1ModelLandArea landArea = default(DomainListingAdminServiceV1ModelLandArea))
        {
            this.PropertyType = propertyType;
            this.BedRooms = bedRooms;
            this.BathRooms = bathRooms;
            this.ParkingInfo = parkingInfo;
            this.EnergyEfficiencyRating = energyEfficiencyRating;
            this.Pdfs = pdfs;
            this.IsMarkedForLiveability = isMarkedForLiveability;
            this.PropertyName = propertyName;
            this.Location = location;
            this.Images = images;
            this.Address = address;
            this.Area = area;
            this.LandArea = landArea;
        }

        /// <summary>
        /// Number of bedrooms
        /// </summary>
        /// <value>Number of bedrooms</value>
        [DataMember(Name = "bedRooms", EmitDefaultValue = false)]
        public int BedRooms { get; set; }

        /// <summary>
        /// Number of bathrooms
        /// </summary>
        /// <value>Number of bathrooms</value>
        [DataMember(Name = "bathRooms", EmitDefaultValue = false)]
        public int BathRooms { get; set; }

        /// <summary>
        /// Gets or Sets ParkingInfo
        /// </summary>
        [DataMember(Name = "parkingInfo", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelParkingInfo ParkingInfo { get; set; }

        /// <summary>
        /// Optional, although must be set for ACT dwellings for sale. Valid values range from 0 to 10 inclusive, in increments of 0.5
        /// </summary>
        /// <value>Optional, although must be set for ACT dwellings for sale. Valid values range from 0 to 10 inclusive, in increments of 0.5</value>
        [DataMember(Name = "energyEfficiencyRating", EmitDefaultValue = false)]
        public double EnergyEfficiencyRating { get; set; }

        /// <summary>
        /// List of PDF files related to the listing
        /// </summary>
        /// <value>List of PDF files related to the listing</value>
        [DataMember(Name = "pdfs", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelPropertyPdf> Pdfs { get; set; }

        /// <summary>
        /// Is the property liveability compliant
        /// </summary>
        /// <value>Is the property liveability compliant</value>
        [DataMember(Name = "isMarkedForLiveability", EmitDefaultValue = false)]
        public bool IsMarkedForLiveability { get; set; }

        /// <summary>
        /// Name of the property up to 70 characters
        /// </summary>
        /// <value>Name of the property up to 70 characters</value>
        [DataMember(Name = "propertyName", EmitDefaultValue = false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Short location information up to 30 character, e.g.: Greenhills Beach
        /// </summary>
        /// <value>Short location information up to 30 character, e.g.: Greenhills Beach</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// List of image files, photos or floor plans related to the listing.
        /// </summary>
        /// <value>List of image files, photos or floor plans related to the listing.</value>
        [DataMember(Name = "images", EmitDefaultValue = false)]
        public List<DomainListingAdminServiceV1ModelPropertyMedia> Images { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "area", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelArea Area { get; set; }

        /// <summary>
        /// Gets or Sets LandArea
        /// </summary>
        [DataMember(Name = "landArea", EmitDefaultValue = false)]
        public DomainListingAdminServiceV1ModelLandArea LandArea { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelResidentialProperty {\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  BedRooms: ").Append(BedRooms).Append("\n");
            sb.Append("  BathRooms: ").Append(BathRooms).Append("\n");
            sb.Append("  ParkingInfo: ").Append(ParkingInfo).Append("\n");
            sb.Append("  EnergyEfficiencyRating: ").Append(EnergyEfficiencyRating).Append("\n");
            sb.Append("  Pdfs: ").Append(Pdfs).Append("\n");
            sb.Append("  IsMarkedForLiveability: ").Append(IsMarkedForLiveability).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  LandArea: ").Append(LandArea).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelResidentialProperty);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelResidentialProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelResidentialProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelResidentialProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PropertyType == input.PropertyType ||
                    this.PropertyType.SequenceEqual(input.PropertyType)
                ) && 
                (
                    this.BedRooms == input.BedRooms ||
                    this.BedRooms.Equals(input.BedRooms)
                ) && 
                (
                    this.BathRooms == input.BathRooms ||
                    this.BathRooms.Equals(input.BathRooms)
                ) && 
                (
                    this.ParkingInfo == input.ParkingInfo ||
                    (this.ParkingInfo != null &&
                    this.ParkingInfo.Equals(input.ParkingInfo))
                ) && 
                (
                    this.EnergyEfficiencyRating == input.EnergyEfficiencyRating ||
                    this.EnergyEfficiencyRating.Equals(input.EnergyEfficiencyRating)
                ) && 
                (
                    this.Pdfs == input.Pdfs ||
                    this.Pdfs != null &&
                    input.Pdfs != null &&
                    this.Pdfs.SequenceEqual(input.Pdfs)
                ) && 
                (
                    this.IsMarkedForLiveability == input.IsMarkedForLiveability ||
                    this.IsMarkedForLiveability.Equals(input.IsMarkedForLiveability)
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.LandArea == input.LandArea ||
                    (this.LandArea != null &&
                    this.LandArea.Equals(input.LandArea))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                hashCode = hashCode * 59 + this.BedRooms.GetHashCode();
                hashCode = hashCode * 59 + this.BathRooms.GetHashCode();
                if (this.ParkingInfo != null)
                    hashCode = hashCode * 59 + this.ParkingInfo.GetHashCode();
                hashCode = hashCode * 59 + this.EnergyEfficiencyRating.GetHashCode();
                if (this.Pdfs != null)
                    hashCode = hashCode * 59 + this.Pdfs.GetHashCode();
                hashCode = hashCode * 59 + this.IsMarkedForLiveability.GetHashCode();
                if (this.PropertyName != null)
                    hashCode = hashCode * 59 + this.PropertyName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.LandArea != null)
                    hashCode = hashCode * 59 + this.LandArea.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
