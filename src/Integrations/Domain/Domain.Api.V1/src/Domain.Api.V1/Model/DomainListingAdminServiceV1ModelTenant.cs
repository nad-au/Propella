/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Tenant Information
    /// </summary>
    [DataContract(Name = "Domain.ListingAdminService.v1.Model.Tenant")]
    public partial class DomainListingAdminServiceV1ModelTenant : IEquatable<DomainListingAdminServiceV1ModelTenant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingAdminServiceV1ModelTenant" /> class.
        /// </summary>
        /// <param name="leaseStart">The date on which the tenants lease began, or is due to begin..</param>
        /// <param name="leaseEnd">The date on which the tenants lease is due to end.</param>
        /// <param name="name">Name of the current tenant of the property, up to 100 characters.</param>
        /// <param name="rentalDetails">Information regarding current rental, up to 100 characters.</param>
        /// <param name="leaseOptions">Leasing options available to a prospective tenant, up to 100 characters.</param>
        /// <param name="tenantInfoTermOfLeaseFrom">The from range of the tenant&#39;s current lease.</param>
        /// <param name="tenantInfoTermOfLeaseTo">The to range of the tenant&#39;s current lease.</param>
        /// <param name="leaseDateVariable">Is tenant lease date variable.</param>
        public DomainListingAdminServiceV1ModelTenant(DateTime leaseStart = default(DateTime), DateTime leaseEnd = default(DateTime), string name = default(string), string rentalDetails = default(string), string leaseOptions = default(string), int tenantInfoTermOfLeaseFrom = default(int), int tenantInfoTermOfLeaseTo = default(int), bool leaseDateVariable = default(bool))
        {
            this.LeaseStart = leaseStart;
            this.LeaseEnd = leaseEnd;
            this.Name = name;
            this.RentalDetails = rentalDetails;
            this.LeaseOptions = leaseOptions;
            this.TenantInfoTermOfLeaseFrom = tenantInfoTermOfLeaseFrom;
            this.TenantInfoTermOfLeaseTo = tenantInfoTermOfLeaseTo;
            this.LeaseDateVariable = leaseDateVariable;
        }

        /// <summary>
        /// The date on which the tenants lease began, or is due to begin.
        /// </summary>
        /// <value>The date on which the tenants lease began, or is due to begin.</value>
        [DataMember(Name = "leaseStart", EmitDefaultValue = false)]
        public DateTime LeaseStart { get; set; }

        /// <summary>
        /// The date on which the tenants lease is due to end
        /// </summary>
        /// <value>The date on which the tenants lease is due to end</value>
        [DataMember(Name = "leaseEnd", EmitDefaultValue = false)]
        public DateTime LeaseEnd { get; set; }

        /// <summary>
        /// Name of the current tenant of the property, up to 100 characters
        /// </summary>
        /// <value>Name of the current tenant of the property, up to 100 characters</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Information regarding current rental, up to 100 characters
        /// </summary>
        /// <value>Information regarding current rental, up to 100 characters</value>
        [DataMember(Name = "rentalDetails", EmitDefaultValue = false)]
        public string RentalDetails { get; set; }

        /// <summary>
        /// Leasing options available to a prospective tenant, up to 100 characters
        /// </summary>
        /// <value>Leasing options available to a prospective tenant, up to 100 characters</value>
        [DataMember(Name = "leaseOptions", EmitDefaultValue = false)]
        public string LeaseOptions { get; set; }

        /// <summary>
        /// The from range of the tenant&#39;s current lease
        /// </summary>
        /// <value>The from range of the tenant&#39;s current lease</value>
        [DataMember(Name = "tenantInfoTermOfLeaseFrom", EmitDefaultValue = false)]
        public int TenantInfoTermOfLeaseFrom { get; set; }

        /// <summary>
        /// The to range of the tenant&#39;s current lease
        /// </summary>
        /// <value>The to range of the tenant&#39;s current lease</value>
        [DataMember(Name = "tenantInfoTermOfLeaseTo", EmitDefaultValue = false)]
        public int TenantInfoTermOfLeaseTo { get; set; }

        /// <summary>
        /// Is tenant lease date variable
        /// </summary>
        /// <value>Is tenant lease date variable</value>
        [DataMember(Name = "leaseDateVariable", EmitDefaultValue = false)]
        public bool LeaseDateVariable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingAdminServiceV1ModelTenant {\n");
            sb.Append("  LeaseStart: ").Append(LeaseStart).Append("\n");
            sb.Append("  LeaseEnd: ").Append(LeaseEnd).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RentalDetails: ").Append(RentalDetails).Append("\n");
            sb.Append("  LeaseOptions: ").Append(LeaseOptions).Append("\n");
            sb.Append("  TenantInfoTermOfLeaseFrom: ").Append(TenantInfoTermOfLeaseFrom).Append("\n");
            sb.Append("  TenantInfoTermOfLeaseTo: ").Append(TenantInfoTermOfLeaseTo).Append("\n");
            sb.Append("  LeaseDateVariable: ").Append(LeaseDateVariable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingAdminServiceV1ModelTenant);
        }

        /// <summary>
        /// Returns true if DomainListingAdminServiceV1ModelTenant instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingAdminServiceV1ModelTenant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingAdminServiceV1ModelTenant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeaseStart == input.LeaseStart ||
                    (this.LeaseStart != null &&
                    this.LeaseStart.Equals(input.LeaseStart))
                ) && 
                (
                    this.LeaseEnd == input.LeaseEnd ||
                    (this.LeaseEnd != null &&
                    this.LeaseEnd.Equals(input.LeaseEnd))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RentalDetails == input.RentalDetails ||
                    (this.RentalDetails != null &&
                    this.RentalDetails.Equals(input.RentalDetails))
                ) && 
                (
                    this.LeaseOptions == input.LeaseOptions ||
                    (this.LeaseOptions != null &&
                    this.LeaseOptions.Equals(input.LeaseOptions))
                ) && 
                (
                    this.TenantInfoTermOfLeaseFrom == input.TenantInfoTermOfLeaseFrom ||
                    this.TenantInfoTermOfLeaseFrom.Equals(input.TenantInfoTermOfLeaseFrom)
                ) && 
                (
                    this.TenantInfoTermOfLeaseTo == input.TenantInfoTermOfLeaseTo ||
                    this.TenantInfoTermOfLeaseTo.Equals(input.TenantInfoTermOfLeaseTo)
                ) && 
                (
                    this.LeaseDateVariable == input.LeaseDateVariable ||
                    this.LeaseDateVariable.Equals(input.LeaseDateVariable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeaseStart != null)
                    hashCode = hashCode * 59 + this.LeaseStart.GetHashCode();
                if (this.LeaseEnd != null)
                    hashCode = hashCode * 59 + this.LeaseEnd.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RentalDetails != null)
                    hashCode = hashCode * 59 + this.RentalDetails.GetHashCode();
                if (this.LeaseOptions != null)
                    hashCode = hashCode * 59 + this.LeaseOptions.GetHashCode();
                hashCode = hashCode * 59 + this.TenantInfoTermOfLeaseFrom.GetHashCode();
                hashCode = hashCode * 59 + this.TenantInfoTermOfLeaseTo.GetHashCode();
                hashCode = hashCode * 59 + this.LeaseDateVariable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
