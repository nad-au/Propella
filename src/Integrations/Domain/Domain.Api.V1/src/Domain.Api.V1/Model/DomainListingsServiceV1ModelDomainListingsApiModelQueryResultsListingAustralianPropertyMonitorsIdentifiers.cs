/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
    /// </summary>
    [DataContract(Name = "Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers")]
    public partial class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers : IEquatable<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers" /> class.
        /// </summary>
        /// <param name="addressId">addressId.</param>
        /// <param name="streetId">streetId.</param>
        /// <param name="suburbId">suburbId.</param>
        /// <param name="cadastreId">cadastreId.</param>
        /// <param name="postcodeId">postcodeId.</param>
        /// <param name="stateId">stateId.</param>
        /// <param name="state">state.</param>
        /// <param name="propertyTypeId">propertyTypeId.</param>
        /// <param name="propertyTypeCategoryId">propertyTypeCategoryId.</param>
        /// <param name="flatNumber">flatNumber.</param>
        /// <param name="streetNumber">streetNumber.</param>
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers(int addressId = default(int), int streetId = default(int), int suburbId = default(int), long cadastreId = default(long), int postcodeId = default(int), int stateId = default(int), string state = default(string), int propertyTypeId = default(int), int propertyTypeCategoryId = default(int), string flatNumber = default(string), string streetNumber = default(string))
        {
            this.AddressId = addressId;
            this.StreetId = streetId;
            this.SuburbId = suburbId;
            this.CadastreId = cadastreId;
            this.PostcodeId = postcodeId;
            this.StateId = stateId;
            this.State = state;
            this.PropertyTypeId = propertyTypeId;
            this.PropertyTypeCategoryId = propertyTypeCategoryId;
            this.FlatNumber = flatNumber;
            this.StreetNumber = streetNumber;
        }

        /// <summary>
        /// Gets or Sets AddressId
        /// </summary>
        [DataMember(Name = "addressId", EmitDefaultValue = false)]
        public int AddressId { get; set; }

        /// <summary>
        /// Gets or Sets StreetId
        /// </summary>
        [DataMember(Name = "streetId", EmitDefaultValue = false)]
        public int StreetId { get; set; }

        /// <summary>
        /// Gets or Sets SuburbId
        /// </summary>
        [DataMember(Name = "suburbId", EmitDefaultValue = false)]
        public int SuburbId { get; set; }

        /// <summary>
        /// Gets or Sets CadastreId
        /// </summary>
        [DataMember(Name = "cadastreId", EmitDefaultValue = false)]
        public long CadastreId { get; set; }

        /// <summary>
        /// Gets or Sets PostcodeId
        /// </summary>
        [DataMember(Name = "postcodeId", EmitDefaultValue = false)]
        public int PostcodeId { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name = "stateId", EmitDefaultValue = false)]
        public int StateId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets PropertyTypeId
        /// </summary>
        [DataMember(Name = "propertyTypeId", EmitDefaultValue = false)]
        public int PropertyTypeId { get; set; }

        /// <summary>
        /// Gets or Sets PropertyTypeCategoryId
        /// </summary>
        [DataMember(Name = "propertyTypeCategoryId", EmitDefaultValue = false)]
        public int PropertyTypeCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets FlatNumber
        /// </summary>
        [DataMember(Name = "flatNumber", EmitDefaultValue = false)]
        public string FlatNumber { get; set; }

        /// <summary>
        /// Gets or Sets StreetNumber
        /// </summary>
        [DataMember(Name = "streetNumber", EmitDefaultValue = false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers {\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("  StreetId: ").Append(StreetId).Append("\n");
            sb.Append("  SuburbId: ").Append(SuburbId).Append("\n");
            sb.Append("  CadastreId: ").Append(CadastreId).Append("\n");
            sb.Append("  PostcodeId: ").Append(PostcodeId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PropertyTypeId: ").Append(PropertyTypeId).Append("\n");
            sb.Append("  PropertyTypeCategoryId: ").Append(PropertyTypeCategoryId).Append("\n");
            sb.Append("  FlatNumber: ").Append(FlatNumber).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers);
        }

        /// <summary>
        /// Returns true if DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressId == input.AddressId ||
                    this.AddressId.Equals(input.AddressId)
                ) && 
                (
                    this.StreetId == input.StreetId ||
                    this.StreetId.Equals(input.StreetId)
                ) && 
                (
                    this.SuburbId == input.SuburbId ||
                    this.SuburbId.Equals(input.SuburbId)
                ) && 
                (
                    this.CadastreId == input.CadastreId ||
                    this.CadastreId.Equals(input.CadastreId)
                ) && 
                (
                    this.PostcodeId == input.PostcodeId ||
                    this.PostcodeId.Equals(input.PostcodeId)
                ) && 
                (
                    this.StateId == input.StateId ||
                    this.StateId.Equals(input.StateId)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.PropertyTypeId == input.PropertyTypeId ||
                    this.PropertyTypeId.Equals(input.PropertyTypeId)
                ) && 
                (
                    this.PropertyTypeCategoryId == input.PropertyTypeCategoryId ||
                    this.PropertyTypeCategoryId.Equals(input.PropertyTypeCategoryId)
                ) && 
                (
                    this.FlatNumber == input.FlatNumber ||
                    (this.FlatNumber != null &&
                    this.FlatNumber.Equals(input.FlatNumber))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AddressId.GetHashCode();
                hashCode = hashCode * 59 + this.StreetId.GetHashCode();
                hashCode = hashCode * 59 + this.SuburbId.GetHashCode();
                hashCode = hashCode * 59 + this.CadastreId.GetHashCode();
                hashCode = hashCode * 59 + this.PostcodeId.GetHashCode();
                hashCode = hashCode * 59 + this.StateId.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyTypeId.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyTypeCategoryId.GetHashCode();
                if (this.FlatNumber != null)
                    hashCode = hashCode * 59 + this.FlatNumber.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
