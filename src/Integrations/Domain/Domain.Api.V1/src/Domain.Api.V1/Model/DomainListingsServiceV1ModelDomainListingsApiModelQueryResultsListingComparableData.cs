/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData
    /// </summary>
    [DataContract(Name = "Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingComparableData")]
    public partial class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData : IEquatable<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData" /> class.
        /// </summary>
        /// <param name="comparableProperty">comparableProperty.</param>
        /// <param name="declarationText">declarationText.</param>
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData(List<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData> comparableProperty = default(List<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData>), string declarationText = default(string))
        {
            this.ComparableProperty = comparableProperty;
            this.DeclarationText = declarationText;
        }

        /// <summary>
        /// Gets or Sets ComparableProperty
        /// </summary>
        [DataMember(Name = "comparableProperty", EmitDefaultValue = false)]
        public List<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData> ComparableProperty { get; set; }

        /// <summary>
        /// Gets or Sets DeclarationText
        /// </summary>
        [DataMember(Name = "declarationText", EmitDefaultValue = false)]
        public string DeclarationText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData {\n");
            sb.Append("  ComparableProperty: ").Append(ComparableProperty).Append("\n");
            sb.Append("  DeclarationText: ").Append(DeclarationText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData);
        }

        /// <summary>
        /// Returns true if DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComparableProperty == input.ComparableProperty ||
                    this.ComparableProperty != null &&
                    input.ComparableProperty != null &&
                    this.ComparableProperty.SequenceEqual(input.ComparableProperty)
                ) && 
                (
                    this.DeclarationText == input.DeclarationText ||
                    (this.DeclarationText != null &&
                    this.DeclarationText.Equals(input.DeclarationText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComparableProperty != null)
                    hashCode = hashCode * 59 + this.ComparableProperty.GetHashCode();
                if (this.DeclarationText != null)
                    hashCode = hashCode * 59 + this.DeclarationText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
