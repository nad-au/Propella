/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
    /// </summary>
    [DataContract(Name = "Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingPastSaleData")]
    public partial class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData : IEquatable<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData" /> class.
        /// </summary>
        /// <param name="unitNumber">unitNumber.</param>
        /// <param name="streetNumber">streetNumber.</param>
        /// <param name="street">street.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="postcode">postcode.</param>
        /// <param name="state">state.</param>
        /// <param name="displayAddress">displayAddress.</param>
        /// <param name="dateOfSale">dateOfSale.</param>
        /// <param name="soldPrice">soldPrice.</param>
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData(string unitNumber = default(string), string streetNumber = default(string), string street = default(string), string suburb = default(string), string postcode = default(string), string state = default(string), string displayAddress = default(string), string dateOfSale = default(string), long soldPrice = default(long))
        {
            this.UnitNumber = unitNumber;
            this.StreetNumber = streetNumber;
            this.Street = street;
            this.Suburb = suburb;
            this.Postcode = postcode;
            this.State = state;
            this.DisplayAddress = displayAddress;
            this.DateOfSale = dateOfSale;
            this.SoldPrice = soldPrice;
        }

        /// <summary>
        /// Gets or Sets UnitNumber
        /// </summary>
        [DataMember(Name = "unitNumber", EmitDefaultValue = false)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// Gets or Sets StreetNumber
        /// </summary>
        [DataMember(Name = "streetNumber", EmitDefaultValue = false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name = "suburb", EmitDefaultValue = false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "postcode", EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets DisplayAddress
        /// </summary>
        [DataMember(Name = "displayAddress", EmitDefaultValue = false)]
        public string DisplayAddress { get; set; }

        /// <summary>
        /// Gets or Sets DateOfSale
        /// </summary>
        [DataMember(Name = "dateOfSale", EmitDefaultValue = false)]
        public string DateOfSale { get; set; }

        /// <summary>
        /// Gets or Sets SoldPrice
        /// </summary>
        [DataMember(Name = "soldPrice", EmitDefaultValue = false)]
        public long SoldPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData {\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  DisplayAddress: ").Append(DisplayAddress).Append("\n");
            sb.Append("  DateOfSale: ").Append(DateOfSale).Append("\n");
            sb.Append("  SoldPrice: ").Append(SoldPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData);
        }

        /// <summary>
        /// Returns true if DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.DisplayAddress == input.DisplayAddress ||
                    (this.DisplayAddress != null &&
                    this.DisplayAddress.Equals(input.DisplayAddress))
                ) && 
                (
                    this.DateOfSale == input.DateOfSale ||
                    (this.DateOfSale != null &&
                    this.DateOfSale.Equals(input.DateOfSale))
                ) && 
                (
                    this.SoldPrice == input.SoldPrice ||
                    this.SoldPrice.Equals(input.SoldPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.DisplayAddress != null)
                    hashCode = hashCode * 59 + this.DisplayAddress.GetHashCode();
                if (this.DateOfSale != null)
                    hashCode = hashCode * 59 + this.DateOfSale.GetHashCode();
                hashCode = hashCode * 59 + this.SoldPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
