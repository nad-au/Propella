/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
    /// </summary>
    [DataContract(Name = "Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingRentalDetails")]
    public partial class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails : IEquatable<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails>, IValidatableObject
    {
        /// <summary>
        /// Defines RentalMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RentalMethodEnum
        {
            /// <summary>
            /// Enum NotStated for value: notStated
            /// </summary>
            [EnumMember(Value = "notStated")]
            NotStated = 1,

            /// <summary>
            /// Enum Rent for value: rent
            /// </summary>
            [EnumMember(Value = "rent")]
            Rent = 2,

            /// <summary>
            /// Enum Share for value: share
            /// </summary>
            [EnumMember(Value = "share")]
            Share = 3,

            /// <summary>
            /// Enum Holiday for value: holiday
            /// </summary>
            [EnumMember(Value = "holiday")]
            Holiday = 4,

            /// <summary>
            /// Enum Lease for value: lease
            /// </summary>
            [EnumMember(Value = "lease")]
            Lease = 5

        }

        /// <summary>
        /// Gets or Sets RentalMethod
        /// </summary>
        [DataMember(Name = "rentalMethod", EmitDefaultValue = false)]
        public RentalMethodEnum? RentalMethod { get; set; }
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 1,

            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 2

        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails" /> class.
        /// </summary>
        /// <param name="rentalMethod">rentalMethod.</param>
        /// <param name="source">source.</param>
        /// <param name="leasedDate">leasedDate.</param>
        /// <param name="leasedPrice">leasedPrice.</param>
        /// <param name="canDisplayPrice">canDisplayPrice.</param>
        /// <param name="leasedMonths">leasedMonths.</param>
        /// <param name="termOfLeaseFrom">termOfLeaseFrom.</param>
        /// <param name="termOfLeaseTo">termOfLeaseTo.</param>
        /// <param name="leaseOutgoings">leaseOutgoings.</param>
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails(RentalMethodEnum? rentalMethod = default(RentalMethodEnum?), SourceEnum? source = default(SourceEnum?), DateTime leasedDate = default(DateTime), int leasedPrice = default(int), bool canDisplayPrice = default(bool), int leasedMonths = default(int), int termOfLeaseFrom = default(int), int termOfLeaseTo = default(int), int leaseOutgoings = default(int))
        {
            this.RentalMethod = rentalMethod;
            this.Source = source;
            this.LeasedDate = leasedDate;
            this.LeasedPrice = leasedPrice;
            this.CanDisplayPrice = canDisplayPrice;
            this.LeasedMonths = leasedMonths;
            this.TermOfLeaseFrom = termOfLeaseFrom;
            this.TermOfLeaseTo = termOfLeaseTo;
            this.LeaseOutgoings = leaseOutgoings;
        }

        /// <summary>
        /// Gets or Sets LeasedDate
        /// </summary>
        [DataMember(Name = "leasedDate", EmitDefaultValue = false)]
        public DateTime LeasedDate { get; set; }

        /// <summary>
        /// Gets or Sets LeasedPrice
        /// </summary>
        [DataMember(Name = "leasedPrice", EmitDefaultValue = false)]
        public int LeasedPrice { get; set; }

        /// <summary>
        /// Gets or Sets CanDisplayPrice
        /// </summary>
        [DataMember(Name = "canDisplayPrice", EmitDefaultValue = false)]
        public bool CanDisplayPrice { get; set; }

        /// <summary>
        /// Gets or Sets LeasedMonths
        /// </summary>
        [DataMember(Name = "leasedMonths", EmitDefaultValue = false)]
        public int LeasedMonths { get; set; }

        /// <summary>
        /// Gets or Sets TermOfLeaseFrom
        /// </summary>
        [DataMember(Name = "termOfLeaseFrom", EmitDefaultValue = false)]
        public int TermOfLeaseFrom { get; set; }

        /// <summary>
        /// Gets or Sets TermOfLeaseTo
        /// </summary>
        [DataMember(Name = "termOfLeaseTo", EmitDefaultValue = false)]
        public int TermOfLeaseTo { get; set; }

        /// <summary>
        /// Gets or Sets LeaseOutgoings
        /// </summary>
        [DataMember(Name = "leaseOutgoings", EmitDefaultValue = false)]
        public int LeaseOutgoings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails {\n");
            sb.Append("  RentalMethod: ").Append(RentalMethod).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  LeasedDate: ").Append(LeasedDate).Append("\n");
            sb.Append("  LeasedPrice: ").Append(LeasedPrice).Append("\n");
            sb.Append("  CanDisplayPrice: ").Append(CanDisplayPrice).Append("\n");
            sb.Append("  LeasedMonths: ").Append(LeasedMonths).Append("\n");
            sb.Append("  TermOfLeaseFrom: ").Append(TermOfLeaseFrom).Append("\n");
            sb.Append("  TermOfLeaseTo: ").Append(TermOfLeaseTo).Append("\n");
            sb.Append("  LeaseOutgoings: ").Append(LeaseOutgoings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails);
        }

        /// <summary>
        /// Returns true if DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RentalMethod == input.RentalMethod ||
                    this.RentalMethod.Equals(input.RentalMethod)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.LeasedDate == input.LeasedDate ||
                    (this.LeasedDate != null &&
                    this.LeasedDate.Equals(input.LeasedDate))
                ) && 
                (
                    this.LeasedPrice == input.LeasedPrice ||
                    this.LeasedPrice.Equals(input.LeasedPrice)
                ) && 
                (
                    this.CanDisplayPrice == input.CanDisplayPrice ||
                    this.CanDisplayPrice.Equals(input.CanDisplayPrice)
                ) && 
                (
                    this.LeasedMonths == input.LeasedMonths ||
                    this.LeasedMonths.Equals(input.LeasedMonths)
                ) && 
                (
                    this.TermOfLeaseFrom == input.TermOfLeaseFrom ||
                    this.TermOfLeaseFrom.Equals(input.TermOfLeaseFrom)
                ) && 
                (
                    this.TermOfLeaseTo == input.TermOfLeaseTo ||
                    this.TermOfLeaseTo.Equals(input.TermOfLeaseTo)
                ) && 
                (
                    this.LeaseOutgoings == input.LeaseOutgoings ||
                    this.LeaseOutgoings.Equals(input.LeaseOutgoings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.RentalMethod.GetHashCode();
                hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.LeasedDate != null)
                    hashCode = hashCode * 59 + this.LeasedDate.GetHashCode();
                hashCode = hashCode * 59 + this.LeasedPrice.GetHashCode();
                hashCode = hashCode * 59 + this.CanDisplayPrice.GetHashCode();
                hashCode = hashCode * 59 + this.LeasedMonths.GetHashCode();
                hashCode = hashCode * 59 + this.TermOfLeaseFrom.GetHashCode();
                hashCode = hashCode * 59 + this.TermOfLeaseTo.GetHashCode();
                hashCode = hashCode * 59 + this.LeaseOutgoings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
