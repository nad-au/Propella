/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
    /// </summary>
    [DataContract(Name = "Domain.ListingsService.v1.Model.DomainListingsApiModelQueryResultsListingSaleDetails")]
    public partial class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails : IEquatable<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails>, IValidatableObject
    {
        /// <summary>
        /// Defines SaleMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SaleMethodEnum
        {
            /// <summary>
            /// Enum NotStated for value: notStated
            /// </summary>
            [EnumMember(Value = "notStated")]
            NotStated = 1,

            /// <summary>
            /// Enum Auction for value: auction
            /// </summary>
            [EnumMember(Value = "auction")]
            Auction = 2,

            /// <summary>
            /// Enum PrivateTreaty for value: privateTreaty
            /// </summary>
            [EnumMember(Value = "privateTreaty")]
            PrivateTreaty = 3,

            /// <summary>
            /// Enum Tender for value: tender
            /// </summary>
            [EnumMember(Value = "tender")]
            Tender = 4,

            /// <summary>
            /// Enum ExpressionOfInterest for value: expressionOfInterest
            /// </summary>
            [EnumMember(Value = "expressionOfInterest")]
            ExpressionOfInterest = 5

        }

        /// <summary>
        /// Gets or Sets SaleMethod
        /// </summary>
        [DataMember(Name = "saleMethod", EmitDefaultValue = false)]
        public SaleMethodEnum? SaleMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails" /> class.
        /// </summary>
        /// <param name="saleMethod">saleMethod.</param>
        /// <param name="soldDetails">soldDetails.</param>
        /// <param name="auctionDetails">auctionDetails.</param>
        /// <param name="tenderDetails">tenderDetails.</param>
        /// <param name="tenantDetails">tenantDetails.</param>
        /// <param name="annualReturn">annualReturn.</param>
        /// <param name="saleTerms">saleTerms.</param>
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails(SaleMethodEnum? saleMethod = default(SaleMethodEnum?), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails soldDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails auctionDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails tenderDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails tenantDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails), int annualReturn = default(int), string saleTerms = default(string))
        {
            this.SaleMethod = saleMethod;
            this.SoldDetails = soldDetails;
            this.AuctionDetails = auctionDetails;
            this.TenderDetails = tenderDetails;
            this.TenantDetails = tenantDetails;
            this.AnnualReturn = annualReturn;
            this.SaleTerms = saleTerms;
        }

        /// <summary>
        /// Gets or Sets SoldDetails
        /// </summary>
        [DataMember(Name = "soldDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails SoldDetails { get; set; }

        /// <summary>
        /// Gets or Sets AuctionDetails
        /// </summary>
        [DataMember(Name = "auctionDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails AuctionDetails { get; set; }

        /// <summary>
        /// Gets or Sets TenderDetails
        /// </summary>
        [DataMember(Name = "tenderDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails TenderDetails { get; set; }

        /// <summary>
        /// Gets or Sets TenantDetails
        /// </summary>
        [DataMember(Name = "tenantDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails TenantDetails { get; set; }

        /// <summary>
        /// Gets or Sets AnnualReturn
        /// </summary>
        [DataMember(Name = "annualReturn", EmitDefaultValue = false)]
        public int AnnualReturn { get; set; }

        /// <summary>
        /// Gets or Sets SaleTerms
        /// </summary>
        [DataMember(Name = "saleTerms", EmitDefaultValue = false)]
        public string SaleTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails {\n");
            sb.Append("  SaleMethod: ").Append(SaleMethod).Append("\n");
            sb.Append("  SoldDetails: ").Append(SoldDetails).Append("\n");
            sb.Append("  AuctionDetails: ").Append(AuctionDetails).Append("\n");
            sb.Append("  TenderDetails: ").Append(TenderDetails).Append("\n");
            sb.Append("  TenantDetails: ").Append(TenantDetails).Append("\n");
            sb.Append("  AnnualReturn: ").Append(AnnualReturn).Append("\n");
            sb.Append("  SaleTerms: ").Append(SaleTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails);
        }

        /// <summary>
        /// Returns true if DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SaleMethod == input.SaleMethod ||
                    this.SaleMethod.Equals(input.SaleMethod)
                ) && 
                (
                    this.SoldDetails == input.SoldDetails ||
                    (this.SoldDetails != null &&
                    this.SoldDetails.Equals(input.SoldDetails))
                ) && 
                (
                    this.AuctionDetails == input.AuctionDetails ||
                    (this.AuctionDetails != null &&
                    this.AuctionDetails.Equals(input.AuctionDetails))
                ) && 
                (
                    this.TenderDetails == input.TenderDetails ||
                    (this.TenderDetails != null &&
                    this.TenderDetails.Equals(input.TenderDetails))
                ) && 
                (
                    this.TenantDetails == input.TenantDetails ||
                    (this.TenantDetails != null &&
                    this.TenantDetails.Equals(input.TenantDetails))
                ) && 
                (
                    this.AnnualReturn == input.AnnualReturn ||
                    this.AnnualReturn.Equals(input.AnnualReturn)
                ) && 
                (
                    this.SaleTerms == input.SaleTerms ||
                    (this.SaleTerms != null &&
                    this.SaleTerms.Equals(input.SaleTerms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SaleMethod.GetHashCode();
                if (this.SoldDetails != null)
                    hashCode = hashCode * 59 + this.SoldDetails.GetHashCode();
                if (this.AuctionDetails != null)
                    hashCode = hashCode * 59 + this.AuctionDetails.GetHashCode();
                if (this.TenderDetails != null)
                    hashCode = hashCode * 59 + this.TenderDetails.GetHashCode();
                if (this.TenantDetails != null)
                    hashCode = hashCode * 59 + this.TenantDetails.GetHashCode();
                hashCode = hashCode * 59 + this.AnnualReturn.GetHashCode();
                if (this.SaleTerms != null)
                    hashCode = hashCode * 59 + this.SaleTerms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
