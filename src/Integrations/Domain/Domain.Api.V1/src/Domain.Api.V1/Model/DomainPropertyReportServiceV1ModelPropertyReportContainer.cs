/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainPropertyReportServiceV1ModelPropertyReportContainer
    /// </summary>
    [DataContract(Name = "Domain.PropertyReportService.v1.Model.PropertyReportContainer")]
    public partial class DomainPropertyReportServiceV1ModelPropertyReportContainer : IEquatable<DomainPropertyReportServiceV1ModelPropertyReportContainer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPropertyReportServiceV1ModelPropertyReportContainer" /> class.
        /// </summary>
        /// <param name="mimeType">mimeType.</param>
        /// <param name="content">content.</param>
        public DomainPropertyReportServiceV1ModelPropertyReportContainer(string mimeType = default(string), byte[] content = default(byte[]))
        {
            this.MimeType = mimeType;
            this.Content = content;
        }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name = "mimeType", EmitDefaultValue = false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public byte[] Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPropertyReportServiceV1ModelPropertyReportContainer {\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPropertyReportServiceV1ModelPropertyReportContainer);
        }

        /// <summary>
        /// Returns true if DomainPropertyReportServiceV1ModelPropertyReportContainer instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPropertyReportServiceV1ModelPropertyReportContainer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPropertyReportServiceV1ModelPropertyReportContainer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
