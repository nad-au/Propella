/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Recipient of an enquiry
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Enquiries.Recipient")]
    public partial class DomainPublicAdapterWebApiModelsV1EnquiriesRecipient : IEquatable<DomainPublicAdapterWebApiModelsV1EnquiriesRecipient>, IValidatableObject
    {
        /// <summary>
        /// Type of recipient
        /// </summary>
        /// <value>Type of recipient</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecipientTypeEnum
        {
            /// <summary>
            /// Enum Primary for value: primary
            /// </summary>
            [EnumMember(Value = "primary")]
            Primary = 1,

            /// <summary>
            /// Enum Secondary for value: secondary
            /// </summary>
            [EnumMember(Value = "secondary")]
            Secondary = 2,

            /// <summary>
            /// Enum Hidden for value: hidden
            /// </summary>
            [EnumMember(Value = "hidden")]
            Hidden = 3

        }

        /// <summary>
        /// Type of recipient
        /// </summary>
        /// <value>Type of recipient</value>
        [DataMember(Name = "recipientType", EmitDefaultValue = false)]
        public RecipientTypeEnum? RecipientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1EnquiriesRecipient" /> class.
        /// </summary>
        /// <param name="recipientType">Type of recipient.</param>
        /// <param name="address">Delivery address ( email address, phone number etc. )              of the recipient.</param>
        public DomainPublicAdapterWebApiModelsV1EnquiriesRecipient(RecipientTypeEnum? recipientType = default(RecipientTypeEnum?), string address = default(string))
        {
            this.RecipientType = recipientType;
            this.Address = address;
        }

        /// <summary>
        /// Delivery address ( email address, phone number etc. )              of the recipient
        /// </summary>
        /// <value>Delivery address ( email address, phone number etc. )              of the recipient</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1EnquiriesRecipient {\n");
            sb.Append("  RecipientType: ").Append(RecipientType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1EnquiriesRecipient);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1EnquiriesRecipient instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1EnquiriesRecipient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1EnquiriesRecipient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecipientType == input.RecipientType ||
                    this.RecipientType.Equals(input.RecipientType)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.RecipientType.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
