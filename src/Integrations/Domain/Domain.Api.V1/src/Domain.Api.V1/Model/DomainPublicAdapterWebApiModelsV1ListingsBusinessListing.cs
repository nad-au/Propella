/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Listing details for univesal app
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Listings.Business.Listing")]
    public partial class DomainPublicAdapterWebApiModelsV1ListingsBusinessListing : IEquatable<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1ListingsBusinessListing" /> class.
        /// </summary>
        /// <param name="ad">ad.</param>
        /// <param name="price">Formatted listing price.</param>
        /// <param name="advertiser">advertiser.</param>
        /// <param name="geoLocation">geoLocation.</param>
        /// <param name="propertyArea">Building size.</param>
        /// <param name="propertyType">Property type.</param>
        /// <param name="address">Full address.</param>
        /// <param name="headline">Headline.</param>
        /// <param name="hasVideo">Has video?.</param>
        /// <param name="media">Media resources for listing (images, video, floor plans).</param>
        /// <param name="auctionDate">Auction date.</param>
        /// <param name="id">AdID.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="carspaceCount">Car parking spaces count.</param>
        public DomainPublicAdapterWebApiModelsV1ListingsBusinessListing(DomainPublicAdapterWebApiModelsV1ListingsBusinessAd ad = default(DomainPublicAdapterWebApiModelsV1ListingsBusinessAd), string price = default(string), DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser advertiser = default(DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser), DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation geoLocation = default(DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation), string propertyArea = default(string), string propertyType = default(string), string address = default(string), string headline = default(string), bool hasVideo = default(bool), List<DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia> media = default(List<DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia>), string auctionDate = default(string), int id = default(int), DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata metadata = default(DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata), int carspaceCount = default(int))
        {
            this.Ad = ad;
            this.Price = price;
            this.Advertiser = advertiser;
            this.GeoLocation = geoLocation;
            this.PropertyArea = propertyArea;
            this.PropertyType = propertyType;
            this.Address = address;
            this.Headline = headline;
            this.HasVideo = hasVideo;
            this.Media = media;
            this.AuctionDate = auctionDate;
            this.Id = id;
            this.Metadata = metadata;
            this.CarspaceCount = carspaceCount;
        }

        /// <summary>
        /// Gets or Sets Ad
        /// </summary>
        [DataMember(Name = "ad", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1ListingsBusinessAd Ad { get; set; }

        /// <summary>
        /// Formatted listing price
        /// </summary>
        /// <value>Formatted listing price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets Advertiser
        /// </summary>
        [DataMember(Name = "advertiser", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser Advertiser { get; set; }

        /// <summary>
        /// Gets or Sets GeoLocation
        /// </summary>
        [DataMember(Name = "geoLocation", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation GeoLocation { get; set; }

        /// <summary>
        /// Building size
        /// </summary>
        /// <value>Building size</value>
        [DataMember(Name = "propertyArea", EmitDefaultValue = false)]
        public string PropertyArea { get; set; }

        /// <summary>
        /// Property type
        /// </summary>
        /// <value>Property type</value>
        [DataMember(Name = "propertyType", EmitDefaultValue = false)]
        public string PropertyType { get; set; }

        /// <summary>
        /// Full address
        /// </summary>
        /// <value>Full address</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Headline
        /// </summary>
        /// <value>Headline</value>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public string Headline { get; set; }

        /// <summary>
        /// Has video?
        /// </summary>
        /// <value>Has video?</value>
        [DataMember(Name = "hasVideo", EmitDefaultValue = false)]
        public bool HasVideo { get; set; }

        /// <summary>
        /// Media resources for listing (images, video, floor plans)
        /// </summary>
        /// <value>Media resources for listing (images, video, floor plans)</value>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia> Media { get; set; }

        /// <summary>
        /// Auction date
        /// </summary>
        /// <value>Auction date</value>
        [DataMember(Name = "auctionDate", EmitDefaultValue = false)]
        public string AuctionDate { get; set; }

        /// <summary>
        /// AdID
        /// </summary>
        /// <value>AdID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata Metadata { get; set; }

        /// <summary>
        /// Car parking spaces count
        /// </summary>
        /// <value>Car parking spaces count</value>
        [DataMember(Name = "carspaceCount", EmitDefaultValue = false)]
        public int CarspaceCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1ListingsBusinessListing {\n");
            sb.Append("  Ad: ").Append(Ad).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Advertiser: ").Append(Advertiser).Append("\n");
            sb.Append("  GeoLocation: ").Append(GeoLocation).Append("\n");
            sb.Append("  PropertyArea: ").Append(PropertyArea).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  HasVideo: ").Append(HasVideo).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  AuctionDate: ").Append(AuctionDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CarspaceCount: ").Append(CarspaceCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1ListingsBusinessListing);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1ListingsBusinessListing instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1ListingsBusinessListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1ListingsBusinessListing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ad == input.Ad ||
                    (this.Ad != null &&
                    this.Ad.Equals(input.Ad))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Advertiser == input.Advertiser ||
                    (this.Advertiser != null &&
                    this.Advertiser.Equals(input.Advertiser))
                ) && 
                (
                    this.GeoLocation == input.GeoLocation ||
                    (this.GeoLocation != null &&
                    this.GeoLocation.Equals(input.GeoLocation))
                ) && 
                (
                    this.PropertyArea == input.PropertyArea ||
                    (this.PropertyArea != null &&
                    this.PropertyArea.Equals(input.PropertyArea))
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    (this.PropertyType != null &&
                    this.PropertyType.Equals(input.PropertyType))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.HasVideo == input.HasVideo ||
                    this.HasVideo.Equals(input.HasVideo)
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.AuctionDate == input.AuctionDate ||
                    (this.AuctionDate != null &&
                    this.AuctionDate.Equals(input.AuctionDate))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.CarspaceCount == input.CarspaceCount ||
                    this.CarspaceCount.Equals(input.CarspaceCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ad != null)
                    hashCode = hashCode * 59 + this.Ad.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Advertiser != null)
                    hashCode = hashCode * 59 + this.Advertiser.GetHashCode();
                if (this.GeoLocation != null)
                    hashCode = hashCode * 59 + this.GeoLocation.GetHashCode();
                if (this.PropertyArea != null)
                    hashCode = hashCode * 59 + this.PropertyArea.GetHashCode();
                if (this.PropertyType != null)
                    hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                hashCode = hashCode * 59 + this.HasVideo.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.AuctionDate != null)
                    hashCode = hashCode * 59 + this.AuctionDate.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                hashCode = hashCode * 59 + this.CarspaceCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
