/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// Represents a Property Listing
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Listings.Listing")]
    public partial class DomainPublicAdapterWebApiModelsV1ListingsListing : IEquatable<DomainPublicAdapterWebApiModelsV1ListingsListing>, IValidatableObject
    {
        /// <summary>
        /// The type of Advertisement
        /// </summary>
        /// <value>The type of Advertisement</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectiveEnum
        {
            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            [EnumMember(Value = "sale")]
            Sale = 1,

            /// <summary>
            /// Enum Rent for value: rent
            /// </summary>
            [EnumMember(Value = "rent")]
            Rent = 2

        }

        /// <summary>
        /// The type of Advertisement
        /// </summary>
        /// <value>The type of Advertisement</value>
        [DataMember(Name = "objective", EmitDefaultValue = false)]
        public ObjectiveEnum? Objective { get; set; }
        /// <summary>
        /// Defines PropertyTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropertyTypesEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum AccessoriesParts for value: accessoriesParts
            /// </summary>
            [EnumMember(Value = "accessoriesParts")]
            AccessoriesParts = 2,

            /// <summary>
            /// Enum AccommodationTourism for value: accommodationTourism
            /// </summary>
            [EnumMember(Value = "accommodationTourism")]
            AccommodationTourism = 3,

            /// <summary>
            /// Enum Accounting for value: accounting
            /// </summary>
            [EnumMember(Value = "accounting")]
            Accounting = 4,

            /// <summary>
            /// Enum AcreageSemiRural for value: acreageSemiRural
            /// </summary>
            [EnumMember(Value = "acreageSemiRural")]
            AcreageSemiRural = 5,

            /// <summary>
            /// Enum Adult for value: adult
            /// </summary>
            [EnumMember(Value = "adult")]
            Adult = 6,

            /// <summary>
            /// Enum AdvertisingMarketing for value: advertisingMarketing
            /// </summary>
            [EnumMember(Value = "advertisingMarketing")]
            AdvertisingMarketing = 7,

            /// <summary>
            /// Enum Aerial for value: aerial
            /// </summary>
            [EnumMember(Value = "aerial")]
            Aerial = 8,

            /// <summary>
            /// Enum Aeronautical for value: aeronautical
            /// </summary>
            [EnumMember(Value = "aeronautical")]
            Aeronautical = 9,

            /// <summary>
            /// Enum AgedCare for value: agedCare
            /// </summary>
            [EnumMember(Value = "agedCare")]
            AgedCare = 10,

            /// <summary>
            /// Enum Agricultural for value: agricultural
            /// </summary>
            [EnumMember(Value = "agricultural")]
            Agricultural = 11,

            /// <summary>
            /// Enum Air for value: air
            /// </summary>
            [EnumMember(Value = "air")]
            Air = 12,

            /// <summary>
            /// Enum Aircraft for value: aircraft
            /// </summary>
            [EnumMember(Value = "aircraft")]
            Aircraft = 13,

            /// <summary>
            /// Enum Alarms for value: alarms
            /// </summary>
            [EnumMember(Value = "alarms")]
            Alarms = 14,

            /// <summary>
            /// Enum AlcoholLiquor for value: alcoholLiquor
            /// </summary>
            [EnumMember(Value = "alcoholLiquor")]
            AlcoholLiquor = 15,

            /// <summary>
            /// Enum Amusements for value: amusements
            /// </summary>
            [EnumMember(Value = "amusements")]
            Amusements = 16,

            /// <summary>
            /// Enum AnimalRelated for value: animalRelated
            /// </summary>
            [EnumMember(Value = "animalRelated")]
            AnimalRelated = 17,

            /// <summary>
            /// Enum ApartmentUnitFlat for value: apartmentUnitFlat
            /// </summary>
            [EnumMember(Value = "apartmentUnitFlat")]
            ApartmentUnitFlat = 18,

            /// <summary>
            /// Enum Aquaculture for value: aquaculture
            /// </summary>
            [EnumMember(Value = "aquaculture")]
            Aquaculture = 19,

            /// <summary>
            /// Enum AquaticMarineMarinaBerth for value: aquaticMarineMarinaBerth
            /// </summary>
            [EnumMember(Value = "aquaticMarineMarinaBerth")]
            AquaticMarineMarinaBerth = 20,

            /// <summary>
            /// Enum ArtsCrafts for value: artsCrafts
            /// </summary>
            [EnumMember(Value = "artsCrafts")]
            ArtsCrafts = 21,

            /// <summary>
            /// Enum AutoElectrical for value: autoElectrical
            /// </summary>
            [EnumMember(Value = "autoElectrical")]
            AutoElectrical = 22,

            /// <summary>
            /// Enum Automotive for value: automotive
            /// </summary>
            [EnumMember(Value = "automotive")]
            Automotive = 23,

            /// <summary>
            /// Enum BackpackerHostel for value: backpackerHostel
            /// </summary>
            [EnumMember(Value = "backpackerHostel")]
            BackpackerHostel = 24,

            /// <summary>
            /// Enum Bakery for value: bakery
            /// </summary>
            [EnumMember(Value = "bakery")]
            Bakery = 25,

            /// <summary>
            /// Enum BarsNightclubs for value: barsNightclubs
            /// </summary>
            [EnumMember(Value = "barsNightclubs")]
            BarsNightclubs = 26,

            /// <summary>
            /// Enum BeautyHealth for value: beautyHealth
            /// </summary>
            [EnumMember(Value = "beautyHealth")]
            BeautyHealth = 27,

            /// <summary>
            /// Enum BeautyProducts for value: beautyProducts
            /// </summary>
            [EnumMember(Value = "beautyProducts")]
            BeautyProducts = 28,

            /// <summary>
            /// Enum BeautySalon for value: beautySalon
            /// </summary>
            [EnumMember(Value = "beautySalon")]
            BeautySalon = 29,

            /// <summary>
            /// Enum BikeAndMotorcycle for value: bikeAndMotorcycle
            /// </summary>
            [EnumMember(Value = "bikeAndMotorcycle")]
            BikeAndMotorcycle = 30,

            /// <summary>
            /// Enum BlockOfUnits for value: blockOfUnits
            /// </summary>
            [EnumMember(Value = "blockOfUnits")]
            BlockOfUnits = 31,

            /// <summary>
            /// Enum BoardingKennels for value: boardingKennels
            /// </summary>
            [EnumMember(Value = "boardingKennels")]
            BoardingKennels = 32,

            /// <summary>
            /// Enum BoatsMarineMarinaBerth for value: boatsMarineMarinaBerth
            /// </summary>
            [EnumMember(Value = "boatsMarineMarinaBerth")]
            BoatsMarineMarinaBerth = 33,

            /// <summary>
            /// Enum Bookkeeping for value: bookkeeping
            /// </summary>
            [EnumMember(Value = "bookkeeping")]
            Bookkeeping = 34,

            /// <summary>
            /// Enum Brokerage for value: brokerage
            /// </summary>
            [EnumMember(Value = "brokerage")]
            Brokerage = 35,

            /// <summary>
            /// Enum Builder for value: builder
            /// </summary>
            [EnumMember(Value = "builder")]
            Builder = 36,

            /// <summary>
            /// Enum BuildingAndConstruction for value: buildingAndConstruction
            /// </summary>
            [EnumMember(Value = "buildingAndConstruction")]
            BuildingAndConstruction = 37,

            /// <summary>
            /// Enum Bus for value: bus
            /// </summary>
            [EnumMember(Value = "bus")]
            Bus = 38,

            /// <summary>
            /// Enum Butcher for value: butcher
            /// </summary>
            [EnumMember(Value = "butcher")]
            Butcher = 39,

            /// <summary>
            /// Enum CafeCoffeeShop for value: cafeCoffeeShop
            /// </summary>
            [EnumMember(Value = "cafeCoffeeShop")]
            CafeCoffeeShop = 40,

            /// <summary>
            /// Enum Car for value: car
            /// </summary>
            [EnumMember(Value = "car")]
            Car = 41,

            /// <summary>
            /// Enum CarBusTruck for value: carBusTruck
            /// </summary>
            [EnumMember(Value = "carBusTruck")]
            CarBusTruck = 42,

            /// <summary>
            /// Enum CarDealership for value: carDealership
            /// </summary>
            [EnumMember(Value = "carDealership")]
            CarDealership = 43,

            /// <summary>
            /// Enum CarRental for value: carRental
            /// </summary>
            [EnumMember(Value = "carRental")]
            CarRental = 44,

            /// <summary>
            /// Enum Carspace for value: carspace
            /// </summary>
            [EnumMember(Value = "carspace")]
            Carspace = 45,

            /// <summary>
            /// Enum CarWash for value: carWash
            /// </summary>
            [EnumMember(Value = "carWash")]
            CarWash = 46,

            /// <summary>
            /// Enum CaravanPark for value: caravanPark
            /// </summary>
            [EnumMember(Value = "caravanPark")]
            CaravanPark = 47,

            /// <summary>
            /// Enum Carpenter for value: carpenter
            /// </summary>
            [EnumMember(Value = "carpenter")]
            Carpenter = 48,

            /// <summary>
            /// Enum Catering for value: catering
            /// </summary>
            [EnumMember(Value = "catering")]
            Catering = 49,

            /// <summary>
            /// Enum ChildCare for value: childCare
            /// </summary>
            [EnumMember(Value = "childCare")]
            ChildCare = 50,

            /// <summary>
            /// Enum Civil for value: civil
            /// </summary>
            [EnumMember(Value = "civil")]
            Civil = 51,

            /// <summary>
            /// Enum Cleaning for value: cleaning
            /// </summary>
            [EnumMember(Value = "cleaning")]
            Cleaning = 52,

            /// <summary>
            /// Enum CleaningAndMaintenance for value: cleaningAndMaintenance
            /// </summary>
            [EnumMember(Value = "cleaningAndMaintenance")]
            CleaningAndMaintenance = 53,

            /// <summary>
            /// Enum ClinicalPractice for value: clinicalPractice
            /// </summary>
            [EnumMember(Value = "clinicalPractice")]
            ClinicalPractice = 54,

            /// <summary>
            /// Enum ClothingAccessories for value: clothingAccessories
            /// </summary>
            [EnumMember(Value = "clothingAccessories")]
            ClothingAccessories = 55,

            /// <summary>
            /// Enum ClothingFootwear for value: clothingFootwear
            /// </summary>
            [EnumMember(Value = "clothingFootwear")]
            ClothingFootwear = 56,

            /// <summary>
            /// Enum Communication for value: communication
            /// </summary>
            [EnumMember(Value = "communication")]
            Communication = 57,

            /// <summary>
            /// Enum Communications for value: communications
            /// </summary>
            [EnumMember(Value = "communications")]
            Communications = 58,

            /// <summary>
            /// Enum ComputerIT for value: computerIT
            /// </summary>
            [EnumMember(Value = "computerIT")]
            ComputerIT = 59,

            /// <summary>
            /// Enum ComputerAndInternet for value: computerAndInternet
            /// </summary>
            [EnumMember(Value = "computerAndInternet")]
            ComputerAndInternet = 60,

            /// <summary>
            /// Enum Construction for value: construction
            /// </summary>
            [EnumMember(Value = "construction")]
            Construction = 61,

            /// <summary>
            /// Enum ConvenienceStore for value: convenienceStore
            /// </summary>
            [EnumMember(Value = "convenienceStore")]
            ConvenienceStore = 62,

            /// <summary>
            /// Enum CopyLaminate for value: copyLaminate
            /// </summary>
            [EnumMember(Value = "copyLaminate")]
            CopyLaminate = 63,

            /// <summary>
            /// Enum Courier for value: courier
            /// </summary>
            [EnumMember(Value = "courier")]
            Courier = 64,

            /// <summary>
            /// Enum CropHarvesting for value: cropHarvesting
            /// </summary>
            [EnumMember(Value = "cropHarvesting")]
            CropHarvesting = 65,

            /// <summary>
            /// Enum Customs for value: customs
            /// </summary>
            [EnumMember(Value = "customs")]
            Customs = 66,

            /// <summary>
            /// Enum DairyFarming for value: dairyFarming
            /// </summary>
            [EnumMember(Value = "dairyFarming")]
            DairyFarming = 67,

            /// <summary>
            /// Enum Deli for value: deli
            /// </summary>
            [EnumMember(Value = "deli")]
            Deli = 68,

            /// <summary>
            /// Enum Dental for value: dental
            /// </summary>
            [EnumMember(Value = "dental")]
            Dental = 69,

            /// <summary>
            /// Enum Detailing for value: detailing
            /// </summary>
            [EnumMember(Value = "detailing")]
            Detailing = 70,

            /// <summary>
            /// Enum DevelopmentLand for value: developmentLand
            /// </summary>
            [EnumMember(Value = "developmentLand")]
            DevelopmentLand = 71,

            /// <summary>
            /// Enum DevelopmentSite for value: developmentSite
            /// </summary>
            [EnumMember(Value = "developmentSite")]
            DevelopmentSite = 72,

            /// <summary>
            /// Enum Distributors for value: distributors
            /// </summary>
            [EnumMember(Value = "distributors")]
            Distributors = 73,

            /// <summary>
            /// Enum DrivingSchools for value: drivingSchools
            /// </summary>
            [EnumMember(Value = "drivingSchools")]
            DrivingSchools = 74,

            /// <summary>
            /// Enum Duplex for value: duplex
            /// </summary>
            [EnumMember(Value = "duplex")]
            Duplex = 75,

            /// <summary>
            /// Enum EducationTraining for value: educationTraining
            /// </summary>
            [EnumMember(Value = "educationTraining")]
            EducationTraining = 76,

            /// <summary>
            /// Enum Educational for value: educational
            /// </summary>
            [EnumMember(Value = "educational")]
            Educational = 77,

            /// <summary>
            /// Enum Electrical for value: electrical
            /// </summary>
            [EnumMember(Value = "electrical")]
            Electrical = 78,

            /// <summary>
            /// Enum EmploymentRecruitment for value: employmentRecruitment
            /// </summary>
            [EnumMember(Value = "employmentRecruitment")]
            EmploymentRecruitment = 79,

            /// <summary>
            /// Enum Entertainment for value: entertainment
            /// </summary>
            [EnumMember(Value = "entertainment")]
            Entertainment = 80,

            /// <summary>
            /// Enum EntertainmentTechnology for value: entertainmentTechnology
            /// </summary>
            [EnumMember(Value = "entertainmentTechnology")]
            EntertainmentTechnology = 81,

            /// <summary>
            /// Enum Export for value: export
            /// </summary>
            [EnumMember(Value = "export")]
            Export = 82,

            /// <summary>
            /// Enum Farm for value: farm
            /// </summary>
            [EnumMember(Value = "farm")]
            Farm = 83,

            /// <summary>
            /// Enum Farming for value: farming
            /// </summary>
            [EnumMember(Value = "farming")]
            Farming = 84,

            /// <summary>
            /// Enum Fertiliser for value: fertiliser
            /// </summary>
            [EnumMember(Value = "fertiliser")]
            Fertiliser = 85,

            /// <summary>
            /// Enum Finance for value: finance
            /// </summary>
            [EnumMember(Value = "finance")]
            Finance = 86,

            /// <summary>
            /// Enum FinancialServices for value: financialServices
            /// </summary>
            [EnumMember(Value = "financialServices")]
            FinancialServices = 87,

            /// <summary>
            /// Enum FishingForestry for value: fishingForestry
            /// </summary>
            [EnumMember(Value = "fishingForestry")]
            FishingForestry = 88,

            /// <summary>
            /// Enum FloristNursery for value: floristNursery
            /// </summary>
            [EnumMember(Value = "floristNursery")]
            FloristNursery = 89,

            /// <summary>
            /// Enum FoodBeverage for value: foodBeverage
            /// </summary>
            [EnumMember(Value = "foodBeverage")]
            FoodBeverage = 90,

            /// <summary>
            /// Enum FoodBeverageHospitality for value: foodBeverageHospitality
            /// </summary>
            [EnumMember(Value = "foodBeverageHospitality")]
            FoodBeverageHospitality = 91,

            /// <summary>
            /// Enum FranchiseBusinessOpportunities for value: franchiseBusinessOpportunities
            /// </summary>
            [EnumMember(Value = "franchiseBusinessOpportunities")]
            FranchiseBusinessOpportunities = 92,

            /// <summary>
            /// Enum Freight for value: freight
            /// </summary>
            [EnumMember(Value = "freight")]
            Freight = 93,

            /// <summary>
            /// Enum FruitVegFreshProduce for value: fruitVegFreshProduce
            /// </summary>
            [EnumMember(Value = "fruitVegFreshProduce")]
            FruitVegFreshProduce = 94,

            /// <summary>
            /// Enum FruitPicking for value: fruitPicking
            /// </summary>
            [EnumMember(Value = "fruitPicking")]
            FruitPicking = 95,

            /// <summary>
            /// Enum FunctionCentre for value: functionCentre
            /// </summary>
            [EnumMember(Value = "functionCentre")]
            FunctionCentre = 96,

            /// <summary>
            /// Enum FurnitureTimber for value: furnitureTimber
            /// </summary>
            [EnumMember(Value = "furnitureTimber")]
            FurnitureTimber = 97,

            /// <summary>
            /// Enum Gambling for value: gambling
            /// </summary>
            [EnumMember(Value = "gambling")]
            Gambling = 98,

            /// <summary>
            /// Enum GardenHousehold for value: gardenHousehold
            /// </summary>
            [EnumMember(Value = "gardenHousehold")]
            GardenHousehold = 99,

            /// <summary>
            /// Enum GardenNurseries for value: gardenNurseries
            /// </summary>
            [EnumMember(Value = "gardenNurseries")]
            GardenNurseries = 100,

            /// <summary>
            /// Enum Gardening for value: gardening
            /// </summary>
            [EnumMember(Value = "gardening")]
            Gardening = 101,

            /// <summary>
            /// Enum GlassCeramic for value: glassCeramic
            /// </summary>
            [EnumMember(Value = "glassCeramic")]
            GlassCeramic = 102,

            /// <summary>
            /// Enum GuestHouseBB for value: guestHouseBB
            /// </summary>
            [EnumMember(Value = "guestHouseBB")]
            GuestHouseBB = 103,

            /// <summary>
            /// Enum Hairdresser for value: hairdresser
            /// </summary>
            [EnumMember(Value = "hairdresser")]
            Hairdresser = 104,

            /// <summary>
            /// Enum HealthBeauty for value: healthBeauty
            /// </summary>
            [EnumMember(Value = "healthBeauty")]
            HealthBeauty = 105,

            /// <summary>
            /// Enum HealthSpa for value: healthSpa
            /// </summary>
            [EnumMember(Value = "healthSpa")]
            HealthSpa = 106,

            /// <summary>
            /// Enum Hire for value: hire
            /// </summary>
            [EnumMember(Value = "hire")]
            Hire = 107,

            /// <summary>
            /// Enum HomeGarden for value: homeGarden
            /// </summary>
            [EnumMember(Value = "homeGarden")]
            HomeGarden = 108,

            /// <summary>
            /// Enum HomeBased for value: homeBased
            /// </summary>
            [EnumMember(Value = "homeBased")]
            HomeBased = 109,

            /// <summary>
            /// Enum NewHomeDesigns for value: newHomeDesigns
            /// </summary>
            [EnumMember(Value = "newHomeDesigns")]
            NewHomeDesigns = 110,

            /// <summary>
            /// Enum HomewareHardware for value: homewareHardware
            /// </summary>
            [EnumMember(Value = "homewareHardware")]
            HomewareHardware = 111,

            /// <summary>
            /// Enum Hospital for value: hospital
            /// </summary>
            [EnumMember(Value = "hospital")]
            Hospital = 112,

            /// <summary>
            /// Enum Hotel for value: hotel
            /// </summary>
            [EnumMember(Value = "hotel")]
            Hotel = 113,

            /// <summary>
            /// Enum HotelLeisure for value: hotelLeisure
            /// </summary>
            [EnumMember(Value = "hotelLeisure")]
            HotelLeisure = 114,

            /// <summary>
            /// Enum House for value: house
            /// </summary>
            [EnumMember(Value = "house")]
            House = 115,

            /// <summary>
            /// Enum NewHouseLand for value: newHouseLand
            /// </summary>
            [EnumMember(Value = "newHouseLand")]
            NewHouseLand = 116,

            /// <summary>
            /// Enum HuntingTrap for value: huntingTrap
            /// </summary>
            [EnumMember(Value = "huntingTrap")]
            HuntingTrap = 117,

            /// <summary>
            /// Enum Import for value: import
            /// </summary>
            [EnumMember(Value = "import")]
            Import = 118,

            /// <summary>
            /// Enum ImportExportWholesale for value: importExportWholesale
            /// </summary>
            [EnumMember(Value = "importExportWholesale")]
            ImportExportWholesale = 119,

            /// <summary>
            /// Enum IndustrialManufacturing for value: industrialManufacturing
            /// </summary>
            [EnumMember(Value = "industrialManufacturing")]
            IndustrialManufacturing = 120,

            /// <summary>
            /// Enum IndustrialWarehouse for value: industrialWarehouse
            /// </summary>
            [EnumMember(Value = "industrialWarehouse")]
            IndustrialWarehouse = 121,

            /// <summary>
            /// Enum Insemination for value: insemination
            /// </summary>
            [EnumMember(Value = "insemination")]
            Insemination = 122,

            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 123,

            /// <summary>
            /// Enum Internet for value: internet
            /// </summary>
            [EnumMember(Value = "internet")]
            Internet = 124,

            /// <summary>
            /// Enum IrrigationServices for value: irrigationServices
            /// </summary>
            [EnumMember(Value = "irrigationServices")]
            IrrigationServices = 125,

            /// <summary>
            /// Enum JuiceBar for value: juiceBar
            /// </summary>
            [EnumMember(Value = "juiceBar")]
            JuiceBar = 126,

            /// <summary>
            /// Enum LandClearing for value: landClearing
            /// </summary>
            [EnumMember(Value = "landClearing")]
            LandClearing = 127,

            /// <summary>
            /// Enum NewLand for value: newLand
            /// </summary>
            [EnumMember(Value = "newLand")]
            NewLand = 128,

            /// <summary>
            /// Enum Landscaping for value: landscaping
            /// </summary>
            [EnumMember(Value = "landscaping")]
            Landscaping = 129,

            /// <summary>
            /// Enum LaundryDryCleaning for value: laundryDryCleaning
            /// </summary>
            [EnumMember(Value = "laundryDryCleaning")]
            LaundryDryCleaning = 130,

            /// <summary>
            /// Enum Legal for value: legal
            /// </summary>
            [EnumMember(Value = "legal")]
            Legal = 131,

            /// <summary>
            /// Enum LeisureEntertainment for value: leisureEntertainment
            /// </summary>
            [EnumMember(Value = "leisureEntertainment")]
            LeisureEntertainment = 132,

            /// <summary>
            /// Enum LimousineTaxi for value: limousineTaxi
            /// </summary>
            [EnumMember(Value = "limousineTaxi")]
            LimousineTaxi = 133,

            /// <summary>
            /// Enum Livestock for value: livestock
            /// </summary>
            [EnumMember(Value = "livestock")]
            Livestock = 134,

            /// <summary>
            /// Enum International for value: international
            /// </summary>
            [EnumMember(Value = "international")]
            International = 135,

            /// <summary>
            /// Enum Machinery for value: machinery
            /// </summary>
            [EnumMember(Value = "machinery")]
            Machinery = 136,

            /// <summary>
            /// Enum MachineryMetal for value: machineryMetal
            /// </summary>
            [EnumMember(Value = "machineryMetal")]
            MachineryMetal = 137,

            /// <summary>
            /// Enum ManagementRights for value: managementRights
            /// </summary>
            [EnumMember(Value = "managementRights")]
            ManagementRights = 138,

            /// <summary>
            /// Enum Manufacturers for value: manufacturers
            /// </summary>
            [EnumMember(Value = "manufacturers")]
            Manufacturers = 139,

            /// <summary>
            /// Enum ManufacturingEngineering for value: manufacturingEngineering
            /// </summary>
            [EnumMember(Value = "manufacturingEngineering")]
            ManufacturingEngineering = 140,

            /// <summary>
            /// Enum Marine for value: marine
            /// </summary>
            [EnumMember(Value = "marine")]
            Marine = 141,

            /// <summary>
            /// Enum Massage for value: massage
            /// </summary>
            [EnumMember(Value = "massage")]
            Massage = 142,

            /// <summary>
            /// Enum MechanicalRepair for value: mechanicalRepair
            /// </summary>
            [EnumMember(Value = "mechanicalRepair")]
            MechanicalRepair = 143,

            /// <summary>
            /// Enum Media for value: media
            /// </summary>
            [EnumMember(Value = "media")]
            Media = 144,

            /// <summary>
            /// Enum Medical for value: medical
            /// </summary>
            [EnumMember(Value = "medical")]
            Medical = 145,

            /// <summary>
            /// Enum MedicalConsulting for value: medicalConsulting
            /// </summary>
            [EnumMember(Value = "medicalConsulting")]
            MedicalConsulting = 146,

            /// <summary>
            /// Enum MedicalPractice for value: medicalPractice
            /// </summary>
            [EnumMember(Value = "medicalPractice")]
            MedicalPractice = 147,

            /// <summary>
            /// Enum MiningEarthMoving for value: miningEarthMoving
            /// </summary>
            [EnumMember(Value = "miningEarthMoving")]
            MiningEarthMoving = 148,

            /// <summary>
            /// Enum MobileServices for value: mobileServices
            /// </summary>
            [EnumMember(Value = "mobileServices")]
            MobileServices = 149,

            /// <summary>
            /// Enum Motel for value: motel
            /// </summary>
            [EnumMember(Value = "motel")]
            Motel = 150,

            /// <summary>
            /// Enum Motorcycle for value: motorcycle
            /// </summary>
            [EnumMember(Value = "motorcycle")]
            Motorcycle = 151,

            /// <summary>
            /// Enum MusicRelated for value: musicRelated
            /// </summary>
            [EnumMember(Value = "musicRelated")]
            MusicRelated = 152,

            /// <summary>
            /// Enum Mustering for value: mustering
            /// </summary>
            [EnumMember(Value = "mustering")]
            Mustering = 153,

            /// <summary>
            /// Enum Nails for value: nails
            /// </summary>
            [EnumMember(Value = "nails")]
            Nails = 154,

            /// <summary>
            /// Enum NaturalTherapies for value: naturalTherapies
            /// </summary>
            [EnumMember(Value = "naturalTherapies")]
            NaturalTherapies = 155,

            /// <summary>
            /// Enum NewApartments for value: newApartments
            /// </summary>
            [EnumMember(Value = "newApartments")]
            NewApartments = 156,

            /// <summary>
            /// Enum Newsagency for value: newsagency
            /// </summary>
            [EnumMember(Value = "newsagency")]
            Newsagency = 157,

            /// <summary>
            /// Enum Nursery for value: nursery
            /// </summary>
            [EnumMember(Value = "nursery")]
            Nursery = 158,

            /// <summary>
            /// Enum NursingHome for value: nursingHome
            /// </summary>
            [EnumMember(Value = "nursingHome")]
            NursingHome = 159,

            /// <summary>
            /// Enum Offices for value: offices
            /// </summary>
            [EnumMember(Value = "offices")]
            Offices = 160,

            /// <summary>
            /// Enum OfficeSupplies for value: officeSupplies
            /// </summary>
            [EnumMember(Value = "officeSupplies")]
            OfficeSupplies = 161,

            /// <summary>
            /// Enum OilGas for value: oilGas
            /// </summary>
            [EnumMember(Value = "oilGas")]
            OilGas = 162,

            /// <summary>
            /// Enum PanelBeating for value: panelBeating
            /// </summary>
            [EnumMember(Value = "panelBeating")]
            PanelBeating = 163,

            /// <summary>
            /// Enum PaperPrinting for value: paperPrinting
            /// </summary>
            [EnumMember(Value = "paperPrinting")]
            PaperPrinting = 164,

            /// <summary>
            /// Enum ParkingCarSpace for value: parkingCarSpace
            /// </summary>
            [EnumMember(Value = "parkingCarSpace")]
            ParkingCarSpace = 165,

            /// <summary>
            /// Enum Penthouse for value: penthouse
            /// </summary>
            [EnumMember(Value = "penthouse")]
            Penthouse = 166,

            /// <summary>
            /// Enum PestRelated for value: pestRelated
            /// </summary>
            [EnumMember(Value = "pestRelated")]
            PestRelated = 167,

            /// <summary>
            /// Enum Pharmacies for value: pharmacies
            /// </summary>
            [EnumMember(Value = "pharmacies")]
            Pharmacies = 168,

            /// <summary>
            /// Enum Plastic for value: plastic
            /// </summary>
            [EnumMember(Value = "plastic")]
            Plastic = 169,

            /// <summary>
            /// Enum Plumbing for value: plumbing
            /// </summary>
            [EnumMember(Value = "plumbing")]
            Plumbing = 170,

            /// <summary>
            /// Enum PoolWater for value: poolWater
            /// </summary>
            [EnumMember(Value = "poolWater")]
            PoolWater = 171,

            /// <summary>
            /// Enum PostOffices for value: postOffices
            /// </summary>
            [EnumMember(Value = "postOffices")]
            PostOffices = 172,

            /// <summary>
            /// Enum PrintPhoto for value: printPhoto
            /// </summary>
            [EnumMember(Value = "printPhoto")]
            PrintPhoto = 173,

            /// <summary>
            /// Enum Professional for value: professional
            /// </summary>
            [EnumMember(Value = "professional")]
            Professional = 174,

            /// <summary>
            /// Enum PropertyRealEstate for value: propertyRealEstate
            /// </summary>
            [EnumMember(Value = "propertyRealEstate")]
            PropertyRealEstate = 175,

            /// <summary>
            /// Enum Rail for value: rail
            /// </summary>
            [EnumMember(Value = "rail")]
            Rail = 176,

            /// <summary>
            /// Enum RecreationSport for value: recreationSport
            /// </summary>
            [EnumMember(Value = "recreationSport")]
            RecreationSport = 177,

            /// <summary>
            /// Enum Recruitment for value: recruitment
            /// </summary>
            [EnumMember(Value = "recruitment")]
            Recruitment = 178,

            /// <summary>
            /// Enum Repair for value: repair
            /// </summary>
            [EnumMember(Value = "repair")]
            Repair = 179,

            /// <summary>
            /// Enum Resort for value: resort
            /// </summary>
            [EnumMember(Value = "resort")]
            Resort = 180,

            /// <summary>
            /// Enum Restaurant for value: restaurant
            /// </summary>
            [EnumMember(Value = "restaurant")]
            Restaurant = 181,

            /// <summary>
            /// Enum Retail for value: retail
            /// </summary>
            [EnumMember(Value = "retail")]
            Retail = 182,

            /// <summary>
            /// Enum Retailer for value: retailer
            /// </summary>
            [EnumMember(Value = "retailer")]
            Retailer = 183,

            /// <summary>
            /// Enum Retirement for value: retirement
            /// </summary>
            [EnumMember(Value = "retirement")]
            Retirement = 184,

            /// <summary>
            /// Enum RetirementVillage for value: retirementVillage
            /// </summary>
            [EnumMember(Value = "retirementVillage")]
            RetirementVillage = 185,

            /// <summary>
            /// Enum Road for value: road
            /// </summary>
            [EnumMember(Value = "road")]
            Road = 186,

            /// <summary>
            /// Enum Rural for value: rural
            /// </summary>
            [EnumMember(Value = "rural")]
            Rural = 187,

            /// <summary>
            /// Enum RuralCommercialFarming for value: ruralCommercialFarming
            /// </summary>
            [EnumMember(Value = "ruralCommercialFarming")]
            RuralCommercialFarming = 188,

            /// <summary>
            /// Enum Scientific for value: scientific
            /// </summary>
            [EnumMember(Value = "scientific")]
            Scientific = 189,

            /// <summary>
            /// Enum Sea for value: sea
            /// </summary>
            [EnumMember(Value = "sea")]
            Sea = 190,

            /// <summary>
            /// Enum Security for value: security
            /// </summary>
            [EnumMember(Value = "security")]
            Security = 191,

            /// <summary>
            /// Enum SemiDetached for value: semiDetached
            /// </summary>
            [EnumMember(Value = "semiDetached")]
            SemiDetached = 192,

            /// <summary>
            /// Enum ServiceStation for value: serviceStation
            /// </summary>
            [EnumMember(Value = "serviceStation")]
            ServiceStation = 193,

            /// <summary>
            /// Enum Services for value: services
            /// </summary>
            [EnumMember(Value = "services")]
            Services = 194,

            /// <summary>
            /// Enum Shearing for value: shearing
            /// </summary>
            [EnumMember(Value = "shearing")]
            Shearing = 195,

            /// <summary>
            /// Enum ShowroomsBulkyGoods for value: showroomsBulkyGoods
            /// </summary>
            [EnumMember(Value = "showroomsBulkyGoods")]
            ShowroomsBulkyGoods = 196,

            /// <summary>
            /// Enum SpecialistFarm for value: specialistFarm
            /// </summary>
            [EnumMember(Value = "specialistFarm")]
            SpecialistFarm = 197,

            /// <summary>
            /// Enum SportsComplexGym for value: sportsComplexGym
            /// </summary>
            [EnumMember(Value = "sportsComplexGym")]
            SportsComplexGym = 198,

            /// <summary>
            /// Enum Studio for value: studio
            /// </summary>
            [EnumMember(Value = "studio")]
            Studio = 199,

            /// <summary>
            /// Enum Supermarket for value: supermarket
            /// </summary>
            [EnumMember(Value = "supermarket")]
            Supermarket = 200,

            /// <summary>
            /// Enum TakeawayFood for value: takeawayFood
            /// </summary>
            [EnumMember(Value = "takeawayFood")]
            TakeawayFood = 201,

            /// <summary>
            /// Enum Taxi for value: taxi
            /// </summary>
            [EnumMember(Value = "taxi")]
            Taxi = 202,

            /// <summary>
            /// Enum Terrace for value: terrace
            /// </summary>
            [EnumMember(Value = "terrace")]
            Terrace = 203,

            /// <summary>
            /// Enum ThemePark for value: themePark
            /// </summary>
            [EnumMember(Value = "themePark")]
            ThemePark = 204,

            /// <summary>
            /// Enum Tours for value: tours
            /// </summary>
            [EnumMember(Value = "tours")]
            Tours = 205,

            /// <summary>
            /// Enum Townhouse for value: townhouse
            /// </summary>
            [EnumMember(Value = "townhouse")]
            Townhouse = 206,

            /// <summary>
            /// Enum Training for value: training
            /// </summary>
            [EnumMember(Value = "training")]
            Training = 207,

            /// <summary>
            /// Enum TransportDistribution for value: transportDistribution
            /// </summary>
            [EnumMember(Value = "transportDistribution")]
            TransportDistribution = 208,

            /// <summary>
            /// Enum Travel for value: travel
            /// </summary>
            [EnumMember(Value = "travel")]
            Travel = 209,

            /// <summary>
            /// Enum Truck for value: truck
            /// </summary>
            [EnumMember(Value = "truck")]
            Truck = 210,

            /// <summary>
            /// Enum VacantLand for value: vacantLand
            /// </summary>
            [EnumMember(Value = "vacantLand")]
            VacantLand = 211,

            /// <summary>
            /// Enum Vending for value: vending
            /// </summary>
            [EnumMember(Value = "vending")]
            Vending = 212,

            /// <summary>
            /// Enum Villa for value: villa
            /// </summary>
            [EnumMember(Value = "villa")]
            Villa = 213,

            /// <summary>
            /// Enum Water for value: water
            /// </summary>
            [EnumMember(Value = "water")]
            Water = 214,

            /// <summary>
            /// Enum Welding for value: welding
            /// </summary>
            [EnumMember(Value = "welding")]
            Welding = 215,

            /// <summary>
            /// Enum Wholesale for value: wholesale
            /// </summary>
            [EnumMember(Value = "wholesale")]
            Wholesale = 216,

            /// <summary>
            /// Enum Wholesalers for value: wholesalers
            /// </summary>
            [EnumMember(Value = "wholesalers")]
            Wholesalers = 217,

            /// <summary>
            /// Enum WoolClassing for value: woolClassing
            /// </summary>
            [EnumMember(Value = "woolClassing")]
            WoolClassing = 218,

            /// <summary>
            /// Enum Wreckers for value: wreckers
            /// </summary>
            [EnumMember(Value = "wreckers")]
            Wreckers = 219,

            /// <summary>
            /// Enum ServicedOffices for value: servicedOffices
            /// </summary>
            [EnumMember(Value = "servicedOffices")]
            ServicedOffices = 220,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 221,

            /// <summary>
            /// Enum AlcoholGrocery for value: alcoholGrocery
            /// </summary>
            [EnumMember(Value = "alcoholGrocery")]
            AlcoholGrocery = 222,

            /// <summary>
            /// Enum CafeRestaurants for value: cafeRestaurants
            /// </summary>
            [EnumMember(Value = "cafeRestaurants")]
            CafeRestaurants = 223,

            /// <summary>
            /// Enum DiscountStore for value: discountStore
            /// </summary>
            [EnumMember(Value = "discountStore")]
            DiscountStore = 224,

            /// <summary>
            /// Enum EcoFriendly for value: ecoFriendly
            /// </summary>
            [EnumMember(Value = "ecoFriendly")]
            EcoFriendly = 225,

            /// <summary>
            /// Enum Green for value: green
            /// </summary>
            [EnumMember(Value = "green")]
            Green = 226,

            /// <summary>
            /// Enum Grocery for value: grocery
            /// </summary>
            [EnumMember(Value = "grocery")]
            Grocery = 227,

            /// <summary>
            /// Enum SpecialityRetail for value: specialityRetail
            /// </summary>
            [EnumMember(Value = "specialityRetail")]
            SpecialityRetail = 228,

            /// <summary>
            /// Enum Storage for value: storage
            /// </summary>
            [EnumMember(Value = "storage")]
            Storage = 229,

            /// <summary>
            /// Enum TravelAgency for value: travelAgency
            /// </summary>
            [EnumMember(Value = "travelAgency")]
            TravelAgency = 230,

            /// <summary>
            /// Enum VarietyStore for value: varietyStore
            /// </summary>
            [EnumMember(Value = "varietyStore")]
            VarietyStore = 231,

            /// <summary>
            /// Enum ChickenShop for value: chickenShop
            /// </summary>
            [EnumMember(Value = "chickenShop")]
            ChickenShop = 232,

            /// <summary>
            /// Enum SeafoodShop for value: seafoodShop
            /// </summary>
            [EnumMember(Value = "seafoodShop")]
            SeafoodShop = 233,

            /// <summary>
            /// Enum DeliCafe for value: deliCafe
            /// </summary>
            [EnumMember(Value = "deliCafe")]
            DeliCafe = 234,

            /// <summary>
            /// Enum Cropping for value: cropping
            /// </summary>
            [EnumMember(Value = "cropping")]
            Cropping = 235,

            /// <summary>
            /// Enum Viticulture for value: viticulture
            /// </summary>
            [EnumMember(Value = "viticulture")]
            Viticulture = 236,

            /// <summary>
            /// Enum MixedFarming for value: mixedFarming
            /// </summary>
            [EnumMember(Value = "mixedFarming")]
            MixedFarming = 237,

            /// <summary>
            /// Enum Grazing for value: grazing
            /// </summary>
            [EnumMember(Value = "grazing")]
            Grazing = 238,

            /// <summary>
            /// Enum Horticulture for value: horticulture
            /// </summary>
            [EnumMember(Value = "horticulture")]
            Horticulture = 239,

            /// <summary>
            /// Enum Equine for value: equine
            /// </summary>
            [EnumMember(Value = "equine")]
            Equine = 240,

            /// <summary>
            /// Enum Farmlet for value: farmlet
            /// </summary>
            [EnumMember(Value = "farmlet")]
            Farmlet = 241,

            /// <summary>
            /// Enum Orchard for value: orchard
            /// </summary>
            [EnumMember(Value = "orchard")]
            Orchard = 242,

            /// <summary>
            /// Enum RuralLifestyle for value: ruralLifestyle
            /// </summary>
            [EnumMember(Value = "ruralLifestyle")]
            RuralLifestyle = 243,

            /// <summary>
            /// Enum OnlineBusiness for value: onlineBusiness
            /// </summary>
            [EnumMember(Value = "onlineBusiness")]
            OnlineBusiness = 244

        }


        /// <summary>
        /// Types of the property e.g. House, Duplex, Apartment/Unit/Flat
        /// </summary>
        /// <value>Types of the property e.g. House, Duplex, Apartment/Unit/Flat</value>
        [DataMember(Name = "propertyTypes", EmitDefaultValue = false)]
        public List<PropertyTypesEnum> PropertyTypes { get; set; }
        /// <summary>
        /// The current status of the property
        /// </summary>
        /// <value>The current status of the property</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Archived for value: archived
            /// </summary>
            [EnumMember(Value = "archived")]
            Archived = 2,

            /// <summary>
            /// Enum UnderOffer for value: underOffer
            /// </summary>
            [EnumMember(Value = "underOffer")]
            UnderOffer = 3,

            /// <summary>
            /// Enum Sold for value: sold
            /// </summary>
            [EnumMember(Value = "sold")]
            Sold = 4,

            /// <summary>
            /// Enum Leased for value: leased
            /// </summary>
            [EnumMember(Value = "leased")]
            Leased = 5,

            /// <summary>
            /// Enum NewDevelopment for value: newDevelopment
            /// </summary>
            [EnumMember(Value = "newDevelopment")]
            NewDevelopment = 6,

            /// <summary>
            /// Enum RecentlyUpdated for value: recentlyUpdated
            /// </summary>
            [EnumMember(Value = "recentlyUpdated")]
            RecentlyUpdated = 7,

            /// <summary>
            /// Enum New for value: new
            /// </summary>
            [EnumMember(Value = "new")]
            New = 8,

            /// <summary>
            /// Enum Live for value: live
            /// </summary>
            [EnumMember(Value = "live")]
            Live = 9,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 10

        }

        /// <summary>
        /// The current status of the property
        /// </summary>
        /// <value>The current status of the property</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Sale method of the property
        /// </summary>
        /// <value>Sale method of the property</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SaleModeEnum
        {
            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 1,

            /// <summary>
            /// Enum Rent for value: rent
            /// </summary>
            [EnumMember(Value = "rent")]
            Rent = 2,

            /// <summary>
            /// Enum Share for value: share
            /// </summary>
            [EnumMember(Value = "share")]
            Share = 3,

            /// <summary>
            /// Enum Sold for value: sold
            /// </summary>
            [EnumMember(Value = "sold")]
            Sold = 4,

            /// <summary>
            /// Enum Leased for value: leased
            /// </summary>
            [EnumMember(Value = "leased")]
            Leased = 5,

            /// <summary>
            /// Enum Archived for value: archived
            /// </summary>
            [EnumMember(Value = "archived")]
            Archived = 6

        }

        /// <summary>
        /// Sale method of the property
        /// </summary>
        /// <value>Sale method of the property</value>
        [DataMember(Name = "saleMode", EmitDefaultValue = false)]
        public SaleModeEnum? SaleMode { get; set; }
        /// <summary>
        /// Listing channel
        /// </summary>
        /// <value>Listing channel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum Residential for value: residential
            /// </summary>
            [EnumMember(Value = "residential")]
            Residential = 1,

            /// <summary>
            /// Enum Commercial for value: commercial
            /// </summary>
            [EnumMember(Value = "commercial")]
            Commercial = 2,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 3

        }

        /// <summary>
        /// Listing channel
        /// </summary>
        /// <value>Listing channel</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public ChannelEnum? Channel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1ListingsListing" /> class.
        /// </summary>
        /// <param name="objective">The type of Advertisement.</param>
        /// <param name="propertyTypes">Types of the property e.g. House, Duplex, Apartment/Unit/Flat.</param>
        /// <param name="status">The current status of the property.</param>
        /// <param name="saleMode">Sale method of the property.</param>
        /// <param name="channel">Listing channel.</param>
        /// <param name="addressParts">addressParts.</param>
        /// <param name="advertiserIdentifiers">advertiserIdentifiers.</param>
        /// <param name="apmIdentifiers">apmIdentifiers.</param>
        /// <param name="bathrooms">Total number of bathrooms in the property.</param>
        /// <param name="bedrooms">Total number of bedrooms in the property; Studio apartments have a value of \\\&quot;0\\\&quot;.</param>
        /// <param name="buildingArea">The building area display value of the property e.g. 160 ha.</param>
        /// <param name="buildingAreaSqm">The properties building area in square meters.</param>
        /// <param name="carspaces">Total number of car spaces in the property..</param>
        /// <param name="dateAvailable">The date the property is available.</param>
        /// <param name="dateCreated">The date/time the listing was created.</param>
        /// <param name="dateUpdated">The date/time the listing had major update.</param>
        /// <param name="dateMinorUpdated">When minor update applied to listing.</param>
        /// <param name="dateListed">The date/time the listing was first listed.</param>
        /// <param name="datePurged">The date/time the listing was purged..</param>
        /// <param name="description">The long description of the property provided by the advertiser.</param>
        /// <param name="devProjectId">The ID of the development project - null if no associated project.</param>
        /// <param name="energyEfficiencyRating">Energy Efficiency Rating value for ACT properties.</param>
        /// <param name="features">The property features specified by the advertiser.</param>
        /// <param name="geoLocation">geoLocation.</param>
        /// <param name="headline">The short description of the property provided by the advertiser.</param>
        /// <param name="id">The identifier which uniquely identifies the listing.</param>
        /// <param name="inspectionDetails">inspectionDetails.</param>
        /// <param name="isNewDevelopment">Indicates whether the property is a new development.</param>
        /// <param name="landArea">The land area display string for the property e.g. 160 sqm.</param>
        /// <param name="landAreaSqm">The properties land area in square meters.</param>
        /// <param name="media">The media associated with the property provided by the advertiser.</param>
        /// <param name="priceDetails">priceDetails.</param>
        /// <param name="propertyId">The identifier which uniquely identifies the property being advertised.                   This may be empty if the Address of property is poorly described.</param>
        /// <param name="providerDetails">providerDetails.</param>
        /// <param name="rentalDetails">rentalDetails.</param>
        /// <param name="saleDetails">saleDetails.</param>
        /// <param name="isWithdrawn">Indicates if the property has been withdrawn               from the market.</param>
        /// <param name="seoUrl">listing SEO Url.</param>
        /// <param name="errorMessage">In case of a mapping error is used to display error details.</param>
        /// <param name="virtualTourUrl">The Listing&#39;s Surroundpix Url..</param>
        /// <param name="homepassEnabled">If homepass is enabled for the listing (agency).</param>
        /// <param name="statementOfInformation">statementOfInformation.</param>
        /// <param name="numberOfDwellings">Number of dwellings for current listing.</param>
        /// <param name="highlights">Highlight items for the listing.</param>
        public DomainPublicAdapterWebApiModelsV1ListingsListing(ObjectiveEnum? objective = default(ObjectiveEnum?), List<PropertyTypesEnum> propertyTypes = default(List<PropertyTypesEnum>), StatusEnum? status = default(StatusEnum?), SaleModeEnum? saleMode = default(SaleModeEnum?), ChannelEnum? channel = default(ChannelEnum?), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts addressParts = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers advertiserIdentifiers = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers apmIdentifiers = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers), float bathrooms = default(float), float bedrooms = default(float), string buildingArea = default(string), double buildingAreaSqm = default(double), float carspaces = default(float), DateTime dateAvailable = default(DateTime), DateTime dateCreated = default(DateTime), DateTime dateUpdated = default(DateTime), DateTime dateMinorUpdated = default(DateTime), DateTime dateListed = default(DateTime), DateTime datePurged = default(DateTime), string description = default(string), int devProjectId = default(int), int energyEfficiencyRating = default(int), List<string> features = default(List<string>), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation geoLocation = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation), string headline = default(string), int id = default(int), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections inspectionDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections), bool isNewDevelopment = default(bool), string landArea = default(string), double landAreaSqm = default(double), List<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia> media = default(List<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia>), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails priceDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails), string propertyId = default(string), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails providerDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails rentalDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails saleDetails = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails), bool isWithdrawn = default(bool), string seoUrl = default(string), string errorMessage = default(string), string virtualTourUrl = default(string), bool homepassEnabled = default(bool), DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation statementOfInformation = default(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation), int numberOfDwellings = default(int), List<string> highlights = default(List<string>))
        {
            this.Objective = objective;
            this.PropertyTypes = propertyTypes;
            this.Status = status;
            this.SaleMode = saleMode;
            this.Channel = channel;
            this.AddressParts = addressParts;
            this.AdvertiserIdentifiers = advertiserIdentifiers;
            this.ApmIdentifiers = apmIdentifiers;
            this.Bathrooms = bathrooms;
            this.Bedrooms = bedrooms;
            this.BuildingArea = buildingArea;
            this.BuildingAreaSqm = buildingAreaSqm;
            this.Carspaces = carspaces;
            this.DateAvailable = dateAvailable;
            this.DateCreated = dateCreated;
            this.DateUpdated = dateUpdated;
            this.DateMinorUpdated = dateMinorUpdated;
            this.DateListed = dateListed;
            this.DatePurged = datePurged;
            this.Description = description;
            this.DevProjectId = devProjectId;
            this.EnergyEfficiencyRating = energyEfficiencyRating;
            this.Features = features;
            this.GeoLocation = geoLocation;
            this.Headline = headline;
            this.Id = id;
            this.InspectionDetails = inspectionDetails;
            this.IsNewDevelopment = isNewDevelopment;
            this.LandArea = landArea;
            this.LandAreaSqm = landAreaSqm;
            this.Media = media;
            this.PriceDetails = priceDetails;
            this.PropertyId = propertyId;
            this.ProviderDetails = providerDetails;
            this.RentalDetails = rentalDetails;
            this.SaleDetails = saleDetails;
            this.IsWithdrawn = isWithdrawn;
            this.SeoUrl = seoUrl;
            this.ErrorMessage = errorMessage;
            this.VirtualTourUrl = virtualTourUrl;
            this.HomepassEnabled = homepassEnabled;
            this.StatementOfInformation = statementOfInformation;
            this.NumberOfDwellings = numberOfDwellings;
            this.Highlights = highlights;
        }

        /// <summary>
        /// Gets or Sets AddressParts
        /// </summary>
        [DataMember(Name = "addressParts", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts AddressParts { get; set; }

        /// <summary>
        /// Gets or Sets AdvertiserIdentifiers
        /// </summary>
        [DataMember(Name = "advertiserIdentifiers", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers AdvertiserIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets ApmIdentifiers
        /// </summary>
        [DataMember(Name = "apmIdentifiers", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers ApmIdentifiers { get; set; }

        /// <summary>
        /// Total number of bathrooms in the property
        /// </summary>
        /// <value>Total number of bathrooms in the property</value>
        [DataMember(Name = "bathrooms", EmitDefaultValue = false)]
        public float Bathrooms { get; set; }

        /// <summary>
        /// Total number of bedrooms in the property; Studio apartments have a value of \\\&quot;0\\\&quot;
        /// </summary>
        /// <value>Total number of bedrooms in the property; Studio apartments have a value of \\\&quot;0\\\&quot;</value>
        [DataMember(Name = "bedrooms", EmitDefaultValue = false)]
        public float Bedrooms { get; set; }

        /// <summary>
        /// The building area display value of the property e.g. 160 ha
        /// </summary>
        /// <value>The building area display value of the property e.g. 160 ha</value>
        [DataMember(Name = "buildingArea", EmitDefaultValue = false)]
        public string BuildingArea { get; set; }

        /// <summary>
        /// The properties building area in square meters
        /// </summary>
        /// <value>The properties building area in square meters</value>
        [DataMember(Name = "buildingAreaSqm", EmitDefaultValue = false)]
        public double BuildingAreaSqm { get; set; }

        /// <summary>
        /// Total number of car spaces in the property.
        /// </summary>
        /// <value>Total number of car spaces in the property.</value>
        [DataMember(Name = "carspaces", EmitDefaultValue = false)]
        public float Carspaces { get; set; }

        /// <summary>
        /// The date the property is available
        /// </summary>
        /// <value>The date the property is available</value>
        [DataMember(Name = "dateAvailable", EmitDefaultValue = false)]
        public DateTime DateAvailable { get; set; }

        /// <summary>
        /// The date/time the listing was created
        /// </summary>
        /// <value>The date/time the listing was created</value>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// The date/time the listing had major update
        /// </summary>
        /// <value>The date/time the listing had major update</value>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public DateTime DateUpdated { get; set; }

        /// <summary>
        /// When minor update applied to listing
        /// </summary>
        /// <value>When minor update applied to listing</value>
        [DataMember(Name = "dateMinorUpdated", EmitDefaultValue = false)]
        public DateTime DateMinorUpdated { get; set; }

        /// <summary>
        /// The date/time the listing was first listed
        /// </summary>
        /// <value>The date/time the listing was first listed</value>
        [DataMember(Name = "dateListed", EmitDefaultValue = false)]
        public DateTime DateListed { get; set; }

        /// <summary>
        /// The date/time the listing was purged.
        /// </summary>
        /// <value>The date/time the listing was purged.</value>
        [DataMember(Name = "datePurged", EmitDefaultValue = false)]
        public DateTime DatePurged { get; set; }

        /// <summary>
        /// The long description of the property provided by the advertiser
        /// </summary>
        /// <value>The long description of the property provided by the advertiser</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the development project - null if no associated project
        /// </summary>
        /// <value>The ID of the development project - null if no associated project</value>
        [DataMember(Name = "devProjectId", EmitDefaultValue = false)]
        public int DevProjectId { get; set; }

        /// <summary>
        /// Energy Efficiency Rating value for ACT properties
        /// </summary>
        /// <value>Energy Efficiency Rating value for ACT properties</value>
        [DataMember(Name = "energyEfficiencyRating", EmitDefaultValue = false)]
        public int EnergyEfficiencyRating { get; set; }

        /// <summary>
        /// The property features specified by the advertiser
        /// </summary>
        /// <value>The property features specified by the advertiser</value>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public List<string> Features { get; set; }

        /// <summary>
        /// Gets or Sets GeoLocation
        /// </summary>
        [DataMember(Name = "geoLocation", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation GeoLocation { get; set; }

        /// <summary>
        /// The short description of the property provided by the advertiser
        /// </summary>
        /// <value>The short description of the property provided by the advertiser</value>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public string Headline { get; set; }

        /// <summary>
        /// The identifier which uniquely identifies the listing
        /// </summary>
        /// <value>The identifier which uniquely identifies the listing</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets InspectionDetails
        /// </summary>
        [DataMember(Name = "inspectionDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections InspectionDetails { get; set; }

        /// <summary>
        /// Indicates whether the property is a new development
        /// </summary>
        /// <value>Indicates whether the property is a new development</value>
        [DataMember(Name = "isNewDevelopment", EmitDefaultValue = false)]
        public bool IsNewDevelopment { get; set; }

        /// <summary>
        /// The land area display string for the property e.g. 160 sqm
        /// </summary>
        /// <value>The land area display string for the property e.g. 160 sqm</value>
        [DataMember(Name = "landArea", EmitDefaultValue = false)]
        public string LandArea { get; set; }

        /// <summary>
        /// The properties land area in square meters
        /// </summary>
        /// <value>The properties land area in square meters</value>
        [DataMember(Name = "landAreaSqm", EmitDefaultValue = false)]
        public double LandAreaSqm { get; set; }

        /// <summary>
        /// The media associated with the property provided by the advertiser
        /// </summary>
        /// <value>The media associated with the property provided by the advertiser</value>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia> Media { get; set; }

        /// <summary>
        /// Gets or Sets PriceDetails
        /// </summary>
        [DataMember(Name = "priceDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails PriceDetails { get; set; }

        /// <summary>
        /// The identifier which uniquely identifies the property being advertised.                   This may be empty if the Address of property is poorly described
        /// </summary>
        /// <value>The identifier which uniquely identifies the property being advertised.                   This may be empty if the Address of property is poorly described</value>
        [DataMember(Name = "propertyId", EmitDefaultValue = false)]
        public string PropertyId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderDetails
        /// </summary>
        [DataMember(Name = "providerDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails ProviderDetails { get; set; }

        /// <summary>
        /// Gets or Sets RentalDetails
        /// </summary>
        [DataMember(Name = "rentalDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails RentalDetails { get; set; }

        /// <summary>
        /// Gets or Sets SaleDetails
        /// </summary>
        [DataMember(Name = "saleDetails", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails SaleDetails { get; set; }

        /// <summary>
        /// Indicates if the property has been withdrawn               from the market
        /// </summary>
        /// <value>Indicates if the property has been withdrawn               from the market</value>
        [DataMember(Name = "isWithdrawn", EmitDefaultValue = false)]
        public bool IsWithdrawn { get; set; }

        /// <summary>
        /// listing SEO Url
        /// </summary>
        /// <value>listing SEO Url</value>
        [DataMember(Name = "seoUrl", EmitDefaultValue = false)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// In case of a mapping error is used to display error details
        /// </summary>
        /// <value>In case of a mapping error is used to display error details</value>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// The Listing&#39;s Surroundpix Url.
        /// </summary>
        /// <value>The Listing&#39;s Surroundpix Url.</value>
        [DataMember(Name = "virtualTourUrl", EmitDefaultValue = false)]
        public string VirtualTourUrl { get; set; }

        /// <summary>
        /// If homepass is enabled for the listing (agency)
        /// </summary>
        /// <value>If homepass is enabled for the listing (agency)</value>
        [DataMember(Name = "homepassEnabled", EmitDefaultValue = false)]
        public bool HomepassEnabled { get; set; }

        /// <summary>
        /// Gets or Sets StatementOfInformation
        /// </summary>
        [DataMember(Name = "statementOfInformation", EmitDefaultValue = false)]
        public DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation StatementOfInformation { get; set; }

        /// <summary>
        /// Number of dwellings for current listing
        /// </summary>
        /// <value>Number of dwellings for current listing</value>
        [DataMember(Name = "numberOfDwellings", EmitDefaultValue = false)]
        public int NumberOfDwellings { get; set; }

        /// <summary>
        /// Highlight items for the listing
        /// </summary>
        /// <value>Highlight items for the listing</value>
        [DataMember(Name = "highlights", EmitDefaultValue = false)]
        public List<string> Highlights { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1ListingsListing {\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  PropertyTypes: ").Append(PropertyTypes).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SaleMode: ").Append(SaleMode).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  AddressParts: ").Append(AddressParts).Append("\n");
            sb.Append("  AdvertiserIdentifiers: ").Append(AdvertiserIdentifiers).Append("\n");
            sb.Append("  ApmIdentifiers: ").Append(ApmIdentifiers).Append("\n");
            sb.Append("  Bathrooms: ").Append(Bathrooms).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  BuildingArea: ").Append(BuildingArea).Append("\n");
            sb.Append("  BuildingAreaSqm: ").Append(BuildingAreaSqm).Append("\n");
            sb.Append("  Carspaces: ").Append(Carspaces).Append("\n");
            sb.Append("  DateAvailable: ").Append(DateAvailable).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  DateMinorUpdated: ").Append(DateMinorUpdated).Append("\n");
            sb.Append("  DateListed: ").Append(DateListed).Append("\n");
            sb.Append("  DatePurged: ").Append(DatePurged).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DevProjectId: ").Append(DevProjectId).Append("\n");
            sb.Append("  EnergyEfficiencyRating: ").Append(EnergyEfficiencyRating).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  GeoLocation: ").Append(GeoLocation).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InspectionDetails: ").Append(InspectionDetails).Append("\n");
            sb.Append("  IsNewDevelopment: ").Append(IsNewDevelopment).Append("\n");
            sb.Append("  LandArea: ").Append(LandArea).Append("\n");
            sb.Append("  LandAreaSqm: ").Append(LandAreaSqm).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  PriceDetails: ").Append(PriceDetails).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  ProviderDetails: ").Append(ProviderDetails).Append("\n");
            sb.Append("  RentalDetails: ").Append(RentalDetails).Append("\n");
            sb.Append("  SaleDetails: ").Append(SaleDetails).Append("\n");
            sb.Append("  IsWithdrawn: ").Append(IsWithdrawn).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  VirtualTourUrl: ").Append(VirtualTourUrl).Append("\n");
            sb.Append("  HomepassEnabled: ").Append(HomepassEnabled).Append("\n");
            sb.Append("  StatementOfInformation: ").Append(StatementOfInformation).Append("\n");
            sb.Append("  NumberOfDwellings: ").Append(NumberOfDwellings).Append("\n");
            sb.Append("  Highlights: ").Append(Highlights).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1ListingsListing);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1ListingsListing instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1ListingsListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1ListingsListing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Objective == input.Objective ||
                    this.Objective.Equals(input.Objective)
                ) && 
                (
                    this.PropertyTypes == input.PropertyTypes ||
                    this.PropertyTypes.SequenceEqual(input.PropertyTypes)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.SaleMode == input.SaleMode ||
                    this.SaleMode.Equals(input.SaleMode)
                ) && 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.AddressParts == input.AddressParts ||
                    (this.AddressParts != null &&
                    this.AddressParts.Equals(input.AddressParts))
                ) && 
                (
                    this.AdvertiserIdentifiers == input.AdvertiserIdentifiers ||
                    (this.AdvertiserIdentifiers != null &&
                    this.AdvertiserIdentifiers.Equals(input.AdvertiserIdentifiers))
                ) && 
                (
                    this.ApmIdentifiers == input.ApmIdentifiers ||
                    (this.ApmIdentifiers != null &&
                    this.ApmIdentifiers.Equals(input.ApmIdentifiers))
                ) && 
                (
                    this.Bathrooms == input.Bathrooms ||
                    this.Bathrooms.Equals(input.Bathrooms)
                ) && 
                (
                    this.Bedrooms == input.Bedrooms ||
                    this.Bedrooms.Equals(input.Bedrooms)
                ) && 
                (
                    this.BuildingArea == input.BuildingArea ||
                    (this.BuildingArea != null &&
                    this.BuildingArea.Equals(input.BuildingArea))
                ) && 
                (
                    this.BuildingAreaSqm == input.BuildingAreaSqm ||
                    this.BuildingAreaSqm.Equals(input.BuildingAreaSqm)
                ) && 
                (
                    this.Carspaces == input.Carspaces ||
                    this.Carspaces.Equals(input.Carspaces)
                ) && 
                (
                    this.DateAvailable == input.DateAvailable ||
                    (this.DateAvailable != null &&
                    this.DateAvailable.Equals(input.DateAvailable))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.DateMinorUpdated == input.DateMinorUpdated ||
                    (this.DateMinorUpdated != null &&
                    this.DateMinorUpdated.Equals(input.DateMinorUpdated))
                ) && 
                (
                    this.DateListed == input.DateListed ||
                    (this.DateListed != null &&
                    this.DateListed.Equals(input.DateListed))
                ) && 
                (
                    this.DatePurged == input.DatePurged ||
                    (this.DatePurged != null &&
                    this.DatePurged.Equals(input.DatePurged))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DevProjectId == input.DevProjectId ||
                    this.DevProjectId.Equals(input.DevProjectId)
                ) && 
                (
                    this.EnergyEfficiencyRating == input.EnergyEfficiencyRating ||
                    this.EnergyEfficiencyRating.Equals(input.EnergyEfficiencyRating)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.GeoLocation == input.GeoLocation ||
                    (this.GeoLocation != null &&
                    this.GeoLocation.Equals(input.GeoLocation))
                ) && 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.InspectionDetails == input.InspectionDetails ||
                    (this.InspectionDetails != null &&
                    this.InspectionDetails.Equals(input.InspectionDetails))
                ) && 
                (
                    this.IsNewDevelopment == input.IsNewDevelopment ||
                    this.IsNewDevelopment.Equals(input.IsNewDevelopment)
                ) && 
                (
                    this.LandArea == input.LandArea ||
                    (this.LandArea != null &&
                    this.LandArea.Equals(input.LandArea))
                ) && 
                (
                    this.LandAreaSqm == input.LandAreaSqm ||
                    this.LandAreaSqm.Equals(input.LandAreaSqm)
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.PriceDetails == input.PriceDetails ||
                    (this.PriceDetails != null &&
                    this.PriceDetails.Equals(input.PriceDetails))
                ) && 
                (
                    this.PropertyId == input.PropertyId ||
                    (this.PropertyId != null &&
                    this.PropertyId.Equals(input.PropertyId))
                ) && 
                (
                    this.ProviderDetails == input.ProviderDetails ||
                    (this.ProviderDetails != null &&
                    this.ProviderDetails.Equals(input.ProviderDetails))
                ) && 
                (
                    this.RentalDetails == input.RentalDetails ||
                    (this.RentalDetails != null &&
                    this.RentalDetails.Equals(input.RentalDetails))
                ) && 
                (
                    this.SaleDetails == input.SaleDetails ||
                    (this.SaleDetails != null &&
                    this.SaleDetails.Equals(input.SaleDetails))
                ) && 
                (
                    this.IsWithdrawn == input.IsWithdrawn ||
                    this.IsWithdrawn.Equals(input.IsWithdrawn)
                ) && 
                (
                    this.SeoUrl == input.SeoUrl ||
                    (this.SeoUrl != null &&
                    this.SeoUrl.Equals(input.SeoUrl))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.VirtualTourUrl == input.VirtualTourUrl ||
                    (this.VirtualTourUrl != null &&
                    this.VirtualTourUrl.Equals(input.VirtualTourUrl))
                ) && 
                (
                    this.HomepassEnabled == input.HomepassEnabled ||
                    this.HomepassEnabled.Equals(input.HomepassEnabled)
                ) && 
                (
                    this.StatementOfInformation == input.StatementOfInformation ||
                    (this.StatementOfInformation != null &&
                    this.StatementOfInformation.Equals(input.StatementOfInformation))
                ) && 
                (
                    this.NumberOfDwellings == input.NumberOfDwellings ||
                    this.NumberOfDwellings.Equals(input.NumberOfDwellings)
                ) && 
                (
                    this.Highlights == input.Highlights ||
                    this.Highlights != null &&
                    input.Highlights != null &&
                    this.Highlights.SequenceEqual(input.Highlights)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Objective.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyTypes.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.SaleMode.GetHashCode();
                hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.AddressParts != null)
                    hashCode = hashCode * 59 + this.AddressParts.GetHashCode();
                if (this.AdvertiserIdentifiers != null)
                    hashCode = hashCode * 59 + this.AdvertiserIdentifiers.GetHashCode();
                if (this.ApmIdentifiers != null)
                    hashCode = hashCode * 59 + this.ApmIdentifiers.GetHashCode();
                hashCode = hashCode * 59 + this.Bathrooms.GetHashCode();
                hashCode = hashCode * 59 + this.Bedrooms.GetHashCode();
                if (this.BuildingArea != null)
                    hashCode = hashCode * 59 + this.BuildingArea.GetHashCode();
                hashCode = hashCode * 59 + this.BuildingAreaSqm.GetHashCode();
                hashCode = hashCode * 59 + this.Carspaces.GetHashCode();
                if (this.DateAvailable != null)
                    hashCode = hashCode * 59 + this.DateAvailable.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateUpdated != null)
                    hashCode = hashCode * 59 + this.DateUpdated.GetHashCode();
                if (this.DateMinorUpdated != null)
                    hashCode = hashCode * 59 + this.DateMinorUpdated.GetHashCode();
                if (this.DateListed != null)
                    hashCode = hashCode * 59 + this.DateListed.GetHashCode();
                if (this.DatePurged != null)
                    hashCode = hashCode * 59 + this.DatePurged.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.DevProjectId.GetHashCode();
                hashCode = hashCode * 59 + this.EnergyEfficiencyRating.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.GeoLocation != null)
                    hashCode = hashCode * 59 + this.GeoLocation.GetHashCode();
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InspectionDetails != null)
                    hashCode = hashCode * 59 + this.InspectionDetails.GetHashCode();
                hashCode = hashCode * 59 + this.IsNewDevelopment.GetHashCode();
                if (this.LandArea != null)
                    hashCode = hashCode * 59 + this.LandArea.GetHashCode();
                hashCode = hashCode * 59 + this.LandAreaSqm.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.PriceDetails != null)
                    hashCode = hashCode * 59 + this.PriceDetails.GetHashCode();
                if (this.PropertyId != null)
                    hashCode = hashCode * 59 + this.PropertyId.GetHashCode();
                if (this.ProviderDetails != null)
                    hashCode = hashCode * 59 + this.ProviderDetails.GetHashCode();
                if (this.RentalDetails != null)
                    hashCode = hashCode * 59 + this.RentalDetails.GetHashCode();
                if (this.SaleDetails != null)
                    hashCode = hashCode * 59 + this.SaleDetails.GetHashCode();
                hashCode = hashCode * 59 + this.IsWithdrawn.GetHashCode();
                if (this.SeoUrl != null)
                    hashCode = hashCode * 59 + this.SeoUrl.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.VirtualTourUrl != null)
                    hashCode = hashCode * 59 + this.VirtualTourUrl.GetHashCode();
                hashCode = hashCode * 59 + this.HomepassEnabled.GetHashCode();
                if (this.StatementOfInformation != null)
                    hashCode = hashCode * 59 + this.StatementOfInformation.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfDwellings.GetHashCode();
                if (this.Highlights != null)
                    hashCode = hashCode * 59 + this.Highlights.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
