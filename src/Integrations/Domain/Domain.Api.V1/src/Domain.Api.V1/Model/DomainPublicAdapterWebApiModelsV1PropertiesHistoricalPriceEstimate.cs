/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// A price estimate at a given point in time
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Properties.HistoricalPriceEstimate")]
    public partial class DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate : IEquatable<DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate>, IValidatableObject
    {
        /// <summary>
        /// The confidence of the valuation.
        /// </summary>
        /// <value>The confidence of the valuation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfidenceEnum
        {
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 1,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 2

        }

        /// <summary>
        /// The confidence of the valuation.
        /// </summary>
        /// <value>The confidence of the valuation.</value>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public ConfidenceEnum? Confidence { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate" /> class.
        /// </summary>
        /// <param name="confidence">The confidence of the valuation..</param>
        /// <param name="date">The date of the valuation..</param>
        /// <param name="lowerPrice">The lower price valuation..</param>
        /// <param name="upperPrice">The upper price valuation..</param>
        public DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate(ConfidenceEnum? confidence = default(ConfidenceEnum?), DateTime date = default(DateTime), int lowerPrice = default(int), int upperPrice = default(int))
        {
            this.Confidence = confidence;
            this.Date = date;
            this.LowerPrice = lowerPrice;
            this.UpperPrice = upperPrice;
        }

        /// <summary>
        /// The date of the valuation.
        /// </summary>
        /// <value>The date of the valuation.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// The lower price valuation.
        /// </summary>
        /// <value>The lower price valuation.</value>
        [DataMember(Name = "lowerPrice", EmitDefaultValue = false)]
        public int LowerPrice { get; set; }

        /// <summary>
        /// The upper price valuation.
        /// </summary>
        /// <value>The upper price valuation.</value>
        [DataMember(Name = "upperPrice", EmitDefaultValue = false)]
        public int UpperPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate {\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  LowerPrice: ").Append(LowerPrice).Append("\n");
            sb.Append("  UpperPrice: ").Append(UpperPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Confidence == input.Confidence ||
                    this.Confidence.Equals(input.Confidence)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.LowerPrice == input.LowerPrice ||
                    this.LowerPrice.Equals(input.LowerPrice)
                ) && 
                (
                    this.UpperPrice == input.UpperPrice ||
                    this.UpperPrice.Equals(input.UpperPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.LowerPrice.GetHashCode();
                hashCode = hashCode * 59 + this.UpperPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
