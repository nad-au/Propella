/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// A searchable property
    /// </summary>
    [DataContract(Name = "Domain.Public.Adapter.Web.Api.Models.v1.Properties.Property")]
    public partial class DomainPublicAdapterWebApiModelsV1PropertiesProperty : IEquatable<DomainPublicAdapterWebApiModelsV1PropertiesProperty>, IValidatableObject
    {
        /// <summary>
        /// The type of geometry of the Cadastre property.
        /// </summary>
        /// <value>The type of geometry of the Cadastre property.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CadastreTypeEnum
        {
            /// <summary>
            /// Enum Point for value: Point
            /// </summary>
            [EnumMember(Value = "Point")]
            Point = 1,

            /// <summary>
            /// Enum MultiPoint for value: MultiPoint
            /// </summary>
            [EnumMember(Value = "MultiPoint")]
            MultiPoint = 2,

            /// <summary>
            /// Enum LineString for value: LineString
            /// </summary>
            [EnumMember(Value = "LineString")]
            LineString = 3,

            /// <summary>
            /// Enum MultiLineString for value: MultiLineString
            /// </summary>
            [EnumMember(Value = "MultiLineString")]
            MultiLineString = 4,

            /// <summary>
            /// Enum Polygon for value: Polygon
            /// </summary>
            [EnumMember(Value = "Polygon")]
            Polygon = 5,

            /// <summary>
            /// Enum MultiPolygon for value: MultiPolygon
            /// </summary>
            [EnumMember(Value = "MultiPolygon")]
            MultiPolygon = 6,

            /// <summary>
            /// Enum GeometryCollection for value: GeometryCollection
            /// </summary>
            [EnumMember(Value = "GeometryCollection")]
            GeometryCollection = 7,

            /// <summary>
            /// Enum Feature for value: Feature
            /// </summary>
            [EnumMember(Value = "Feature")]
            Feature = 8,

            /// <summary>
            /// Enum FeatureCollection for value: FeatureCollection
            /// </summary>
            [EnumMember(Value = "FeatureCollection")]
            FeatureCollection = 9

        }

        /// <summary>
        /// The type of geometry of the Cadastre property.
        /// </summary>
        /// <value>The type of geometry of the Cadastre property.</value>
        [DataMember(Name = "cadastreType", EmitDefaultValue = false)]
        public CadastreTypeEnum? CadastreType { get; set; }
        /// <summary>
        /// Defines OnMarketTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnMarketTypesEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Rent for value: Rent
            /// </summary>
            [EnumMember(Value = "Rent")]
            Rent = 2,

            /// <summary>
            /// Enum Sale for value: Sale
            /// </summary>
            [EnumMember(Value = "Sale")]
            Sale = 3,

            /// <summary>
            /// Enum Share for value: Share
            /// </summary>
            [EnumMember(Value = "Share")]
            Share = 4

        }


        /// <summary>
        /// The on market types, if the property is on the market
        /// </summary>
        /// <value>The on market types, if the property is on the market</value>
        [DataMember(Name = "onMarketTypes", EmitDefaultValue = false)]
        public List<OnMarketTypesEnum> OnMarketTypes { get; set; }
        /// <summary>
        /// The current status of the property.
        /// </summary>
        /// <value>The current status of the property.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum OffMarket for value: OffMarket
            /// </summary>
            [EnumMember(Value = "OffMarket")]
            OffMarket = 1,

            /// <summary>
            /// Enum OnMarket for value: OnMarket
            /// </summary>
            [EnumMember(Value = "OnMarket")]
            OnMarket = 2

        }

        /// <summary>
        /// The current status of the property.
        /// </summary>
        /// <value>The current status of the property.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPublicAdapterWebApiModelsV1PropertiesProperty" /> class.
        /// </summary>
        /// <param name="cadastreType">The type of geometry of the Cadastre property..</param>
        /// <param name="onMarketTypes">The on market types, if the property is on the market.</param>
        /// <param name="status">The current status of the property..</param>
        /// <param name="addressCoordinate">addressCoordinate.</param>
        /// <param name="addressId">The address identifier.</param>
        /// <param name="adverts">The current adverts for the property, if on the market.</param>
        /// <param name="areaSize">Gets or sets the size of the area of land on which the property resides..</param>
        /// <param name="bathrooms">The number of bathrooms..</param>
        /// <param name="bedrooms">The number of bedrooms..</param>
        /// <param name="carSpaces">The number of car spaces..</param>
        /// <param name="claim">claim.</param>
        /// <param name="condition">The condition of the property..</param>
        /// <param name="created">The created date of the property document..</param>
        /// <param name="ensuites">The number of ensuites..</param>
        /// <param name="features">The list of features for the given property.</param>
        /// <param name="flatNumber">The flat number of the property (if applicable for the property type)..</param>
        /// <param name="gnafIds">Associated PSMA GNAF identifiers.</param>
        /// <param name="history">history.</param>
        /// <param name="id">The property id of the property.</param>
        /// <param name="improvements">The improvements to the property.</param>
        /// <param name="internalArea">The floorplan area of the property..</param>
        /// <param name="isResidential">Indicates whether this property is residential..</param>
        /// <param name="landUse">The land use..</param>
        /// <param name="lotNumber">The lot number for the property..</param>
        /// <param name="photos">A collection of photos of the property..</param>
        /// <param name="planNumber">The plan number..</param>
        /// <param name="postcode">The postcode of the property.</param>
        /// <param name="propertyCategory">The property category..</param>
        /// <param name="propertyCategoryId">The property category identifier.</param>
        /// <param name="propertyType">The type of the property..</param>
        /// <param name="propertyTypeId">The property type identifier..</param>
        /// <param name="rooms">The number of rooms..</param>
        /// <param name="sectionNumber">The section number..</param>
        /// <param name="state">The state in which the property resides.</param>
        /// <param name="storeys">The number of storeys..</param>
        /// <param name="streetName">The name of the street in which the property resides..</param>
        /// <param name="streetNumber">The street number of the property..</param>
        /// <param name="streetType">The street type name e.g. St..</param>
        /// <param name="streetTypeLong">The long street type name e.g. Street..</param>
        /// <param name="suburb">The suburb in which the property resides..</param>
        /// <param name="suburbId">The identifier for the suburb in which the property resides..</param>
        /// <param name="title">The title for the property..</param>
        /// <param name="updated">The last time the property document was updated.</param>
        /// <param name="urlSlug">Gets the URL slug..</param>
        /// <param name="urlSlugShort">Gets or sets the URL slug in short form.</param>
        /// <param name="zone">The property zone..</param>
        /// <param name="canonicalUrl">Canonical url for this property.</param>
        public DomainPublicAdapterWebApiModelsV1PropertiesProperty(CadastreTypeEnum? cadastreType = default(CadastreTypeEnum?), List<OnMarketTypesEnum> onMarketTypes = default(List<OnMarketTypesEnum>), StatusEnum? status = default(StatusEnum?), DomainPublicAdapterWebApiModelsV1PropertiesGeoCoordinate addressCoordinate = default(DomainPublicAdapterWebApiModelsV1PropertiesGeoCoordinate), int addressId = default(int), List<DomainPublicAdapterWebApiModelsV1PropertiesAdvert> adverts = default(List<DomainPublicAdapterWebApiModelsV1PropertiesAdvert>), int areaSize = default(int), int bathrooms = default(int), int bedrooms = default(int), int carSpaces = default(int), DomainPublicAdapterWebApiModelsV1PropertiesClaimData claim = default(DomainPublicAdapterWebApiModelsV1PropertiesClaimData), string condition = default(string), DateTime created = default(DateTime), int ensuites = default(int), List<string> features = default(List<string>), string flatNumber = default(string), List<DomainPublicAdapterWebApiModelsV1PropertiesGnafId> gnafIds = default(List<DomainPublicAdapterWebApiModelsV1PropertiesGnafId>), DomainPublicAdapterWebApiModelsV1PropertiesHistory history = default(DomainPublicAdapterWebApiModelsV1PropertiesHistory), string id = default(string), string improvements = default(string), int internalArea = default(int), bool isResidential = default(bool), string landUse = default(string), string lotNumber = default(string), List<DomainPublicAdapterWebApiModelsV1PropertiesPhoto> photos = default(List<DomainPublicAdapterWebApiModelsV1PropertiesPhoto>), string planNumber = default(string), string postcode = default(string), string propertyCategory = default(string), int propertyCategoryId = default(int), string propertyType = default(string), int propertyTypeId = default(int), int rooms = default(int), string sectionNumber = default(string), string state = default(string), int storeys = default(int), string streetName = default(string), string streetNumber = default(string), string streetType = default(string), string streetTypeLong = default(string), string suburb = default(string), int suburbId = default(int), string title = default(string), DateTime updated = default(DateTime), string urlSlug = default(string), string urlSlugShort = default(string), string zone = default(string), string canonicalUrl = default(string))
        {
            this.CadastreType = cadastreType;
            this.OnMarketTypes = onMarketTypes;
            this.Status = status;
            this.AddressCoordinate = addressCoordinate;
            this.AddressId = addressId;
            this.Adverts = adverts;
            this.AreaSize = areaSize;
            this.Bathrooms = bathrooms;
            this.Bedrooms = bedrooms;
            this.CarSpaces = carSpaces;
            this.Claim = claim;
            this.Condition = condition;
            this.Created = created;
            this.Ensuites = ensuites;
            this.Features = features;
            this.FlatNumber = flatNumber;
            this.GnafIds = gnafIds;
            this.History = history;
            this.Id = id;
            this.Improvements = improvements;
            this.InternalArea = internalArea;
            this.IsResidential = isResidential;
            this.LandUse = landUse;
            this.LotNumber = lotNumber;
            this.Photos = photos;
            this.PlanNumber = planNumber;
            this.Postcode = postcode;
            this.PropertyCategory = propertyCategory;
            this.PropertyCategoryId = propertyCategoryId;
            this.PropertyType = propertyType;
            this.PropertyTypeId = propertyTypeId;
            this.Rooms = rooms;
            this.SectionNumber = sectionNumber;
            this.State = state;
            this.Storeys = storeys;
            this.StreetName = streetName;
            this.StreetNumber = streetNumber;
            this.StreetType = streetType;
            this.StreetTypeLong = streetTypeLong;
            this.Suburb = suburb;
            this.SuburbId = suburbId;
            this.Title = title;
            this.Updated = updated;
            this.UrlSlug = urlSlug;
            this.UrlSlugShort = urlSlugShort;
            this.Zone = zone;
            this.CanonicalUrl = canonicalUrl;
        }

        /// <summary>
        /// The full street address of the property
        /// </summary>
        /// <value>The full street address of the property</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; private set; }

        /// <summary>
        /// Returns false as Address should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddress()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets AddressCoordinate
        /// </summary>
        [DataMember(Name = "addressCoordinate", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1PropertiesGeoCoordinate AddressCoordinate { get; set; }

        /// <summary>
        /// The address identifier
        /// </summary>
        /// <value>The address identifier</value>
        [DataMember(Name = "addressId", EmitDefaultValue = false)]
        public int AddressId { get; set; }

        /// <summary>
        /// The current adverts for the property, if on the market
        /// </summary>
        /// <value>The current adverts for the property, if on the market</value>
        [DataMember(Name = "adverts", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1PropertiesAdvert> Adverts { get; set; }

        /// <summary>
        /// Gets or sets the size of the area of land on which the property resides.
        /// </summary>
        /// <value>Gets or sets the size of the area of land on which the property resides.</value>
        [DataMember(Name = "areaSize", EmitDefaultValue = false)]
        public int AreaSize { get; set; }

        /// <summary>
        /// The number of bathrooms.
        /// </summary>
        /// <value>The number of bathrooms.</value>
        [DataMember(Name = "bathrooms", EmitDefaultValue = false)]
        public int Bathrooms { get; set; }

        /// <summary>
        /// The number of bedrooms.
        /// </summary>
        /// <value>The number of bedrooms.</value>
        [DataMember(Name = "bedrooms", EmitDefaultValue = false)]
        public int Bedrooms { get; set; }

        /// <summary>
        /// The number of car spaces.
        /// </summary>
        /// <value>The number of car spaces.</value>
        [DataMember(Name = "carSpaces", EmitDefaultValue = false)]
        public int CarSpaces { get; set; }

        /// <summary>
        /// Gets or Sets Claim
        /// </summary>
        [DataMember(Name = "claim", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1PropertiesClaimData Claim { get; set; }

        /// <summary>
        /// The condition of the property.
        /// </summary>
        /// <value>The condition of the property.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// The created date of the property document.
        /// </summary>
        /// <value>The created date of the property document.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The number of ensuites.
        /// </summary>
        /// <value>The number of ensuites.</value>
        [DataMember(Name = "ensuites", EmitDefaultValue = false)]
        public int Ensuites { get; set; }

        /// <summary>
        /// The list of features for the given property
        /// </summary>
        /// <value>The list of features for the given property</value>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public List<string> Features { get; set; }

        /// <summary>
        /// The flat number of the property (if applicable for the property type).
        /// </summary>
        /// <value>The flat number of the property (if applicable for the property type).</value>
        [DataMember(Name = "flatNumber", EmitDefaultValue = false)]
        public string FlatNumber { get; set; }

        /// <summary>
        /// Associated PSMA GNAF identifiers
        /// </summary>
        /// <value>Associated PSMA GNAF identifiers</value>
        [DataMember(Name = "gnafIds", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1PropertiesGnafId> GnafIds { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name = "history", EmitDefaultValue = false)]
        public DomainPublicAdapterWebApiModelsV1PropertiesHistory History { get; set; }

        /// <summary>
        /// The property id of the property
        /// </summary>
        /// <value>The property id of the property</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The improvements to the property
        /// </summary>
        /// <value>The improvements to the property</value>
        [DataMember(Name = "improvements", EmitDefaultValue = false)]
        public string Improvements { get; set; }

        /// <summary>
        /// The floorplan area of the property.
        /// </summary>
        /// <value>The floorplan area of the property.</value>
        [DataMember(Name = "internalArea", EmitDefaultValue = false)]
        public int InternalArea { get; set; }

        /// <summary>
        /// Indicates whether this property is residential.
        /// </summary>
        /// <value>Indicates whether this property is residential.</value>
        [DataMember(Name = "isResidential", EmitDefaultValue = false)]
        public bool IsResidential { get; set; }

        /// <summary>
        /// The land use.
        /// </summary>
        /// <value>The land use.</value>
        [DataMember(Name = "landUse", EmitDefaultValue = false)]
        public string LandUse { get; set; }

        /// <summary>
        /// The lot number for the property.
        /// </summary>
        /// <value>The lot number for the property.</value>
        [DataMember(Name = "lotNumber", EmitDefaultValue = false)]
        public string LotNumber { get; set; }

        /// <summary>
        /// A collection of photos of the property.
        /// </summary>
        /// <value>A collection of photos of the property.</value>
        [DataMember(Name = "photos", EmitDefaultValue = false)]
        public List<DomainPublicAdapterWebApiModelsV1PropertiesPhoto> Photos { get; set; }

        /// <summary>
        /// The plan number.
        /// </summary>
        /// <value>The plan number.</value>
        [DataMember(Name = "planNumber", EmitDefaultValue = false)]
        public string PlanNumber { get; set; }

        /// <summary>
        /// The postcode of the property
        /// </summary>
        /// <value>The postcode of the property</value>
        [DataMember(Name = "postcode", EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// The property category.
        /// </summary>
        /// <value>The property category.</value>
        [DataMember(Name = "propertyCategory", EmitDefaultValue = false)]
        public string PropertyCategory { get; set; }

        /// <summary>
        /// The property category identifier
        /// </summary>
        /// <value>The property category identifier</value>
        [DataMember(Name = "propertyCategoryId", EmitDefaultValue = false)]
        public int PropertyCategoryId { get; set; }

        /// <summary>
        /// The type of the property.
        /// </summary>
        /// <value>The type of the property.</value>
        [DataMember(Name = "propertyType", EmitDefaultValue = false)]
        public string PropertyType { get; set; }

        /// <summary>
        /// The property type identifier.
        /// </summary>
        /// <value>The property type identifier.</value>
        [DataMember(Name = "propertyTypeId", EmitDefaultValue = false)]
        public int PropertyTypeId { get; set; }

        /// <summary>
        /// The number of rooms.
        /// </summary>
        /// <value>The number of rooms.</value>
        [DataMember(Name = "rooms", EmitDefaultValue = false)]
        public int Rooms { get; set; }

        /// <summary>
        /// The section number.
        /// </summary>
        /// <value>The section number.</value>
        [DataMember(Name = "sectionNumber", EmitDefaultValue = false)]
        public string SectionNumber { get; set; }

        /// <summary>
        /// The state in which the property resides
        /// </summary>
        /// <value>The state in which the property resides</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The number of storeys.
        /// </summary>
        /// <value>The number of storeys.</value>
        [DataMember(Name = "storeys", EmitDefaultValue = false)]
        public int Storeys { get; set; }

        /// <summary>
        /// Gets the address for search.
        /// </summary>
        /// <value>Gets the address for search.</value>
        [DataMember(Name = "streetAddress", EmitDefaultValue = false)]
        public string StreetAddress { get; private set; }

        /// <summary>
        /// Returns false as StreetAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStreetAddress()
        {
            return false;
        }

        /// <summary>
        /// The name of the street in which the property resides.
        /// </summary>
        /// <value>The name of the street in which the property resides.</value>
        [DataMember(Name = "streetName", EmitDefaultValue = false)]
        public string StreetName { get; set; }

        /// <summary>
        /// The street number of the property.
        /// </summary>
        /// <value>The street number of the property.</value>
        [DataMember(Name = "streetNumber", EmitDefaultValue = false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// The street type name e.g. St.
        /// </summary>
        /// <value>The street type name e.g. St.</value>
        [DataMember(Name = "streetType", EmitDefaultValue = false)]
        public string StreetType { get; set; }

        /// <summary>
        /// The long street type name e.g. Street.
        /// </summary>
        /// <value>The long street type name e.g. Street.</value>
        [DataMember(Name = "streetTypeLong", EmitDefaultValue = false)]
        public string StreetTypeLong { get; set; }

        /// <summary>
        /// The suburb in which the property resides.
        /// </summary>
        /// <value>The suburb in which the property resides.</value>
        [DataMember(Name = "suburb", EmitDefaultValue = false)]
        public string Suburb { get; set; }

        /// <summary>
        /// The identifier for the suburb in which the property resides.
        /// </summary>
        /// <value>The identifier for the suburb in which the property resides.</value>
        [DataMember(Name = "suburbId", EmitDefaultValue = false)]
        public int SuburbId { get; set; }

        /// <summary>
        /// The title for the property.
        /// </summary>
        /// <value>The title for the property.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The last time the property document was updated
        /// </summary>
        /// <value>The last time the property document was updated</value>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Gets the URL slug.
        /// </summary>
        /// <value>Gets the URL slug.</value>
        [DataMember(Name = "urlSlug", EmitDefaultValue = false)]
        public string UrlSlug { get; set; }

        /// <summary>
        /// Gets or sets the URL slug in short form
        /// </summary>
        /// <value>Gets or sets the URL slug in short form</value>
        [DataMember(Name = "urlSlugShort", EmitDefaultValue = false)]
        public string UrlSlugShort { get; set; }

        /// <summary>
        /// The property zone.
        /// </summary>
        /// <value>The property zone.</value>
        [DataMember(Name = "zone", EmitDefaultValue = false)]
        public string Zone { get; set; }

        /// <summary>
        /// Canonical url for this property
        /// </summary>
        /// <value>Canonical url for this property</value>
        [DataMember(Name = "canonicalUrl", EmitDefaultValue = false)]
        public string CanonicalUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainPublicAdapterWebApiModelsV1PropertiesProperty {\n");
            sb.Append("  CadastreType: ").Append(CadastreType).Append("\n");
            sb.Append("  OnMarketTypes: ").Append(OnMarketTypes).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AddressCoordinate: ").Append(AddressCoordinate).Append("\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("  Adverts: ").Append(Adverts).Append("\n");
            sb.Append("  AreaSize: ").Append(AreaSize).Append("\n");
            sb.Append("  Bathrooms: ").Append(Bathrooms).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  CarSpaces: ").Append(CarSpaces).Append("\n");
            sb.Append("  Claim: ").Append(Claim).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Ensuites: ").Append(Ensuites).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  FlatNumber: ").Append(FlatNumber).Append("\n");
            sb.Append("  GnafIds: ").Append(GnafIds).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Improvements: ").Append(Improvements).Append("\n");
            sb.Append("  InternalArea: ").Append(InternalArea).Append("\n");
            sb.Append("  IsResidential: ").Append(IsResidential).Append("\n");
            sb.Append("  LandUse: ").Append(LandUse).Append("\n");
            sb.Append("  LotNumber: ").Append(LotNumber).Append("\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  PlanNumber: ").Append(PlanNumber).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  PropertyCategory: ").Append(PropertyCategory).Append("\n");
            sb.Append("  PropertyCategoryId: ").Append(PropertyCategoryId).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  PropertyTypeId: ").Append(PropertyTypeId).Append("\n");
            sb.Append("  Rooms: ").Append(Rooms).Append("\n");
            sb.Append("  SectionNumber: ").Append(SectionNumber).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Storeys: ").Append(Storeys).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  StreetTypeLong: ").Append(StreetTypeLong).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  SuburbId: ").Append(SuburbId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  UrlSlug: ").Append(UrlSlug).Append("\n");
            sb.Append("  UrlSlugShort: ").Append(UrlSlugShort).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  CanonicalUrl: ").Append(CanonicalUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainPublicAdapterWebApiModelsV1PropertiesProperty);
        }

        /// <summary>
        /// Returns true if DomainPublicAdapterWebApiModelsV1PropertiesProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainPublicAdapterWebApiModelsV1PropertiesProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainPublicAdapterWebApiModelsV1PropertiesProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CadastreType == input.CadastreType ||
                    this.CadastreType.Equals(input.CadastreType)
                ) && 
                (
                    this.OnMarketTypes == input.OnMarketTypes ||
                    this.OnMarketTypes.SequenceEqual(input.OnMarketTypes)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AddressCoordinate == input.AddressCoordinate ||
                    (this.AddressCoordinate != null &&
                    this.AddressCoordinate.Equals(input.AddressCoordinate))
                ) && 
                (
                    this.AddressId == input.AddressId ||
                    this.AddressId.Equals(input.AddressId)
                ) && 
                (
                    this.Adverts == input.Adverts ||
                    this.Adverts != null &&
                    input.Adverts != null &&
                    this.Adverts.SequenceEqual(input.Adverts)
                ) && 
                (
                    this.AreaSize == input.AreaSize ||
                    this.AreaSize.Equals(input.AreaSize)
                ) && 
                (
                    this.Bathrooms == input.Bathrooms ||
                    this.Bathrooms.Equals(input.Bathrooms)
                ) && 
                (
                    this.Bedrooms == input.Bedrooms ||
                    this.Bedrooms.Equals(input.Bedrooms)
                ) && 
                (
                    this.CarSpaces == input.CarSpaces ||
                    this.CarSpaces.Equals(input.CarSpaces)
                ) && 
                (
                    this.Claim == input.Claim ||
                    (this.Claim != null &&
                    this.Claim.Equals(input.Claim))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Ensuites == input.Ensuites ||
                    this.Ensuites.Equals(input.Ensuites)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.FlatNumber == input.FlatNumber ||
                    (this.FlatNumber != null &&
                    this.FlatNumber.Equals(input.FlatNumber))
                ) && 
                (
                    this.GnafIds == input.GnafIds ||
                    this.GnafIds != null &&
                    input.GnafIds != null &&
                    this.GnafIds.SequenceEqual(input.GnafIds)
                ) && 
                (
                    this.History == input.History ||
                    (this.History != null &&
                    this.History.Equals(input.History))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Improvements == input.Improvements ||
                    (this.Improvements != null &&
                    this.Improvements.Equals(input.Improvements))
                ) && 
                (
                    this.InternalArea == input.InternalArea ||
                    this.InternalArea.Equals(input.InternalArea)
                ) && 
                (
                    this.IsResidential == input.IsResidential ||
                    this.IsResidential.Equals(input.IsResidential)
                ) && 
                (
                    this.LandUse == input.LandUse ||
                    (this.LandUse != null &&
                    this.LandUse.Equals(input.LandUse))
                ) && 
                (
                    this.LotNumber == input.LotNumber ||
                    (this.LotNumber != null &&
                    this.LotNumber.Equals(input.LotNumber))
                ) && 
                (
                    this.Photos == input.Photos ||
                    this.Photos != null &&
                    input.Photos != null &&
                    this.Photos.SequenceEqual(input.Photos)
                ) && 
                (
                    this.PlanNumber == input.PlanNumber ||
                    (this.PlanNumber != null &&
                    this.PlanNumber.Equals(input.PlanNumber))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.PropertyCategory == input.PropertyCategory ||
                    (this.PropertyCategory != null &&
                    this.PropertyCategory.Equals(input.PropertyCategory))
                ) && 
                (
                    this.PropertyCategoryId == input.PropertyCategoryId ||
                    this.PropertyCategoryId.Equals(input.PropertyCategoryId)
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    (this.PropertyType != null &&
                    this.PropertyType.Equals(input.PropertyType))
                ) && 
                (
                    this.PropertyTypeId == input.PropertyTypeId ||
                    this.PropertyTypeId.Equals(input.PropertyTypeId)
                ) && 
                (
                    this.Rooms == input.Rooms ||
                    this.Rooms.Equals(input.Rooms)
                ) && 
                (
                    this.SectionNumber == input.SectionNumber ||
                    (this.SectionNumber != null &&
                    this.SectionNumber.Equals(input.SectionNumber))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Storeys == input.Storeys ||
                    this.Storeys.Equals(input.Storeys)
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.StreetType == input.StreetType ||
                    (this.StreetType != null &&
                    this.StreetType.Equals(input.StreetType))
                ) && 
                (
                    this.StreetTypeLong == input.StreetTypeLong ||
                    (this.StreetTypeLong != null &&
                    this.StreetTypeLong.Equals(input.StreetTypeLong))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.SuburbId == input.SuburbId ||
                    this.SuburbId.Equals(input.SuburbId)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.UrlSlug == input.UrlSlug ||
                    (this.UrlSlug != null &&
                    this.UrlSlug.Equals(input.UrlSlug))
                ) && 
                (
                    this.UrlSlugShort == input.UrlSlugShort ||
                    (this.UrlSlugShort != null &&
                    this.UrlSlugShort.Equals(input.UrlSlugShort))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                ) && 
                (
                    this.CanonicalUrl == input.CanonicalUrl ||
                    (this.CanonicalUrl != null &&
                    this.CanonicalUrl.Equals(input.CanonicalUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CadastreType.GetHashCode();
                hashCode = hashCode * 59 + this.OnMarketTypes.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AddressCoordinate != null)
                    hashCode = hashCode * 59 + this.AddressCoordinate.GetHashCode();
                hashCode = hashCode * 59 + this.AddressId.GetHashCode();
                if (this.Adverts != null)
                    hashCode = hashCode * 59 + this.Adverts.GetHashCode();
                hashCode = hashCode * 59 + this.AreaSize.GetHashCode();
                hashCode = hashCode * 59 + this.Bathrooms.GetHashCode();
                hashCode = hashCode * 59 + this.Bedrooms.GetHashCode();
                hashCode = hashCode * 59 + this.CarSpaces.GetHashCode();
                if (this.Claim != null)
                    hashCode = hashCode * 59 + this.Claim.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.Ensuites.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.FlatNumber != null)
                    hashCode = hashCode * 59 + this.FlatNumber.GetHashCode();
                if (this.GnafIds != null)
                    hashCode = hashCode * 59 + this.GnafIds.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Improvements != null)
                    hashCode = hashCode * 59 + this.Improvements.GetHashCode();
                hashCode = hashCode * 59 + this.InternalArea.GetHashCode();
                hashCode = hashCode * 59 + this.IsResidential.GetHashCode();
                if (this.LandUse != null)
                    hashCode = hashCode * 59 + this.LandUse.GetHashCode();
                if (this.LotNumber != null)
                    hashCode = hashCode * 59 + this.LotNumber.GetHashCode();
                if (this.Photos != null)
                    hashCode = hashCode * 59 + this.Photos.GetHashCode();
                if (this.PlanNumber != null)
                    hashCode = hashCode * 59 + this.PlanNumber.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.PropertyCategory != null)
                    hashCode = hashCode * 59 + this.PropertyCategory.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyCategoryId.GetHashCode();
                if (this.PropertyType != null)
                    hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyTypeId.GetHashCode();
                hashCode = hashCode * 59 + this.Rooms.GetHashCode();
                if (this.SectionNumber != null)
                    hashCode = hashCode * 59 + this.SectionNumber.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.Storeys.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.StreetType != null)
                    hashCode = hashCode * 59 + this.StreetType.GetHashCode();
                if (this.StreetTypeLong != null)
                    hashCode = hashCode * 59 + this.StreetTypeLong.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                hashCode = hashCode * 59 + this.SuburbId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.UrlSlug != null)
                    hashCode = hashCode * 59 + this.UrlSlug.GetHashCode();
                if (this.UrlSlugShort != null)
                    hashCode = hashCode * 59 + this.UrlSlugShort.GetHashCode();
                if (this.Zone != null)
                    hashCode = hashCode * 59 + this.Zone.GetHashCode();
                if (this.CanonicalUrl != null)
                    hashCode = hashCode * 59 + this.CanonicalUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
