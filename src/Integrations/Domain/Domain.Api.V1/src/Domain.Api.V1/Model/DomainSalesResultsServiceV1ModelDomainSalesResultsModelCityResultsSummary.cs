/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary
    /// </summary>
    [DataContract(Name = "Domain.SalesResultsService.v1.Model.DomainSalesResultsModelCityResultsSummary")]
    public partial class DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary : IEquatable<DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary" /> class.
        /// </summary>
        /// <param name="numberListedForAuction">numberListedForAuction.</param>
        /// <param name="numberWithdrawn">numberWithdrawn.</param>
        /// <param name="numberUnreported">numberUnreported.</param>
        /// <param name="numberAuctioned">numberAuctioned.</param>
        /// <param name="numberSold">numberSold.</param>
        /// <param name="totalSales">totalSales.</param>
        /// <param name="median">median.</param>
        /// <param name="adjClearanceRate">adjClearanceRate.</param>
        /// <param name="auctionedDate">auctionedDate.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        public DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary(int numberListedForAuction = default(int), int numberWithdrawn = default(int), int numberUnreported = default(int), int numberAuctioned = default(int), int numberSold = default(int), double totalSales = default(double), int median = default(int), double adjClearanceRate = default(double), DateTime auctionedDate = default(DateTime), DateTime lastModifiedDateTime = default(DateTime))
        {
            this.NumberListedForAuction = numberListedForAuction;
            this.NumberWithdrawn = numberWithdrawn;
            this.NumberUnreported = numberUnreported;
            this.NumberAuctioned = numberAuctioned;
            this.NumberSold = numberSold;
            this.TotalSales = totalSales;
            this.Median = median;
            this.AdjClearanceRate = adjClearanceRate;
            this.AuctionedDate = auctionedDate;
            this.LastModifiedDateTime = lastModifiedDateTime;
        }

        /// <summary>
        /// Gets or Sets NumberListedForAuction
        /// </summary>
        [DataMember(Name = "numberListedForAuction", EmitDefaultValue = false)]
        public int NumberListedForAuction { get; set; }

        /// <summary>
        /// Gets or Sets NumberWithdrawn
        /// </summary>
        [DataMember(Name = "numberWithdrawn", EmitDefaultValue = false)]
        public int NumberWithdrawn { get; set; }

        /// <summary>
        /// Gets or Sets NumberUnreported
        /// </summary>
        [DataMember(Name = "numberUnreported", EmitDefaultValue = false)]
        public int NumberUnreported { get; set; }

        /// <summary>
        /// Gets or Sets NumberAuctioned
        /// </summary>
        [DataMember(Name = "numberAuctioned", EmitDefaultValue = false)]
        public int NumberAuctioned { get; set; }

        /// <summary>
        /// Gets or Sets NumberSold
        /// </summary>
        [DataMember(Name = "numberSold", EmitDefaultValue = false)]
        public int NumberSold { get; set; }

        /// <summary>
        /// Gets or Sets TotalSales
        /// </summary>
        [DataMember(Name = "totalSales", EmitDefaultValue = false)]
        public double TotalSales { get; set; }

        /// <summary>
        /// Gets or Sets Median
        /// </summary>
        [DataMember(Name = "median", EmitDefaultValue = false)]
        public int Median { get; set; }

        /// <summary>
        /// Gets or Sets AdjClearanceRate
        /// </summary>
        [DataMember(Name = "adjClearanceRate", EmitDefaultValue = false)]
        public double AdjClearanceRate { get; set; }

        /// <summary>
        /// Gets or Sets AuctionedDate
        /// </summary>
        [DataMember(Name = "auctionedDate", EmitDefaultValue = false)]
        public DateTime AuctionedDate { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name = "lastModifiedDateTime", EmitDefaultValue = false)]
        public DateTime LastModifiedDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary {\n");
            sb.Append("  NumberListedForAuction: ").Append(NumberListedForAuction).Append("\n");
            sb.Append("  NumberWithdrawn: ").Append(NumberWithdrawn).Append("\n");
            sb.Append("  NumberUnreported: ").Append(NumberUnreported).Append("\n");
            sb.Append("  NumberAuctioned: ").Append(NumberAuctioned).Append("\n");
            sb.Append("  NumberSold: ").Append(NumberSold).Append("\n");
            sb.Append("  TotalSales: ").Append(TotalSales).Append("\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  AdjClearanceRate: ").Append(AdjClearanceRate).Append("\n");
            sb.Append("  AuctionedDate: ").Append(AuctionedDate).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary);
        }

        /// <summary>
        /// Returns true if DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSalesResultsServiceV1ModelDomainSalesResultsModelCityResultsSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberListedForAuction == input.NumberListedForAuction ||
                    this.NumberListedForAuction.Equals(input.NumberListedForAuction)
                ) && 
                (
                    this.NumberWithdrawn == input.NumberWithdrawn ||
                    this.NumberWithdrawn.Equals(input.NumberWithdrawn)
                ) && 
                (
                    this.NumberUnreported == input.NumberUnreported ||
                    this.NumberUnreported.Equals(input.NumberUnreported)
                ) && 
                (
                    this.NumberAuctioned == input.NumberAuctioned ||
                    this.NumberAuctioned.Equals(input.NumberAuctioned)
                ) && 
                (
                    this.NumberSold == input.NumberSold ||
                    this.NumberSold.Equals(input.NumberSold)
                ) && 
                (
                    this.TotalSales == input.TotalSales ||
                    this.TotalSales.Equals(input.TotalSales)
                ) && 
                (
                    this.Median == input.Median ||
                    this.Median.Equals(input.Median)
                ) && 
                (
                    this.AdjClearanceRate == input.AdjClearanceRate ||
                    this.AdjClearanceRate.Equals(input.AdjClearanceRate)
                ) && 
                (
                    this.AuctionedDate == input.AuctionedDate ||
                    (this.AuctionedDate != null &&
                    this.AuctionedDate.Equals(input.AuctionedDate))
                ) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.NumberListedForAuction.GetHashCode();
                hashCode = hashCode * 59 + this.NumberWithdrawn.GetHashCode();
                hashCode = hashCode * 59 + this.NumberUnreported.GetHashCode();
                hashCode = hashCode * 59 + this.NumberAuctioned.GetHashCode();
                hashCode = hashCode * 59 + this.NumberSold.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSales.GetHashCode();
                hashCode = hashCode * 59 + this.Median.GetHashCode();
                hashCode = hashCode * 59 + this.AdjClearanceRate.GetHashCode();
                if (this.AuctionedDate != null)
                    hashCode = hashCode * 59 + this.AuctionedDate.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
