/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.DomainSearchContractsV2InspectionSchedule")]
    public partial class DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule : IEquatable<DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule" /> class.
        /// </summary>
        /// <param name="byAppointment">byAppointment.</param>
        /// <param name="recurring">recurring.</param>
        /// <param name="times">times.</param>
        public DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule(bool byAppointment = default(bool), bool recurring = default(bool), List<DomainSearchServiceV2ModelDomainSearchContractsV2Inspection> times = default(List<DomainSearchServiceV2ModelDomainSearchContractsV2Inspection>))
        {
            this.ByAppointment = byAppointment;
            this.Recurring = recurring;
            this.Times = times;
        }

        /// <summary>
        /// Gets or Sets ByAppointment
        /// </summary>
        [DataMember(Name = "byAppointment", EmitDefaultValue = false)]
        public bool ByAppointment { get; set; }

        /// <summary>
        /// Gets or Sets Recurring
        /// </summary>
        [DataMember(Name = "recurring", EmitDefaultValue = false)]
        public bool Recurring { get; set; }

        /// <summary>
        /// Gets or Sets Times
        /// </summary>
        [DataMember(Name = "times", EmitDefaultValue = false)]
        public List<DomainSearchServiceV2ModelDomainSearchContractsV2Inspection> Times { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule {\n");
            sb.Append("  ByAppointment: ").Append(ByAppointment).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  Times: ").Append(Times).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ByAppointment == input.ByAppointment ||
                    this.ByAppointment.Equals(input.ByAppointment)
                ) && 
                (
                    this.Recurring == input.Recurring ||
                    this.Recurring.Equals(input.Recurring)
                ) && 
                (
                    this.Times == input.Times ||
                    this.Times != null &&
                    input.Times != null &&
                    this.Times.SequenceEqual(input.Times)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ByAppointment.GetHashCode();
                hashCode = hashCode * 59 + this.Recurring.GetHashCode();
                if (this.Times != null)
                    hashCode = hashCode * 59 + this.Times.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
