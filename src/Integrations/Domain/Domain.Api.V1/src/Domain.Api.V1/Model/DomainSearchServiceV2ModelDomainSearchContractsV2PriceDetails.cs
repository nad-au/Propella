/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails
    /// </summary>
    [DataContract(Name = "Domain.SearchService.v2.Model.DomainSearchContractsV2PriceDetails")]
    public partial class DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails : IEquatable<DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails" /> class.
        /// </summary>
        /// <param name="price">price.</param>
        /// <param name="priceFrom">priceFrom.</param>
        /// <param name="priceTo">priceTo.</param>
        /// <param name="displayPrice">displayPrice.</param>
        public DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails(int price = default(int), int priceFrom = default(int), int priceTo = default(int), string displayPrice = default(string))
        {
            this.Price = price;
            this.PriceFrom = priceFrom;
            this.PriceTo = priceTo;
            this.DisplayPrice = displayPrice;
        }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public int Price { get; set; }

        /// <summary>
        /// Gets or Sets PriceFrom
        /// </summary>
        [DataMember(Name = "priceFrom", EmitDefaultValue = false)]
        public int PriceFrom { get; set; }

        /// <summary>
        /// Gets or Sets PriceTo
        /// </summary>
        [DataMember(Name = "priceTo", EmitDefaultValue = false)]
        public int PriceTo { get; set; }

        /// <summary>
        /// Gets or Sets DisplayPrice
        /// </summary>
        [DataMember(Name = "displayPrice", EmitDefaultValue = false)]
        public string DisplayPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceFrom: ").Append(PriceFrom).Append("\n");
            sb.Append("  PriceTo: ").Append(PriceTo).Append("\n");
            sb.Append("  DisplayPrice: ").Append(DisplayPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails);
        }

        /// <summary>
        /// Returns true if DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.PriceFrom == input.PriceFrom ||
                    this.PriceFrom.Equals(input.PriceFrom)
                ) && 
                (
                    this.PriceTo == input.PriceTo ||
                    this.PriceTo.Equals(input.PriceTo)
                ) && 
                (
                    this.DisplayPrice == input.DisplayPrice ||
                    (this.DisplayPrice != null &&
                    this.DisplayPrice.Equals(input.DisplayPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.PriceFrom.GetHashCode();
                hashCode = hashCode * 59 + this.PriceTo.GetHashCode();
                if (this.DisplayPrice != null)
                    hashCode = hashCode * 59 + this.DisplayPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
