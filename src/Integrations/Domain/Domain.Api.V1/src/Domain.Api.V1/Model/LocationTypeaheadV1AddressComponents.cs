/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v1
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V1.Client.OpenAPIDateConverter;

namespace Domain.Api.V1.Model
{
    /// <summary>
    /// LocationTypeaheadV1AddressComponents
    /// </summary>
    [DataContract(Name = "LocationTypeahead.V1.AddressComponents")]
    public partial class LocationTypeaheadV1AddressComponents : IEquatable<LocationTypeaheadV1AddressComponents>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationTypeaheadV1AddressComponents" /> class.
        /// </summary>
        /// <param name="unitNumber">unitNumber.</param>
        /// <param name="streetNumber">streetNumber.</param>
        /// <param name="streetName">streetName.</param>
        /// <param name="streetType">streetType.</param>
        /// <param name="streetTypeLong">streetTypeLong.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="state">state.</param>
        public LocationTypeaheadV1AddressComponents(string unitNumber = default(string), string streetNumber = default(string), string streetName = default(string), string streetType = default(string), string streetTypeLong = default(string), string suburb = default(string), string postCode = default(string), string state = default(string))
        {
            this.UnitNumber = unitNumber;
            this.StreetNumber = streetNumber;
            this.StreetName = streetName;
            this.StreetType = streetType;
            this.StreetTypeLong = streetTypeLong;
            this.Suburb = suburb;
            this.PostCode = postCode;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets UnitNumber
        /// </summary>
        [DataMember(Name = "unitNumber", EmitDefaultValue = true)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// Gets or Sets StreetNumber
        /// </summary>
        [DataMember(Name = "streetNumber", EmitDefaultValue = true)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Gets or Sets StreetName
        /// </summary>
        [DataMember(Name = "streetName", EmitDefaultValue = true)]
        public string StreetName { get; set; }

        /// <summary>
        /// Gets or Sets StreetType
        /// </summary>
        [DataMember(Name = "streetType", EmitDefaultValue = true)]
        public string StreetType { get; set; }

        /// <summary>
        /// Gets or Sets StreetTypeLong
        /// </summary>
        [DataMember(Name = "streetTypeLong", EmitDefaultValue = true)]
        public string StreetTypeLong { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name = "suburb", EmitDefaultValue = true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name = "postCode", EmitDefaultValue = true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationTypeaheadV1AddressComponents {\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  StreetTypeLong: ").Append(StreetTypeLong).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationTypeaheadV1AddressComponents);
        }

        /// <summary>
        /// Returns true if LocationTypeaheadV1AddressComponents instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationTypeaheadV1AddressComponents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationTypeaheadV1AddressComponents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetType == input.StreetType ||
                    (this.StreetType != null &&
                    this.StreetType.Equals(input.StreetType))
                ) && 
                (
                    this.StreetTypeLong == input.StreetTypeLong ||
                    (this.StreetTypeLong != null &&
                    this.StreetTypeLong.Equals(input.StreetTypeLong))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetType != null)
                    hashCode = hashCode * 59 + this.StreetType.GetHashCode();
                if (this.StreetTypeLong != null)
                    hashCode = hashCode * 59 + this.StreetTypeLong.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
