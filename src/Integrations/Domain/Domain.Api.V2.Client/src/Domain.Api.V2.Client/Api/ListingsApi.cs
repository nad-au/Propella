/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V2.Client.Client;
using Domain.Api.V2.Client.Model;

namespace Domain.Api.V2.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve list of listings for the given property id
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <returns>List&lt;ListingsV2Listing&gt;</returns>
        List<ListingsV2Listing> ListingsBypropertyid(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?));

        /// <summary>
        /// Retrieve list of listings for the given property id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ListingsV2Listing&gt;</returns>
        ApiResponse<List<ListingsV2Listing>> ListingsBypropertyidWithHttpInfo(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?));
        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertbusinessoffmarket(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing);

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketWithHttpInfo(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing);
        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertcommerciallisting(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2);

        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingWithHttpInfo(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2);
        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertcommercialoffmarket(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing);

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketWithHttpInfo(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing);
        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertresidentialoffmarket(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing);

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketWithHttpInfo(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing);
        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>PreMarketV1ListingResponse</returns>
        PreMarketV1ListingResponse PreMarketGet(string id);

        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>ApiResponse of PreMarketV1ListingResponse</returns>
        ApiResponse<PreMarketV1ListingResponse> PreMarketGetWithHttpInfo(string id);
        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>PreMarketV1ListingRequest</returns>
        PreMarketV1ListingRequest PreMarketPatch(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument));

        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of PreMarketV1ListingRequest</returns>
        ApiResponse<PreMarketV1ListingRequest> PreMarketPatchWithHttpInfo(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument));
        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <returns>PreMarketV1CreateOrUpdateListingResponse</returns>
        PreMarketV1CreateOrUpdateListingResponse PreMarketPost(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest));

        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <returns>ApiResponse of PreMarketV1CreateOrUpdateListingResponse</returns>
        ApiResponse<PreMarketV1CreateOrUpdateListingResponse> PreMarketPostWithHttpInfo(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve list of listings for the given property id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ListingsV2Listing&gt;</returns>
        System.Threading.Tasks.Task<List<ListingsV2Listing>> ListingsBypropertyidAsync(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve list of listings for the given property id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ListingsV2Listing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ListingsV2Listing>>> ListingsBypropertyidWithHttpInfoAsync(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketAsync(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertbusinessoffmarketWithHttpInfoAsync(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingAsync(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommerciallistingWithHttpInfoAsync(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketAsync(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommercialoffmarketWithHttpInfoAsync(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketAsync(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertresidentialoffmarketWithHttpInfoAsync(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreMarketV1ListingResponse</returns>
        System.Threading.Tasks.Task<PreMarketV1ListingResponse> PreMarketGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreMarketV1ListingResponse>> PreMarketGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreMarketV1ListingRequest</returns>
        System.Threading.Tasks.Task<PreMarketV1ListingRequest> PreMarketPatchAsync(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreMarketV1ListingRequest>> PreMarketPatchWithHttpInfoAsync(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreMarketV1CreateOrUpdateListingResponse</returns>
        System.Threading.Tasks.Task<PreMarketV1CreateOrUpdateListingResponse> PreMarketPostAsync(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreMarketV1CreateOrUpdateListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreMarketV1CreateOrUpdateListingResponse>> PreMarketPostWithHttpInfoAsync(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApi : IListingsApiSync, IListingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListingsApi : IListingsApi
    {
        private Domain.Api.V2.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListingsApi(String basePath)
        {
            this.Configuration = Domain.Api.V2.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V2.Client.Client.GlobalConfiguration.Instance,
                new Domain.Api.V2.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListingsApi(Domain.Api.V2.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V2.Client.Client.Configuration.MergeConfigurations(
                Domain.Api.V2.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ListingsApi(Domain.Api.V2.Client.Client.ISynchronousClient client, Domain.Api.V2.Client.Client.IAsynchronousClient asyncClient, Domain.Api.V2.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V2.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V2.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V2.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V2.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve list of listings for the given property id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <returns>List&lt;ListingsV2Listing&gt;</returns>
        public List<ListingsV2Listing> ListingsBypropertyid(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?))
        {
            Domain.Api.V2.Client.Client.ApiResponse<List<ListingsV2Listing>> localVarResponse = ListingsBypropertyidWithHttpInfo(propertyId, updatedSince, listedSince, saleMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve list of listings for the given property id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ListingsV2Listing&gt;</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<List<ListingsV2Listing>> ListingsBypropertyidWithHttpInfo(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?))
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'propertyId' when calling ListingsApi->ListingsBypropertyid");

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyId", Domain.Api.V2.Client.Client.ClientUtils.ParameterToString(propertyId)); // path parameter
            if (updatedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "updatedSince", updatedSince));
            }
            if (listedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "listedSince", listedSince));
            }
            if (saleMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "saleMode", saleMode));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ListingsV2Listing>>("/v2/properties/{propertyId}/listings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsBypropertyid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve list of listings for the given property id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ListingsV2Listing&gt;</returns>
        public async System.Threading.Tasks.Task<List<ListingsV2Listing>> ListingsBypropertyidAsync(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<List<ListingsV2Listing>> localVarResponse = await ListingsBypropertyidWithHttpInfoAsync(propertyId, updatedSince, listedSince, saleMode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve list of listings for the given property id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="updatedSince"> (optional)</param>
        /// <param name="listedSince"> (optional)</param>
        /// <param name="saleMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ListingsV2Listing&gt;)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<List<ListingsV2Listing>>> ListingsBypropertyidWithHttpInfoAsync(string propertyId, DateTime? updatedSince = default(DateTime?), DateTime? listedSince = default(DateTime?), ListingsV2SaleMode? saleMode = default(ListingsV2SaleMode?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'propertyId' when calling ListingsApi->ListingsBypropertyid");


            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyId", Domain.Api.V2.Client.Client.ClientUtils.ParameterToString(propertyId)); // path parameter
            if (updatedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "updatedSince", updatedSince));
            }
            if (listedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "listedSince", listedSince));
            }
            if (saleMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "saleMode", saleMode));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ListingsV2Listing>>("/v2/properties/{propertyId}/listings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsBypropertyid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertbusinessoffmarket(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing)
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertbusinessoffmarketWithHttpInfo(listingAdminV2BusinessOffMarketListing);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketWithHttpInfo(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing)
        {
            // verify the required parameter 'listingAdminV2BusinessOffMarketListing' is set
            if (listingAdminV2BusinessOffMarketListing == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2BusinessOffMarketListing' when calling ListingsApi->ListingsUpsertbusinessoffmarket");

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2BusinessOffMarketListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ListingAdminV2ListingResponse>("/v2/listings/business/offmarket", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertbusinessoffmarket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketAsync(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertbusinessoffmarketWithHttpInfoAsync(listingAdminV2BusinessOffMarketListing, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2BusinessOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertbusinessoffmarketWithHttpInfoAsync(ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'listingAdminV2BusinessOffMarketListing' is set
            if (listingAdminV2BusinessOffMarketListing == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2BusinessOffMarketListing' when calling ListingsApi->ListingsUpsertbusinessoffmarket");


            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2BusinessOffMarketListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListingAdminV2ListingResponse>("/v2/listings/business/offmarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertbusinessoffmarket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertcommerciallisting(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2)
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertcommerciallistingWithHttpInfo(listingAdminV2CommercialListingV2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingWithHttpInfo(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2)
        {
            // verify the required parameter 'listingAdminV2CommercialListingV2' is set
            if (listingAdminV2CommercialListingV2 == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2CommercialListingV2' when calling ListingsApi->ListingsUpsertcommerciallisting");

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2CommercialListingV2;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ListingAdminV2ListingResponse>("/v2/listings/commercial", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertcommerciallisting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingAsync(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertcommerciallistingWithHttpInfoAsync(listingAdminV2CommercialListingV2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialListingV2">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommerciallistingWithHttpInfoAsync(ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'listingAdminV2CommercialListingV2' is set
            if (listingAdminV2CommercialListingV2 == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2CommercialListingV2' when calling ListingsApi->ListingsUpsertcommerciallisting");


            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2CommercialListingV2;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ListingAdminV2ListingResponse>("/v2/listings/commercial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertcommerciallisting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertcommercialoffmarket(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing)
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertcommercialoffmarketWithHttpInfo(listingAdminV2CommercialOffMarketListing);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketWithHttpInfo(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing)
        {
            // verify the required parameter 'listingAdminV2CommercialOffMarketListing' is set
            if (listingAdminV2CommercialOffMarketListing == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2CommercialOffMarketListing' when calling ListingsApi->ListingsUpsertcommercialoffmarket");

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2CommercialOffMarketListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ListingAdminV2ListingResponse>("/v2/listings/commercial/offmarket", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertcommercialoffmarket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketAsync(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertcommercialoffmarketWithHttpInfoAsync(listingAdminV2CommercialOffMarketListing, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2CommercialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommercialoffmarketWithHttpInfoAsync(ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'listingAdminV2CommercialOffMarketListing' is set
            if (listingAdminV2CommercialOffMarketListing == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2CommercialOffMarketListing' when calling ListingsApi->ListingsUpsertcommercialoffmarket");


            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2CommercialOffMarketListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListingAdminV2ListingResponse>("/v2/listings/commercial/offmarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertcommercialoffmarket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertresidentialoffmarket(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing)
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertresidentialoffmarketWithHttpInfo(listingAdminV2ResidentialOffMarketListing);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketWithHttpInfo(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing)
        {
            // verify the required parameter 'listingAdminV2ResidentialOffMarketListing' is set
            if (listingAdminV2ResidentialOffMarketListing == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2ResidentialOffMarketListing' when calling ListingsApi->ListingsUpsertresidentialoffmarket");

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2ResidentialOffMarketListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ListingAdminV2ListingResponse>("/v2/listings/residential/offmarket", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertresidentialoffmarket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketAsync(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertresidentialoffmarketWithHttpInfoAsync(listingAdminV2ResidentialOffMarketListing, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingAdminV2ResidentialOffMarketListing">Listing data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertresidentialoffmarketWithHttpInfoAsync(ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'listingAdminV2ResidentialOffMarketListing' is set
            if (listingAdminV2ResidentialOffMarketListing == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'listingAdminV2ResidentialOffMarketListing' when calling ListingsApi->ListingsUpsertresidentialoffmarket");


            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = listingAdminV2ResidentialOffMarketListing;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListingAdminV2ListingResponse>("/v2/listings/residential/offmarket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListingsUpsertresidentialoffmarket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>PreMarketV1ListingResponse</returns>
        public PreMarketV1ListingResponse PreMarketGet(string id)
        {
            Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingResponse> localVarResponse = PreMarketGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>ApiResponse of PreMarketV1ListingResponse</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingResponse> PreMarketGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketGet");

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PreMarketV1ListingResponse>("/v2/premarket/listings/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreMarketGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreMarketV1ListingResponse</returns>
        public async System.Threading.Tasks.Task<PreMarketV1ListingResponse> PreMarketGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingResponse> localVarResponse = await PreMarketGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingResponse>> PreMarketGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketGet");


            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PreMarketV1ListingResponse>("/v2/premarket/listings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreMarketGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>PreMarketV1ListingRequest</returns>
        public PreMarketV1ListingRequest PreMarketPatch(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument))
        {
            Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingRequest> localVarResponse = PreMarketPatchWithHttpInfo(id, preMarketV1ListingRequestJsonPatchDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of PreMarketV1ListingRequest</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingRequest> PreMarketPatchWithHttpInfo(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketPatch");

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = preMarketV1ListingRequestJsonPatchDocument;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<PreMarketV1ListingRequest>("/v2/premarket/listings/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreMarketPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreMarketV1ListingRequest</returns>
        public async System.Threading.Tasks.Task<PreMarketV1ListingRequest> PreMarketPatchAsync(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingRequest> localVarResponse = await PreMarketPatchWithHttpInfoAsync(id, preMarketV1ListingRequestJsonPatchDocument, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="preMarketV1ListingRequestJsonPatchDocument">&#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingRequest)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1ListingRequest>> PreMarketPatchWithHttpInfoAsync(string id, PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = default(PreMarketV1ListingRequestJsonPatchDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Domain.Api.V2.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketPatch");


            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Domain.Api.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = preMarketV1ListingRequestJsonPatchDocument;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<PreMarketV1ListingRequest>("/v2/premarket/listings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreMarketPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <returns>PreMarketV1CreateOrUpdateListingResponse</returns>
        public PreMarketV1CreateOrUpdateListingResponse PreMarketPost(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest))
        {
            Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1CreateOrUpdateListingResponse> localVarResponse = PreMarketPostWithHttpInfo(preMarketV1ListingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <returns>ApiResponse of PreMarketV1CreateOrUpdateListingResponse</returns>
        public Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1CreateOrUpdateListingResponse> PreMarketPostWithHttpInfo(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest))
        {
            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = preMarketV1ListingRequest;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PreMarketV1CreateOrUpdateListingResponse>("/v2/premarket/listings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreMarketPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreMarketV1CreateOrUpdateListingResponse</returns>
        public async System.Threading.Tasks.Task<PreMarketV1CreateOrUpdateListingResponse> PreMarketPostAsync(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1CreateOrUpdateListingResponse> localVarResponse = await PreMarketPostWithHttpInfoAsync(preMarketV1ListingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preMarketV1ListingRequest">Pre-portal listing request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreMarketV1CreateOrUpdateListingResponse)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.Client.ApiResponse<PreMarketV1CreateOrUpdateListingResponse>> PreMarketPostWithHttpInfoAsync(PreMarketV1ListingRequest preMarketV1ListingRequest = default(PreMarketV1ListingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Domain.Api.V2.Client.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = preMarketV1ListingRequest;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PreMarketV1CreateOrUpdateListingResponse>("/v2/premarket/listings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreMarketPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
