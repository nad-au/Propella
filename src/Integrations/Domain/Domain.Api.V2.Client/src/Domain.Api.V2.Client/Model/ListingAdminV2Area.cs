/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Client.Model
{
    /// <summary>
    /// Area information, Either single value or from and To must be provided
    /// </summary>
    [DataContract(Name = "ListingAdmin.v2.Area")]
    public partial class ListingAdminV2Area : IEquatable<ListingAdminV2Area>, IValidatableObject
    {
        /// <summary>
        /// Unit of measure, defaults to SquareMetres if not provided.
        /// </summary>
        /// <value>Unit of measure, defaults to SquareMetres if not provided.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum SquareMetres for value: squareMetres
            /// </summary>
            [EnumMember(Value = "squareMetres")]
            SquareMetres = 1,

            /// <summary>
            /// Enum Acres for value: acres
            /// </summary>
            [EnumMember(Value = "acres")]
            Acres = 2,

            /// <summary>
            /// Enum Hectares for value: hectares
            /// </summary>
            [EnumMember(Value = "hectares")]
            Hectares = 3,

            /// <summary>
            /// Enum SquareFeet for value: squareFeet
            /// </summary>
            [EnumMember(Value = "squareFeet")]
            SquareFeet = 4,

            /// <summary>
            /// Enum SquareYards for value: squareYards
            /// </summary>
            [EnumMember(Value = "squareYards")]
            SquareYards = 5,

            /// <summary>
            /// Enum Squares for value: squares
            /// </summary>
            [EnumMember(Value = "squares")]
            Squares = 6

        }

        /// <summary>
        /// Unit of measure, defaults to SquareMetres if not provided.
        /// </summary>
        /// <value>Unit of measure, defaults to SquareMetres if not provided.</value>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public UnitEnum? Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2Area" /> class.
        /// </summary>
        /// <param name="value">Area. Will be rounded to 2 decimals..</param>
        /// <param name="from">Minimum area.</param>
        /// <param name="to">Maximum area.</param>
        /// <param name="unit">Unit of measure, defaults to SquareMetres if not provided..</param>
        public ListingAdminV2Area(double value = default(double), double from = default(double), double to = default(double), UnitEnum? unit = default(UnitEnum?))
        {
            this.Value = value;
            this.From = from;
            this.To = to;
            this.Unit = unit;
        }

        /// <summary>
        /// Area. Will be rounded to 2 decimals.
        /// </summary>
        /// <value>Area. Will be rounded to 2 decimals.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Minimum area
        /// </summary>
        /// <value>Minimum area</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public double From { get; set; }

        /// <summary>
        /// Maximum area
        /// </summary>
        /// <value>Maximum area</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public double To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2Area {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2Area);
        }

        /// <summary>
        /// Returns true if ListingAdminV2Area instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2Area to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2Area input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.From == input.From ||
                    this.From.Equals(input.From)
                ) && 
                (
                    this.To == input.To ||
                    this.To.Equals(input.To)
                ) && 
                (
                    this.Unit == input.Unit ||
                    this.Unit.Equals(input.Unit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.From.GetHashCode();
                hashCode = hashCode * 59 + this.To.GetHashCode();
                hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (double) maximum
            if(this.Value > (double)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value less than or equal to 2147483647.", new [] { "Value" });
            }

            // Value (double) minimum
            if(this.Value < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.", new [] { "Value" });
            }

            // From (double) maximum
            if(this.From > (double)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must be a value less than or equal to 2147483647.", new [] { "From" });
            }

            // From (double) minimum
            if(this.From < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must be a value greater than or equal to 0.", new [] { "From" });
            }

            // To (double) maximum
            if(this.To > (double)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must be a value less than or equal to 2147483647.", new [] { "To" });
            }

            // To (double) minimum
            if(this.To < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must be a value greater than or equal to 0.", new [] { "To" });
            }

            yield break;
        }
    }

}
