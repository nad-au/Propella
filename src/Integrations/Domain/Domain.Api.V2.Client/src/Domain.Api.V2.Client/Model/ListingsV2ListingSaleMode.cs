/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Client.Model
{
    /// <summary>
    /// Listing sale mode  * &#x60;Buy&#x60; - buy * &#x60;Rent&#x60; - rent * &#x60;Share&#x60; - share * &#x60;Sold&#x60; - sold * &#x60;Leased&#x60; - leased * &#x60;Archived&#x60; - Archived: When listing has been archived but not sold or leased (table_sticker&#x3D;0)
    /// </summary>
    /// <value>Listing sale mode  * &#x60;Buy&#x60; - buy * &#x60;Rent&#x60; - rent * &#x60;Share&#x60; - share * &#x60;Sold&#x60; - sold * &#x60;Leased&#x60; - leased * &#x60;Archived&#x60; - Archived: When listing has been archived but not sold or leased (table_sticker&#x3D;0)</value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum ListingsV2ListingSaleMode
    {
        /// <summary>
        /// Enum Buy for value: buy
        /// </summary>
        [EnumMember(Value = "buy")]
        Buy = 1,

        /// <summary>
        /// Enum Rent for value: rent
        /// </summary>
        [EnumMember(Value = "rent")]
        Rent = 2,

        /// <summary>
        /// Enum Share for value: share
        /// </summary>
        [EnumMember(Value = "share")]
        Share = 3,

        /// <summary>
        /// Enum Sold for value: sold
        /// </summary>
        [EnumMember(Value = "sold")]
        Sold = 4,

        /// <summary>
        /// Enum Leased for value: leased
        /// </summary>
        [EnumMember(Value = "leased")]
        Leased = 5,

        /// <summary>
        /// Enum Archived for value: archived
        /// </summary>
        [EnumMember(Value = "archived")]
        Archived = 6

    }

}
