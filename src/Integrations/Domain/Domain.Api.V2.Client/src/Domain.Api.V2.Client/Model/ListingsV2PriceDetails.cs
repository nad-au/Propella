/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Client.Model
{
    /// <summary>
    /// Encapsulates a listing&#39;s price information
    /// </summary>
    [DataContract(Name = "Listings.V2.PriceDetails")]
    public partial class ListingsV2PriceDetails : IEquatable<ListingsV2PriceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsV2PriceDetails" /> class.
        /// </summary>
        /// <param name="price">Price of the property.</param>
        /// <param name="priceFrom">Price starting range of the property.</param>
        /// <param name="priceTo">Upper price range of the property.</param>
        /// <param name="pricePrefix">Display price for the advertisement.</param>
        /// <param name="canDisplayPrice">Flag indicating whether the advertiser has chosen to display the property price.</param>
        /// <param name="displayPrice">A string provided by the Advertiser representing the ByIdListingPriceQueryResult of the Listing e.g. Over $1,000,000   This should be the default price field for client to use.</param>
        /// <param name="bond">Rental bond.</param>
        public ListingsV2PriceDetails(double? price = default(double?), int? priceFrom = default(int?), int? priceTo = default(int?), string pricePrefix = default(string), bool canDisplayPrice = default(bool), string displayPrice = default(string), double? bond = default(double?))
        {
            this.Price = price;
            this.PriceFrom = priceFrom;
            this.PriceTo = priceTo;
            this.PricePrefix = pricePrefix;
            this.CanDisplayPrice = canDisplayPrice;
            this.DisplayPrice = displayPrice;
            this.Bond = bond;
        }

        /// <summary>
        /// Price of the property
        /// </summary>
        /// <value>Price of the property</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public double? Price { get; set; }

        /// <summary>
        /// Price starting range of the property
        /// </summary>
        /// <value>Price starting range of the property</value>
        [DataMember(Name = "priceFrom", EmitDefaultValue = true)]
        public int? PriceFrom { get; set; }

        /// <summary>
        /// Upper price range of the property
        /// </summary>
        /// <value>Upper price range of the property</value>
        [DataMember(Name = "priceTo", EmitDefaultValue = true)]
        public int? PriceTo { get; set; }

        /// <summary>
        /// Display price for the advertisement
        /// </summary>
        /// <value>Display price for the advertisement</value>
        [DataMember(Name = "pricePrefix", EmitDefaultValue = true)]
        public string PricePrefix { get; set; }

        /// <summary>
        /// Flag indicating whether the advertiser has chosen to display the property price
        /// </summary>
        /// <value>Flag indicating whether the advertiser has chosen to display the property price</value>
        [DataMember(Name = "canDisplayPrice", EmitDefaultValue = false)]
        public bool CanDisplayPrice { get; set; }

        /// <summary>
        /// A string provided by the Advertiser representing the ByIdListingPriceQueryResult of the Listing e.g. Over $1,000,000   This should be the default price field for client to use
        /// </summary>
        /// <value>A string provided by the Advertiser representing the ByIdListingPriceQueryResult of the Listing e.g. Over $1,000,000   This should be the default price field for client to use</value>
        [DataMember(Name = "displayPrice", EmitDefaultValue = true)]
        public string DisplayPrice { get; set; }

        /// <summary>
        /// Rental bond
        /// </summary>
        /// <value>Rental bond</value>
        [DataMember(Name = "bond", EmitDefaultValue = true)]
        public double? Bond { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsV2PriceDetails {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceFrom: ").Append(PriceFrom).Append("\n");
            sb.Append("  PriceTo: ").Append(PriceTo).Append("\n");
            sb.Append("  PricePrefix: ").Append(PricePrefix).Append("\n");
            sb.Append("  CanDisplayPrice: ").Append(CanDisplayPrice).Append("\n");
            sb.Append("  DisplayPrice: ").Append(DisplayPrice).Append("\n");
            sb.Append("  Bond: ").Append(Bond).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingsV2PriceDetails);
        }

        /// <summary>
        /// Returns true if ListingsV2PriceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsV2PriceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsV2PriceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.PriceFrom == input.PriceFrom ||
                    (this.PriceFrom != null &&
                    this.PriceFrom.Equals(input.PriceFrom))
                ) && 
                (
                    this.PriceTo == input.PriceTo ||
                    (this.PriceTo != null &&
                    this.PriceTo.Equals(input.PriceTo))
                ) && 
                (
                    this.PricePrefix == input.PricePrefix ||
                    (this.PricePrefix != null &&
                    this.PricePrefix.Equals(input.PricePrefix))
                ) && 
                (
                    this.CanDisplayPrice == input.CanDisplayPrice ||
                    this.CanDisplayPrice.Equals(input.CanDisplayPrice)
                ) && 
                (
                    this.DisplayPrice == input.DisplayPrice ||
                    (this.DisplayPrice != null &&
                    this.DisplayPrice.Equals(input.DisplayPrice))
                ) && 
                (
                    this.Bond == input.Bond ||
                    (this.Bond != null &&
                    this.Bond.Equals(input.Bond))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.PriceFrom != null)
                    hashCode = hashCode * 59 + this.PriceFrom.GetHashCode();
                if (this.PriceTo != null)
                    hashCode = hashCode * 59 + this.PriceTo.GetHashCode();
                if (this.PricePrefix != null)
                    hashCode = hashCode * 59 + this.PricePrefix.GetHashCode();
                hashCode = hashCode * 59 + this.CanDisplayPrice.GetHashCode();
                if (this.DisplayPrice != null)
                    hashCode = hashCode * 59 + this.DisplayPrice.GetHashCode();
                if (this.Bond != null)
                    hashCode = hashCode * 59 + this.Bond.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
