/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Client.Model
{
    /// <summary>
    /// Pre-portal listing response.
    /// </summary>
    [DataContract(Name = "PreMarket.v1.ListingResponse")]
    public partial class PreMarketV1ListingResponse : IEquatable<PreMarketV1ListingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1ListingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreMarketV1ListingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1ListingResponse" /> class.
        /// </summary>
        /// <param name="id">Pre-portal listing ID. (required).</param>
        /// <param name="listingStatus">listingStatus (required).</param>
        /// <param name="providerDetails">providerDetails.</param>
        /// <param name="address">address.</param>
        /// <param name="advertiserIdentifiers">advertiserIdentifiers.</param>
        /// <param name="bedrooms">Total number of bedrooms in the property (required).</param>
        /// <param name="bathrooms">Total number of bathrooms in the property (required).</param>
        /// <param name="carspaces">Total number of car spaces in the property. (required).</param>
        /// <param name="headline">The short description of the property provided by the advertiser.</param>
        /// <param name="description">The long description of the property provided by the advertiser.</param>
        /// <param name="authorityExecutedDate">The date on which the authority contract was executed.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z. (required).</param>
        /// <param name="estimatedSalePrice">estimatedSalePrice (required).</param>
        /// <param name="propertyTypes">The property types (e.g. house, apartment/unit/flat, etc.)..</param>
        /// <param name="authorityType">authorityType (required).</param>
        /// <param name="exclusivePeriodDays">The time (in days) that the agent has exclusive authority to sell the property..</param>
        /// <param name="exclusiveContinuingPeriodDays">The time (in days) that exclusive authority has been extended..</param>
        /// <param name="exclusivePeriodStartDate">Start date of the exclusivity period.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z..</param>
        /// <param name="geoLocation">geoLocation.</param>
        /// <param name="mapCertainty">Map certainty of the property location..</param>
        /// <param name="media">The media associated with the property provided by the advertiser.</param>
        /// <param name="propertyId">The identifier which uniquely identifies the property being advertised.   This may be empty if the Address of property is poorly described.</param>
        /// <param name="statementOfInformation">statementOfInformation.</param>
        /// <param name="dateCreated">The date/time the listing was created  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z..</param>
        /// <param name="dateUpdated">The date/time the listing was last updated  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z..</param>
        /// <param name="dateWithdrawn">The date property was withdrawn.</param>
        /// <param name="dateListed">The date property was listed.</param>
        /// <param name="dateSold">The date property was sold.</param>
        /// <param name="metadata">Optional listing metadata..</param>
        public PreMarketV1ListingResponse(string id = default(string), PreMarketV1ListingStatus listingStatus = default(PreMarketV1ListingStatus), PreMarketV1ProviderDetails providerDetails = default(PreMarketV1ProviderDetails), PreMarketV1Address address = default(PreMarketV1Address), PreMarketV1AdvertiserIdentifiers advertiserIdentifiers = default(PreMarketV1AdvertiserIdentifiers), float bedrooms = default(float), float bathrooms = default(float), float carspaces = default(float), string headline = default(string), string description = default(string), DateTime authorityExecutedDate = default(DateTime), PreMarketV1Price estimatedSalePrice = default(PreMarketV1Price), List<PreMarketV1PropertyType> propertyTypes = default(List<PreMarketV1PropertyType>), PreMarketV1AuthorityType authorityType = default(PreMarketV1AuthorityType), int? exclusivePeriodDays = default(int?), int? exclusiveContinuingPeriodDays = default(int?), DateTime? exclusivePeriodStartDate = default(DateTime?), PreMarketV1GeoLocation geoLocation = default(PreMarketV1GeoLocation), int mapCertainty = default(int), List<PreMarketV1PropertyMedia> media = default(List<PreMarketV1PropertyMedia>), string propertyId = default(string), PreMarketV1StatementOfInformation statementOfInformation = default(PreMarketV1StatementOfInformation), DateTime dateCreated = default(DateTime), DateTime dateUpdated = default(DateTime), DateTime? dateWithdrawn = default(DateTime?), DateTime? dateListed = default(DateTime?), DateTime? dateSold = default(DateTime?), Dictionary<string, string> metadata = default(Dictionary<string, string>))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for PreMarketV1ListingResponse and cannot be null");
            // to ensure "listingStatus" is required (not null)
            this.ListingStatus = listingStatus;
            this.Bedrooms = bedrooms;
            this.Bathrooms = bathrooms;
            this.Carspaces = carspaces;
            this.AuthorityExecutedDate = authorityExecutedDate;
            // to ensure "estimatedSalePrice" is required (not null)
            this.EstimatedSalePrice = estimatedSalePrice ?? throw new ArgumentNullException("estimatedSalePrice is a required property for PreMarketV1ListingResponse and cannot be null");
            // to ensure "authorityType" is required (not null)
            this.AuthorityType = authorityType;
            this.ProviderDetails = providerDetails;
            this.Address = address;
            this.AdvertiserIdentifiers = advertiserIdentifiers;
            this.Headline = headline;
            this.Description = description;
            this.PropertyTypes = propertyTypes;
            this.ExclusivePeriodDays = exclusivePeriodDays;
            this.ExclusiveContinuingPeriodDays = exclusiveContinuingPeriodDays;
            this.ExclusivePeriodStartDate = exclusivePeriodStartDate;
            this.GeoLocation = geoLocation;
            this.MapCertainty = mapCertainty;
            this.Media = media;
            this.PropertyId = propertyId;
            this.StatementOfInformation = statementOfInformation;
            this.DateCreated = dateCreated;
            this.DateUpdated = dateUpdated;
            this.DateWithdrawn = dateWithdrawn;
            this.DateListed = dateListed;
            this.DateSold = dateSold;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Pre-portal listing ID.
        /// </summary>
        /// <value>Pre-portal listing ID.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ListingStatus
        /// </summary>
        [DataMember(Name = "listingStatus", IsRequired = true, EmitDefaultValue = false)]
        public PreMarketV1ListingStatus ListingStatus { get; set; }

        /// <summary>
        /// Gets or Sets ProviderDetails
        /// </summary>
        [DataMember(Name = "providerDetails", EmitDefaultValue = false)]
        public PreMarketV1ProviderDetails ProviderDetails { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public PreMarketV1Address Address { get; set; }

        /// <summary>
        /// Gets or Sets AdvertiserIdentifiers
        /// </summary>
        [DataMember(Name = "advertiserIdentifiers", EmitDefaultValue = false)]
        public PreMarketV1AdvertiserIdentifiers AdvertiserIdentifiers { get; set; }

        /// <summary>
        /// Total number of bedrooms in the property
        /// </summary>
        /// <value>Total number of bedrooms in the property</value>
        [DataMember(Name = "bedrooms", IsRequired = true, EmitDefaultValue = false)]
        public float Bedrooms { get; set; }

        /// <summary>
        /// Total number of bathrooms in the property
        /// </summary>
        /// <value>Total number of bathrooms in the property</value>
        [DataMember(Name = "bathrooms", IsRequired = true, EmitDefaultValue = false)]
        public float Bathrooms { get; set; }

        /// <summary>
        /// Total number of car spaces in the property.
        /// </summary>
        /// <value>Total number of car spaces in the property.</value>
        [DataMember(Name = "carspaces", IsRequired = true, EmitDefaultValue = false)]
        public float Carspaces { get; set; }

        /// <summary>
        /// The short description of the property provided by the advertiser
        /// </summary>
        /// <value>The short description of the property provided by the advertiser</value>
        [DataMember(Name = "headline", EmitDefaultValue = true)]
        public string Headline { get; set; }

        /// <summary>
        /// The long description of the property provided by the advertiser
        /// </summary>
        /// <value>The long description of the property provided by the advertiser</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The date on which the authority contract was executed.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
        /// </summary>
        /// <value>The date on which the authority contract was executed.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.</value>
        [DataMember(Name = "authorityExecutedDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime AuthorityExecutedDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedSalePrice
        /// </summary>
        [DataMember(Name = "estimatedSalePrice", IsRequired = true, EmitDefaultValue = false)]
        public PreMarketV1Price EstimatedSalePrice { get; set; }

        /// <summary>
        /// The property types (e.g. house, apartment/unit/flat, etc.).
        /// </summary>
        /// <value>The property types (e.g. house, apartment/unit/flat, etc.).</value>
        [DataMember(Name = "propertyTypes", EmitDefaultValue = true)]
        public List<PreMarketV1PropertyType> PropertyTypes { get; set; }

        /// <summary>
        /// Gets or Sets AuthorityType
        /// </summary>
        [DataMember(Name = "authorityType", IsRequired = true, EmitDefaultValue = false)]
        public PreMarketV1AuthorityType AuthorityType { get; set; }

        /// <summary>
        /// The time (in days) that the agent has exclusive authority to sell the property.
        /// </summary>
        /// <value>The time (in days) that the agent has exclusive authority to sell the property.</value>
        [DataMember(Name = "exclusivePeriodDays", EmitDefaultValue = true)]
        public int? ExclusivePeriodDays { get; set; }

        /// <summary>
        /// The time (in days) that exclusive authority has been extended.
        /// </summary>
        /// <value>The time (in days) that exclusive authority has been extended.</value>
        [DataMember(Name = "exclusiveContinuingPeriodDays", EmitDefaultValue = true)]
        public int? ExclusiveContinuingPeriodDays { get; set; }

        /// <summary>
        /// Start date of the exclusivity period.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
        /// </summary>
        /// <value>Start date of the exclusivity period.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.</value>
        [DataMember(Name = "exclusivePeriodStartDate", EmitDefaultValue = true)]
        public DateTime? ExclusivePeriodStartDate { get; set; }

        /// <summary>
        /// Gets or Sets GeoLocation
        /// </summary>
        [DataMember(Name = "geoLocation", EmitDefaultValue = false)]
        public PreMarketV1GeoLocation GeoLocation { get; set; }

        /// <summary>
        /// Map certainty of the property location.
        /// </summary>
        /// <value>Map certainty of the property location.</value>
        [DataMember(Name = "mapCertainty", EmitDefaultValue = false)]
        public int MapCertainty { get; set; }

        /// <summary>
        /// The media associated with the property provided by the advertiser
        /// </summary>
        /// <value>The media associated with the property provided by the advertiser</value>
        [DataMember(Name = "media", EmitDefaultValue = true)]
        public List<PreMarketV1PropertyMedia> Media { get; set; }

        /// <summary>
        /// The identifier which uniquely identifies the property being advertised.   This may be empty if the Address of property is poorly described
        /// </summary>
        /// <value>The identifier which uniquely identifies the property being advertised.   This may be empty if the Address of property is poorly described</value>
        [DataMember(Name = "propertyId", EmitDefaultValue = true)]
        public string PropertyId { get; set; }

        /// <summary>
        /// Gets or Sets StatementOfInformation
        /// </summary>
        [DataMember(Name = "statementOfInformation", EmitDefaultValue = false)]
        public PreMarketV1StatementOfInformation StatementOfInformation { get; set; }

        /// <summary>
        /// The date/time the listing was created  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
        /// </summary>
        /// <value>The date/time the listing was created  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.</value>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// The date/time the listing was last updated  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
        /// </summary>
        /// <value>The date/time the listing was last updated  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.</value>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public DateTime DateUpdated { get; set; }

        /// <summary>
        /// The date property was withdrawn
        /// </summary>
        /// <value>The date property was withdrawn</value>
        [DataMember(Name = "dateWithdrawn", EmitDefaultValue = true)]
        public DateTime? DateWithdrawn { get; set; }

        /// <summary>
        /// The date property was listed
        /// </summary>
        /// <value>The date property was listed</value>
        [DataMember(Name = "dateListed", EmitDefaultValue = true)]
        public DateTime? DateListed { get; set; }

        /// <summary>
        /// The date property was sold
        /// </summary>
        /// <value>The date property was sold</value>
        [DataMember(Name = "dateSold", EmitDefaultValue = true)]
        public DateTime? DateSold { get; set; }

        /// <summary>
        /// Optional listing metadata.
        /// </summary>
        /// <value>Optional listing metadata.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreMarketV1ListingResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ListingStatus: ").Append(ListingStatus).Append("\n");
            sb.Append("  ProviderDetails: ").Append(ProviderDetails).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AdvertiserIdentifiers: ").Append(AdvertiserIdentifiers).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  Bathrooms: ").Append(Bathrooms).Append("\n");
            sb.Append("  Carspaces: ").Append(Carspaces).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AuthorityExecutedDate: ").Append(AuthorityExecutedDate).Append("\n");
            sb.Append("  EstimatedSalePrice: ").Append(EstimatedSalePrice).Append("\n");
            sb.Append("  PropertyTypes: ").Append(PropertyTypes).Append("\n");
            sb.Append("  AuthorityType: ").Append(AuthorityType).Append("\n");
            sb.Append("  ExclusivePeriodDays: ").Append(ExclusivePeriodDays).Append("\n");
            sb.Append("  ExclusiveContinuingPeriodDays: ").Append(ExclusiveContinuingPeriodDays).Append("\n");
            sb.Append("  ExclusivePeriodStartDate: ").Append(ExclusivePeriodStartDate).Append("\n");
            sb.Append("  GeoLocation: ").Append(GeoLocation).Append("\n");
            sb.Append("  MapCertainty: ").Append(MapCertainty).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  StatementOfInformation: ").Append(StatementOfInformation).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  DateWithdrawn: ").Append(DateWithdrawn).Append("\n");
            sb.Append("  DateListed: ").Append(DateListed).Append("\n");
            sb.Append("  DateSold: ").Append(DateSold).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreMarketV1ListingResponse);
        }

        /// <summary>
        /// Returns true if PreMarketV1ListingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PreMarketV1ListingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreMarketV1ListingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ListingStatus == input.ListingStatus ||
                    (this.ListingStatus != null &&
                    this.ListingStatus.Equals(input.ListingStatus))
                ) && 
                (
                    this.ProviderDetails == input.ProviderDetails ||
                    (this.ProviderDetails != null &&
                    this.ProviderDetails.Equals(input.ProviderDetails))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AdvertiserIdentifiers == input.AdvertiserIdentifiers ||
                    (this.AdvertiserIdentifiers != null &&
                    this.AdvertiserIdentifiers.Equals(input.AdvertiserIdentifiers))
                ) && 
                (
                    this.Bedrooms == input.Bedrooms ||
                    this.Bedrooms.Equals(input.Bedrooms)
                ) && 
                (
                    this.Bathrooms == input.Bathrooms ||
                    this.Bathrooms.Equals(input.Bathrooms)
                ) && 
                (
                    this.Carspaces == input.Carspaces ||
                    this.Carspaces.Equals(input.Carspaces)
                ) && 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AuthorityExecutedDate == input.AuthorityExecutedDate ||
                    (this.AuthorityExecutedDate != null &&
                    this.AuthorityExecutedDate.Equals(input.AuthorityExecutedDate))
                ) && 
                (
                    this.EstimatedSalePrice == input.EstimatedSalePrice ||
                    (this.EstimatedSalePrice != null &&
                    this.EstimatedSalePrice.Equals(input.EstimatedSalePrice))
                ) && 
                (
                    this.PropertyTypes == input.PropertyTypes ||
                    this.PropertyTypes != null &&
                    input.PropertyTypes != null &&
                    this.PropertyTypes.SequenceEqual(input.PropertyTypes)
                ) && 
                (
                    this.AuthorityType == input.AuthorityType ||
                    (this.AuthorityType != null &&
                    this.AuthorityType.Equals(input.AuthorityType))
                ) && 
                (
                    this.ExclusivePeriodDays == input.ExclusivePeriodDays ||
                    (this.ExclusivePeriodDays != null &&
                    this.ExclusivePeriodDays.Equals(input.ExclusivePeriodDays))
                ) && 
                (
                    this.ExclusiveContinuingPeriodDays == input.ExclusiveContinuingPeriodDays ||
                    (this.ExclusiveContinuingPeriodDays != null &&
                    this.ExclusiveContinuingPeriodDays.Equals(input.ExclusiveContinuingPeriodDays))
                ) && 
                (
                    this.ExclusivePeriodStartDate == input.ExclusivePeriodStartDate ||
                    (this.ExclusivePeriodStartDate != null &&
                    this.ExclusivePeriodStartDate.Equals(input.ExclusivePeriodStartDate))
                ) && 
                (
                    this.GeoLocation == input.GeoLocation ||
                    (this.GeoLocation != null &&
                    this.GeoLocation.Equals(input.GeoLocation))
                ) && 
                (
                    this.MapCertainty == input.MapCertainty ||
                    this.MapCertainty.Equals(input.MapCertainty)
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.PropertyId == input.PropertyId ||
                    (this.PropertyId != null &&
                    this.PropertyId.Equals(input.PropertyId))
                ) && 
                (
                    this.StatementOfInformation == input.StatementOfInformation ||
                    (this.StatementOfInformation != null &&
                    this.StatementOfInformation.Equals(input.StatementOfInformation))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.DateWithdrawn == input.DateWithdrawn ||
                    (this.DateWithdrawn != null &&
                    this.DateWithdrawn.Equals(input.DateWithdrawn))
                ) && 
                (
                    this.DateListed == input.DateListed ||
                    (this.DateListed != null &&
                    this.DateListed.Equals(input.DateListed))
                ) && 
                (
                    this.DateSold == input.DateSold ||
                    (this.DateSold != null &&
                    this.DateSold.Equals(input.DateSold))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ListingStatus != null)
                    hashCode = hashCode * 59 + this.ListingStatus.GetHashCode();
                if (this.ProviderDetails != null)
                    hashCode = hashCode * 59 + this.ProviderDetails.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AdvertiserIdentifiers != null)
                    hashCode = hashCode * 59 + this.AdvertiserIdentifiers.GetHashCode();
                hashCode = hashCode * 59 + this.Bedrooms.GetHashCode();
                hashCode = hashCode * 59 + this.Bathrooms.GetHashCode();
                hashCode = hashCode * 59 + this.Carspaces.GetHashCode();
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.AuthorityExecutedDate != null)
                    hashCode = hashCode * 59 + this.AuthorityExecutedDate.GetHashCode();
                if (this.EstimatedSalePrice != null)
                    hashCode = hashCode * 59 + this.EstimatedSalePrice.GetHashCode();
                if (this.PropertyTypes != null)
                    hashCode = hashCode * 59 + this.PropertyTypes.GetHashCode();
                if (this.AuthorityType != null)
                    hashCode = hashCode * 59 + this.AuthorityType.GetHashCode();
                if (this.ExclusivePeriodDays != null)
                    hashCode = hashCode * 59 + this.ExclusivePeriodDays.GetHashCode();
                if (this.ExclusiveContinuingPeriodDays != null)
                    hashCode = hashCode * 59 + this.ExclusiveContinuingPeriodDays.GetHashCode();
                if (this.ExclusivePeriodStartDate != null)
                    hashCode = hashCode * 59 + this.ExclusivePeriodStartDate.GetHashCode();
                if (this.GeoLocation != null)
                    hashCode = hashCode * 59 + this.GeoLocation.GetHashCode();
                hashCode = hashCode * 59 + this.MapCertainty.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.PropertyId != null)
                    hashCode = hashCode * 59 + this.PropertyId.GetHashCode();
                if (this.StatementOfInformation != null)
                    hashCode = hashCode * 59 + this.StatementOfInformation.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateUpdated != null)
                    hashCode = hashCode * 59 + this.DateUpdated.GetHashCode();
                if (this.DateWithdrawn != null)
                    hashCode = hashCode * 59 + this.DateWithdrawn.GetHashCode();
                if (this.DateListed != null)
                    hashCode = hashCode * 59 + this.DateListed.GetHashCode();
                if (this.DateSold != null)
                    hashCode = hashCode * 59 + this.DateSold.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
