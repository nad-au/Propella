/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Client.Model
{
    /// <summary>
    /// PreMarketV1StatementOfInformation
    /// </summary>
    [DataContract(Name = "PreMarket.v1.StatementOfInformation")]
    public partial class PreMarketV1StatementOfInformation : IEquatable<PreMarketV1StatementOfInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1StatementOfInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreMarketV1StatementOfInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1StatementOfInformation" /> class.
        /// </summary>
        /// <param name="documentationUrl">Link to the statement of information documentation file.  Must be a PDF file.  File should be less than 10 MB in size  The Statement of Information must be updated if there is a change in the indicative selling price. (required).</param>
        public PreMarketV1StatementOfInformation(string documentationUrl = default(string))
        {
            // to ensure "documentationUrl" is required (not null)
            this.DocumentationUrl = documentationUrl ?? throw new ArgumentNullException("documentationUrl is a required property for PreMarketV1StatementOfInformation and cannot be null");
        }

        /// <summary>
        /// Link to the statement of information documentation file.  Must be a PDF file.  File should be less than 10 MB in size  The Statement of Information must be updated if there is a change in the indicative selling price.
        /// </summary>
        /// <value>Link to the statement of information documentation file.  Must be a PDF file.  File should be less than 10 MB in size  The Statement of Information must be updated if there is a change in the indicative selling price.</value>
        [DataMember(Name = "documentationUrl", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentationUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreMarketV1StatementOfInformation {\n");
            sb.Append("  DocumentationUrl: ").Append(DocumentationUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreMarketV1StatementOfInformation);
        }

        /// <summary>
        /// Returns true if PreMarketV1StatementOfInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of PreMarketV1StatementOfInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreMarketV1StatementOfInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentationUrl == input.DocumentationUrl ||
                    (this.DocumentationUrl != null &&
                    this.DocumentationUrl.Equals(input.DocumentationUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentationUrl != null)
                    hashCode = hashCode * 59 + this.DocumentationUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DocumentationUrl (string) pattern
            Regex regexDocumentationUrl = new Regex(@"^http[s]?:+.*", RegexOptions.CultureInvariant);
            if (false == regexDocumentationUrl.Match(this.DocumentationUrl).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentationUrl, must match a pattern of " + regexDocumentationUrl, new [] { "DocumentationUrl" });
            }

            yield break;
        }
    }

}
