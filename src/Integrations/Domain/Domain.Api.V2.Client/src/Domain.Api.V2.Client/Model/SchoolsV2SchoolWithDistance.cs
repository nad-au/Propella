/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Client.Model
{
    /// <summary>
    /// SchoolsV2SchoolWithDistance
    /// </summary>
    [DataContract(Name = "Schools.V2.SchoolWithDistance")]
    public partial class SchoolsV2SchoolWithDistance : IEquatable<SchoolsV2SchoolWithDistance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsV2SchoolWithDistance" /> class.
        /// </summary>
        /// <param name="school">school.</param>
        public SchoolsV2SchoolWithDistance(SchoolsV2School school = default(SchoolsV2School))
        {
            this.School = school;
        }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", EmitDefaultValue = true)]
        public double? Distance { get; private set; }

        /// <summary>
        /// Returns false as Distance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDistance()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name = "school", EmitDefaultValue = false)]
        public SchoolsV2School School { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchoolsV2SchoolWithDistance {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchoolsV2SchoolWithDistance);
        }

        /// <summary>
        /// Returns true if SchoolsV2SchoolWithDistance instances are equal
        /// </summary>
        /// <param name="input">Instance of SchoolsV2SchoolWithDistance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolsV2SchoolWithDistance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.School == input.School ||
                    (this.School != null &&
                    this.School.Equals(input.School))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.School != null)
                    hashCode = hashCode * 59 + this.School.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
