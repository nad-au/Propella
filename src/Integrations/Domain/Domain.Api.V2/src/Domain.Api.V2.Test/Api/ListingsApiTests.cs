/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Domain.Api.V2.Client;
using Domain.Api.V2.Api;
// uncomment below to import models
//using Domain.Api.V2.Model;

namespace Domain.Api.V2.Test.Api
{
    /// <summary>
    ///  Class for testing ListingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ListingsApiTests : IDisposable
    {
        private ListingsApi instance;

        public ListingsApiTests()
        {
            instance = new ListingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ListingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ListingsApi
            //Assert.IsType<ListingsApi>(instance);
        }

        /// <summary>
        /// Test ListingsBypropertyid
        /// </summary>
        [Fact]
        public void ListingsBypropertyidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string propertyId = null;
            //DateTime? updatedSince = null;
            //DateTime? listedSince = null;
            //ListingsV2SaleMode? saleMode = null;
            //var response = instance.ListingsBypropertyid(propertyId, updatedSince, listedSince, saleMode);
            //Assert.IsType<List<ListingsV2Listing>>(response);
        }

        /// <summary>
        /// Test ListingsUpsertbusinessoffmarket
        /// </summary>
        [Fact]
        public void ListingsUpsertbusinessoffmarketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2BusinessOffMarketListing listingAdminV2BusinessOffMarketListing = null;
            //var response = instance.ListingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing);
            //Assert.IsType<ListingAdminV2ListingResponse>(response);
        }

        /// <summary>
        /// Test ListingsUpsertcommerciallisting
        /// </summary>
        [Fact]
        public void ListingsUpsertcommerciallistingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2CommercialListingV2 listingAdminV2CommercialListingV2 = null;
            //var response = instance.ListingsUpsertcommerciallisting(listingAdminV2CommercialListingV2);
            //Assert.IsType<ListingAdminV2ListingResponse>(response);
        }

        /// <summary>
        /// Test ListingsUpsertcommercialoffmarket
        /// </summary>
        [Fact]
        public void ListingsUpsertcommercialoffmarketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2CommercialOffMarketListing listingAdminV2CommercialOffMarketListing = null;
            //var response = instance.ListingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing);
            //Assert.IsType<ListingAdminV2ListingResponse>(response);
        }

        /// <summary>
        /// Test ListingsUpsertresidentialoffmarket
        /// </summary>
        [Fact]
        public void ListingsUpsertresidentialoffmarketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2ResidentialOffMarketListing listingAdminV2ResidentialOffMarketListing = null;
            //var response = instance.ListingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing);
            //Assert.IsType<ListingAdminV2ListingResponse>(response);
        }

        /// <summary>
        /// Test PreMarketGet
        /// </summary>
        [Fact]
        public void PreMarketGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.PreMarketGet(id);
            //Assert.IsType<PreMarketV1ListingResponse>(response);
        }

        /// <summary>
        /// Test PreMarketPatch
        /// </summary>
        [Fact]
        public void PreMarketPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PreMarketV1ListingRequestJsonPatchDocument preMarketV1ListingRequestJsonPatchDocument = null;
            //var response = instance.PreMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument);
            //Assert.IsType<PreMarketV1ListingRequest>(response);
        }

        /// <summary>
        /// Test PreMarketPost
        /// </summary>
        [Fact]
        public void PreMarketPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PreMarketV1ListingRequest preMarketV1ListingRequest = null;
            //var response = instance.PreMarketPost(preMarketV1ListingRequest);
            //Assert.IsType<PreMarketV1CreateOrUpdateListingResponse>(response);
        }
    }
}
