/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V2.Client;
using Domain.Api.V2.Model;

namespace Domain.Api.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsV1DemographicsResults</returns>
        DemographicsV1DemographicsResults DemographicsGetByNamedSuburb(string state, string suburb, string postcode, string types = default(string), int? year = default(int?));

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsV1DemographicsResults</returns>
        ApiResponse<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbWithHttpInfo(string state, string suburb, string postcode, string types = default(string), int? year = default(int?));
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsV1DemographicsResults</returns>
        DemographicsV1DemographicsResults DemographicsGetByNamedSuburbWithoutPostcode(string state, string suburb, string postcode, string types = default(string), int? year = default(int?));

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsV1DemographicsResults</returns>
        ApiResponse<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfo(string state, string suburb, string postcode, string types = default(string), int? year = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemographicsV1DemographicsResults</returns>
        System.Threading.Tasks.Task<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemographicsV1DemographicsResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemographicsV1DemographicsResults>> DemographicsGetByNamedSuburbWithHttpInfoAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemographicsV1DemographicsResults</returns>
        System.Threading.Tasks.Task<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbWithoutPostcodeAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemographicsV1DemographicsResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemographicsV1DemographicsResults>> DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfoAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsApi : IDemographicsApiSync, IDemographicsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DemographicsApi : IDemographicsApi
    {
        private Domain.Api.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DemographicsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DemographicsApi(String basePath)
        {
            this.Configuration = Domain.Api.V2.Client.Configuration.MergeConfigurations(
                Domain.Api.V2.Client.GlobalConfiguration.Instance,
                new Domain.Api.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DemographicsApi(Domain.Api.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V2.Client.Configuration.MergeConfigurations(
                Domain.Api.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DemographicsApi(Domain.Api.V2.Client.ISynchronousClient client, Domain.Api.V2.Client.IAsynchronousClient asyncClient, Domain.Api.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsV1DemographicsResults</returns>
        public DemographicsV1DemographicsResults DemographicsGetByNamedSuburb(string state, string suburb, string postcode, string types = default(string), int? year = default(int?))
        {
            Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults> localVarResponse = DemographicsGetByNamedSuburbWithHttpInfo(state, suburb, postcode, types, year);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsV1DemographicsResults</returns>
        public Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbWithHttpInfo(string state, string suburb, string postcode, string types = default(string), int? year = default(int?))
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburb");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburb");

            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburb");

            Domain.Api.V2.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("state", Domain.Api.V2.Client.ClientUtils.ParameterToString(state)); // path parameter
            localVarRequestOptions.PathParameters.Add("suburb", Domain.Api.V2.Client.ClientUtils.ParameterToString(suburb)); // path parameter
            localVarRequestOptions.PathParameters.Add("postcode", Domain.Api.V2.Client.ClientUtils.ParameterToString(postcode)); // path parameter
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "types", types));
            }
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DemographicsV1DemographicsResults>("/v2/demographics/{state}/{suburb}/{postcode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DemographicsGetByNamedSuburb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemographicsV1DemographicsResults</returns>
        public async System.Threading.Tasks.Task<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults> localVarResponse = await DemographicsGetByNamedSuburbWithHttpInfoAsync(state, suburb, postcode, types, year, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemographicsV1DemographicsResults)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults>> DemographicsGetByNamedSuburbWithHttpInfoAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburb");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburb");

            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburb");


            Domain.Api.V2.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("state", Domain.Api.V2.Client.ClientUtils.ParameterToString(state)); // path parameter
            localVarRequestOptions.PathParameters.Add("suburb", Domain.Api.V2.Client.ClientUtils.ParameterToString(suburb)); // path parameter
            localVarRequestOptions.PathParameters.Add("postcode", Domain.Api.V2.Client.ClientUtils.ParameterToString(postcode)); // path parameter
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "types", types));
            }
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DemographicsV1DemographicsResults>("/v2/demographics/{state}/{suburb}/{postcode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DemographicsGetByNamedSuburb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsV1DemographicsResults</returns>
        public DemographicsV1DemographicsResults DemographicsGetByNamedSuburbWithoutPostcode(string state, string suburb, string postcode, string types = default(string), int? year = default(int?))
        {
            Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults> localVarResponse = DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfo(state, suburb, postcode, types, year);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsV1DemographicsResults</returns>
        public Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfo(string state, string suburb, string postcode, string types = default(string), int? year = default(int?))
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");

            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");

            Domain.Api.V2.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("state", Domain.Api.V2.Client.ClientUtils.ParameterToString(state)); // path parameter
            localVarRequestOptions.PathParameters.Add("suburb", Domain.Api.V2.Client.ClientUtils.ParameterToString(suburb)); // path parameter
            localVarRequestOptions.PathParameters.Add("postcode", Domain.Api.V2.Client.ClientUtils.ParameterToString(postcode)); // path parameter
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "types", types));
            }
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DemographicsV1DemographicsResults>("/v2/demographics/{state}/{suburb}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DemographicsGetByNamedSuburbWithoutPostcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemographicsV1DemographicsResults</returns>
        public async System.Threading.Tasks.Task<DemographicsV1DemographicsResults> DemographicsGetByNamedSuburbWithoutPostcodeAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults> localVarResponse = await DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfoAsync(state, suburb, postcode, types, year, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemographicsV1DemographicsResults)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.ApiResponse<DemographicsV1DemographicsResults>> DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfoAsync(string state, string suburb, string postcode, string types = default(string), int? year = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");

            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");


            Domain.Api.V2.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("state", Domain.Api.V2.Client.ClientUtils.ParameterToString(state)); // path parameter
            localVarRequestOptions.PathParameters.Add("suburb", Domain.Api.V2.Client.ClientUtils.ParameterToString(suburb)); // path parameter
            localVarRequestOptions.PathParameters.Add("postcode", Domain.Api.V2.Client.ClientUtils.ParameterToString(postcode)); // path parameter
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "types", types));
            }
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DemographicsV1DemographicsResults>("/v2/demographics/{state}/{suburb}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DemographicsGetByNamedSuburbWithoutPostcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
