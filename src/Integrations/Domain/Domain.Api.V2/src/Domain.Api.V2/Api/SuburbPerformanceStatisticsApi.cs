/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Domain.Api.V2.Client;
using Domain.Api.V2.Model;

namespace Domain.Api.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuburbPerformanceStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>SuburbPerformanceStatisticsV3SuburbPerformance</returns>
        SuburbPerformanceStatisticsV3SuburbPerformance SuburbPerformanceGetByNamedSuburb(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?));

        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>ApiResponse of SuburbPerformanceStatisticsV3SuburbPerformance</returns>
        ApiResponse<SuburbPerformanceStatisticsV3SuburbPerformance> SuburbPerformanceGetByNamedSuburbWithHttpInfo(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuburbPerformanceStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuburbPerformanceStatisticsV3SuburbPerformance</returns>
        System.Threading.Tasks.Task<SuburbPerformanceStatisticsV3SuburbPerformance> SuburbPerformanceGetByNamedSuburbAsync(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuburbPerformanceStatisticsV3SuburbPerformance)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuburbPerformanceStatisticsV3SuburbPerformance>> SuburbPerformanceGetByNamedSuburbWithHttpInfoAsync(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuburbPerformanceStatisticsApi : ISuburbPerformanceStatisticsApiSync, ISuburbPerformanceStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SuburbPerformanceStatisticsApi : ISuburbPerformanceStatisticsApi
    {
        private Domain.Api.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SuburbPerformanceStatisticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SuburbPerformanceStatisticsApi(String basePath)
        {
            this.Configuration = Domain.Api.V2.Client.Configuration.MergeConfigurations(
                Domain.Api.V2.Client.GlobalConfiguration.Instance,
                new Domain.Api.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Domain.Api.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SuburbPerformanceStatisticsApi(Domain.Api.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Domain.Api.V2.Client.Configuration.MergeConfigurations(
                Domain.Api.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Domain.Api.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Domain.Api.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SuburbPerformanceStatisticsApi(Domain.Api.V2.Client.ISynchronousClient client, Domain.Api.V2.Client.IAsynchronousClient asyncClient, Domain.Api.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Domain.Api.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Domain.Api.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Domain.Api.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Api.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Api.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>SuburbPerformanceStatisticsV3SuburbPerformance</returns>
        public SuburbPerformanceStatisticsV3SuburbPerformance SuburbPerformanceGetByNamedSuburb(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?))
        {
            Domain.Api.V2.Client.ApiResponse<SuburbPerformanceStatisticsV3SuburbPerformance> localVarResponse = SuburbPerformanceGetByNamedSuburbWithHttpInfo(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>ApiResponse of SuburbPerformanceStatisticsV3SuburbPerformance</returns>
        public Domain.Api.V2.Client.ApiResponse<SuburbPerformanceStatisticsV3SuburbPerformance> SuburbPerformanceGetByNamedSuburbWithHttpInfo(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?))
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'state' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'suburb' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");

            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'postcode' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");

            Domain.Api.V2.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Domain.Api.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("state", Domain.Api.V2.Client.ClientUtils.ParameterToString(state)); // path parameter
            localVarRequestOptions.PathParameters.Add("suburb", Domain.Api.V2.Client.ClientUtils.ParameterToString(suburb)); // path parameter
            localVarRequestOptions.PathParameters.Add("postcode", Domain.Api.V2.Client.ClientUtils.ParameterToString(postcode)); // path parameter
            if (propertyCategory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "propertyCategory", propertyCategory));
            }
            if (bedrooms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "bedrooms", bedrooms));
            }
            if (periodSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "periodSize", periodSize));
            }
            if (startingPeriodRelativeToCurrent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "startingPeriodRelativeToCurrent", startingPeriodRelativeToCurrent));
            }
            if (totalPeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "totalPeriods", totalPeriods));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuburbPerformanceStatisticsV3SuburbPerformance>("/v2/suburbPerformanceStatistics/{state}/{suburb}/{postcode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuburbPerformanceGetByNamedSuburb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuburbPerformanceStatisticsV3SuburbPerformance</returns>
        public async System.Threading.Tasks.Task<SuburbPerformanceStatisticsV3SuburbPerformance> SuburbPerformanceGetByNamedSuburbAsync(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Domain.Api.V2.Client.ApiResponse<SuburbPerformanceStatisticsV3SuburbPerformance> localVarResponse = await SuburbPerformanceGetByNamedSuburbWithHttpInfoAsync(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Api.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuburbPerformanceStatisticsV3SuburbPerformance)</returns>
        public async System.Threading.Tasks.Task<Domain.Api.V2.Client.ApiResponse<SuburbPerformanceStatisticsV3SuburbPerformance>> SuburbPerformanceGetByNamedSuburbWithHttpInfoAsync(string state, string suburb, string postcode, SuburbPerformanceStatisticsV3PropertyCategory? propertyCategory = default(SuburbPerformanceStatisticsV3PropertyCategory?), int? bedrooms = default(int?), SuburbPerformanceStatisticsV3PeriodSize? periodSize = default(SuburbPerformanceStatisticsV3PeriodSize?), int? startingPeriodRelativeToCurrent = default(int?), int? totalPeriods = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'state' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");

            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'suburb' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");

            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new Domain.Api.V2.Client.ApiException(400, "Missing required parameter 'postcode' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");


            Domain.Api.V2.Client.RequestOptions localVarRequestOptions = new Domain.Api.V2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Domain.Api.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Domain.Api.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("state", Domain.Api.V2.Client.ClientUtils.ParameterToString(state)); // path parameter
            localVarRequestOptions.PathParameters.Add("suburb", Domain.Api.V2.Client.ClientUtils.ParameterToString(suburb)); // path parameter
            localVarRequestOptions.PathParameters.Add("postcode", Domain.Api.V2.Client.ClientUtils.ParameterToString(postcode)); // path parameter
            if (propertyCategory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "propertyCategory", propertyCategory));
            }
            if (bedrooms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "bedrooms", bedrooms));
            }
            if (periodSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "periodSize", periodSize));
            }
            if (startingPeriodRelativeToCurrent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "startingPeriodRelativeToCurrent", startingPeriodRelativeToCurrent));
            }
            if (totalPeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Domain.Api.V2.Client.ClientUtils.ParameterToMultiMap("", "totalPeriods", totalPeriods));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SuburbPerformanceStatisticsV3SuburbPerformance>("/v2/suburbPerformanceStatistics/{state}/{suburb}/{postcode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuburbPerformanceGetByNamedSuburb", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
