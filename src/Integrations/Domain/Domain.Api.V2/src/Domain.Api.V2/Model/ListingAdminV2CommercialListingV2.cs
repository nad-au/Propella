/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Model
{
    /// <summary>
    /// Commercial Listing V2
    /// </summary>
    [DataContract(Name = "ListingAdmin.v2.CommercialListingV2")]
    public partial class ListingAdminV2CommercialListingV2 : IEquatable<ListingAdminV2CommercialListingV2>, IValidatableObject
    {
        /// <summary>
        /// Occupancy. Can be &#39;Tenanted&#39;, &#39;Vacant&#39;
        /// </summary>
        /// <value>Occupancy. Can be &#39;Tenanted&#39;, &#39;Vacant&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OccupancyTypeEnum
        {
            /// <summary>
            /// Enum Tenanted for value: tenanted
            /// </summary>
            [EnumMember(Value = "tenanted")]
            Tenanted = 1,

            /// <summary>
            /// Enum Vacant for value: vacant
            /// </summary>
            [EnumMember(Value = "vacant")]
            Vacant = 2

        }

        /// <summary>
        /// Occupancy. Can be &#39;Tenanted&#39;, &#39;Vacant&#39;
        /// </summary>
        /// <value>Occupancy. Can be &#39;Tenanted&#39;, &#39;Vacant&#39;</value>
        [DataMember(Name = "occupancyType", EmitDefaultValue = false)]
        public OccupancyTypeEnum? OccupancyType { get; set; }
        /// <summary>
        /// Sale or Rent
        /// </summary>
        /// <value>Sale or Rent</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListingActionEnum
        {
            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            [EnumMember(Value = "sale")]
            Sale = 1,

            /// <summary>
            /// Enum Rent for value: rent
            /// </summary>
            [EnumMember(Value = "rent")]
            Rent = 2,

            /// <summary>
            /// Enum SaleAndLease for value: saleAndLease
            /// </summary>
            [EnumMember(Value = "saleAndLease")]
            SaleAndLease = 3

        }

        /// <summary>
        /// Sale or Rent
        /// </summary>
        /// <value>Sale or Rent</value>
        [DataMember(Name = "listingAction", IsRequired = true, EmitDefaultValue = false)]
        public ListingActionEnum ListingAction { get; set; }
        /// <summary>
        /// Indicates the listing preferred contact method. Default by both phone and email if not provided.
        /// </summary>
        /// <value>Indicates the listing preferred contact method. Default by both phone and email if not provided.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContactPreferenceEnum
        {
            /// <summary>
            /// Enum ByPhone for value: byPhone
            /// </summary>
            [EnumMember(Value = "byPhone")]
            ByPhone = 1

        }

        /// <summary>
        /// Indicates the listing preferred contact method. Default by both phone and email if not provided.
        /// </summary>
        /// <value>Indicates the listing preferred contact method. Default by both phone and email if not provided.</value>
        [DataMember(Name = "contactPreference", EmitDefaultValue = false)]
        public ContactPreferenceEnum? ContactPreference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2CommercialListingV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListingAdminV2CommercialListingV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2CommercialListingV2" /> class.
        /// </summary>
        /// <param name="salePrice">salePrice.</param>
        /// <param name="leasePrice">leasePrice.</param>
        /// <param name="lease">lease.</param>
        /// <param name="eoi">eoi.</param>
        /// <param name="tenant">tenant.</param>
        /// <param name="tender">tender.</param>
        /// <param name="occupancyType">Occupancy. Can be &#39;Tenanted&#39;, &#39;Vacant&#39;.</param>
        /// <param name="annualReturn">Integer value of percentage return on this property or business..</param>
        /// <param name="unitsOffered">Integer value of units offered for sale or lease.</param>
        /// <param name="unitDetails">Units details.</param>
        /// <param name="nabers">The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au.</param>
        /// <param name="saleTerms">Information relating to aspects of the sale, such as required deposit, settlement time. Up to 50 characters, optional. Ignored for lease listings.</param>
        /// <param name="auction">auction.</param>
        /// <param name="propertyDetails">propertyDetails (required).</param>
        /// <param name="conjunctionAgents">List of conjunction agents.</param>
        /// <param name="highlights">Highlight Items.</param>
        /// <param name="underOfferOrContract">Set for Sale listings only.</param>
        /// <param name="domainAdId">Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers..</param>
        /// <param name="listingProvider">A string identifying the data provider.</param>
        /// <param name="domainAgencyID">The Domain Agency Id number (required).</param>
        /// <param name="providerAdId">External Advertisement Id of up to 50 characters will be stored.&lt;br /&gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&lt;br /&gt;  This value is case-insensitive (meaning AAAA will update aaaa). (required).</param>
        /// <param name="features"> Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels.</param>
        /// <param name="description">Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.</param>
        /// <param name="summary">&#39;Headline&#39; Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters..</param>
        /// <param name="inspectionDetails">inspectionDetails.</param>
        /// <param name="media">Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters..</param>
        /// <param name="listingAction">Sale or Rent (required).</param>
        /// <param name="contactPreference">Indicates the listing preferred contact method. Default by both phone and email if not provided..</param>
        /// <param name="contacts">Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found..</param>
        /// <param name="otherEnquiryEmail">Sets an additional Email Address to which enquiries on the Listing will be sent.</param>
        /// <param name="receiveEmailsToDefaultAddress">Send email enquiries to the default address for this listing type.</param>
        /// <param name="isRural">True if the property is rural.</param>
        /// <param name="supplementary">Rural attributes    *Improvements* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    &#x60;description&#x60; (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    &#x60;description&#x60; (string, optional): description of the homestead and construction, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;area&#x60; (decimal, optional): homestead area in square metres.    Available &#x60;types&#x60; (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    &#x60;description&#x60; (string, optional): water comments, maximum 250 characters.    Available &#x60;types&#x60; (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    &#x60;description&#x60; (string, optional): description of the crops, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;croppedAnnually&#x60; (decimal, optional): average annual area cropped in hectares.  * &#x60;fallowAnnually&#x60; (decimal, optional): average annual fallow area in hectares.  * &#x60;pastures&#x60; (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    &#x60;description&#x60; (string, optional): additional comments, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;capacity&#x60; (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    &#x60;description&#x60; (string, optional): description of plant and machinery included in sale, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;livestock&#x60; (string, optional): description of livestock included in sale, maximum 250 characters.  * &#x60;crop&#x60; (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    &#x60;description&#x60; (string, optional): irrigation comments, maximum 250 characters    &#x60;metadata&#x60; (optional)  * &#x60;rainfall&#x60; (decimal, optional): annual rainfall in millimetres..</param>
        public ListingAdminV2CommercialListingV2(ListingAdminV2CommercialPrice salePrice = default(ListingAdminV2CommercialPrice), ListingAdminV2CommercialPrice leasePrice = default(ListingAdminV2CommercialPrice), ListingAdminV2Lease lease = default(ListingAdminV2Lease), ListingAdminV2EOI eoi = default(ListingAdminV2EOI), ListingAdminV2Tenant tenant = default(ListingAdminV2Tenant), ListingAdminV2Tender tender = default(ListingAdminV2Tender), OccupancyTypeEnum? occupancyType = default(OccupancyTypeEnum?), int annualReturn = default(int), int unitsOffered = default(int), List<ListingAdminV2SpecificUnitDetail> unitDetails = default(List<ListingAdminV2SpecificUnitDetail>), double nabers = default(double), string saleTerms = default(string), ListingAdminV2CommercialAuction auction = default(ListingAdminV2CommercialAuction), ListingAdminV2CommercialProperty propertyDetails = default(ListingAdminV2CommercialProperty), List<ListingAdminV2AgentContact> conjunctionAgents = default(List<ListingAdminV2AgentContact>), List<string> highlights = default(List<string>), bool underOfferOrContract = default(bool), int domainAdId = default(int), string listingProvider = default(string), int domainAgencyID = default(int), string providerAdId = default(string), string features = default(string), string description = default(string), string summary = default(string), ListingAdminV2InspectionDetails inspectionDetails = default(ListingAdminV2InspectionDetails), List<ListingAdminV2PropertyMedia> media = default(List<ListingAdminV2PropertyMedia>), ListingActionEnum listingAction = default(ListingActionEnum), ContactPreferenceEnum? contactPreference = default(ContactPreferenceEnum?), List<ListingAdminV2Contact> contacts = default(List<ListingAdminV2Contact>), string otherEnquiryEmail = default(string), bool receiveEmailsToDefaultAddress = default(bool), bool isRural = default(bool), List<ListingAdminV2ListingSupplementary> supplementary = default(List<ListingAdminV2ListingSupplementary>))
        {
            // to ensure "propertyDetails" is required (not null)
            this.PropertyDetails = propertyDetails ?? throw new ArgumentNullException("propertyDetails is a required property for ListingAdminV2CommercialListingV2 and cannot be null");
            this.DomainAgencyID = domainAgencyID;
            // to ensure "providerAdId" is required (not null)
            this.ProviderAdId = providerAdId ?? throw new ArgumentNullException("providerAdId is a required property for ListingAdminV2CommercialListingV2 and cannot be null");
            this.ListingAction = listingAction;
            this.SalePrice = salePrice;
            this.LeasePrice = leasePrice;
            this.Lease = lease;
            this.Eoi = eoi;
            this.Tenant = tenant;
            this.Tender = tender;
            this.OccupancyType = occupancyType;
            this.AnnualReturn = annualReturn;
            this.UnitsOffered = unitsOffered;
            this.UnitDetails = unitDetails;
            this.Nabers = nabers;
            this.SaleTerms = saleTerms;
            this.Auction = auction;
            this.ConjunctionAgents = conjunctionAgents;
            this.Highlights = highlights;
            this.UnderOfferOrContract = underOfferOrContract;
            this.DomainAdId = domainAdId;
            this.ListingProvider = listingProvider;
            this.Features = features;
            this.Description = description;
            this.Summary = summary;
            this.InspectionDetails = inspectionDetails;
            this.Media = media;
            this.ContactPreference = contactPreference;
            this.Contacts = contacts;
            this.OtherEnquiryEmail = otherEnquiryEmail;
            this.ReceiveEmailsToDefaultAddress = receiveEmailsToDefaultAddress;
            this.IsRural = isRural;
            this.Supplementary = supplementary;
        }

        /// <summary>
        /// Gets or Sets SalePrice
        /// </summary>
        [DataMember(Name = "salePrice", EmitDefaultValue = false)]
        public ListingAdminV2CommercialPrice SalePrice { get; set; }

        /// <summary>
        /// Gets or Sets LeasePrice
        /// </summary>
        [DataMember(Name = "leasePrice", EmitDefaultValue = false)]
        public ListingAdminV2CommercialPrice LeasePrice { get; set; }

        /// <summary>
        /// Gets or Sets Lease
        /// </summary>
        [DataMember(Name = "lease", EmitDefaultValue = false)]
        public ListingAdminV2Lease Lease { get; set; }

        /// <summary>
        /// Gets or Sets Eoi
        /// </summary>
        [DataMember(Name = "eoi", EmitDefaultValue = false)]
        public ListingAdminV2EOI Eoi { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name = "tenant", EmitDefaultValue = false)]
        public ListingAdminV2Tenant Tenant { get; set; }

        /// <summary>
        /// Gets or Sets Tender
        /// </summary>
        [DataMember(Name = "tender", EmitDefaultValue = false)]
        public ListingAdminV2Tender Tender { get; set; }

        /// <summary>
        /// Integer value of percentage return on this property or business.
        /// </summary>
        /// <value>Integer value of percentage return on this property or business.</value>
        [DataMember(Name = "annualReturn", EmitDefaultValue = false)]
        public int AnnualReturn { get; set; }

        /// <summary>
        /// Integer value of units offered for sale or lease
        /// </summary>
        /// <value>Integer value of units offered for sale or lease</value>
        [DataMember(Name = "unitsOffered", EmitDefaultValue = false)]
        public int UnitsOffered { get; set; }

        /// <summary>
        /// Units details
        /// </summary>
        /// <value>Units details</value>
        [DataMember(Name = "unitDetails", EmitDefaultValue = false)]
        public List<ListingAdminV2SpecificUnitDetail> UnitDetails { get; set; }

        /// <summary>
        /// The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au
        /// </summary>
        /// <value>The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au</value>
        [DataMember(Name = "nabers", EmitDefaultValue = false)]
        public double Nabers { get; set; }

        /// <summary>
        /// Information relating to aspects of the sale, such as required deposit, settlement time. Up to 50 characters, optional. Ignored for lease listings
        /// </summary>
        /// <value>Information relating to aspects of the sale, such as required deposit, settlement time. Up to 50 characters, optional. Ignored for lease listings</value>
        [DataMember(Name = "saleTerms", EmitDefaultValue = false)]
        public string SaleTerms { get; set; }

        /// <summary>
        /// Gets or Sets Auction
        /// </summary>
        [DataMember(Name = "auction", EmitDefaultValue = false)]
        public ListingAdminV2CommercialAuction Auction { get; set; }

        /// <summary>
        /// Gets or Sets PropertyDetails
        /// </summary>
        [DataMember(Name = "propertyDetails", IsRequired = true, EmitDefaultValue = false)]
        public ListingAdminV2CommercialProperty PropertyDetails { get; set; }

        /// <summary>
        /// List of conjunction agents
        /// </summary>
        /// <value>List of conjunction agents</value>
        [DataMember(Name = "conjunctionAgents", EmitDefaultValue = false)]
        public List<ListingAdminV2AgentContact> ConjunctionAgents { get; set; }

        /// <summary>
        /// Highlight Items
        /// </summary>
        /// <value>Highlight Items</value>
        [DataMember(Name = "highlights", EmitDefaultValue = false)]
        public List<string> Highlights { get; set; }

        /// <summary>
        /// Set for Sale listings only
        /// </summary>
        /// <value>Set for Sale listings only</value>
        [DataMember(Name = "underOfferOrContract", EmitDefaultValue = false)]
        public bool UnderOfferOrContract { get; set; }

        /// <summary>
        /// Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.
        /// </summary>
        /// <value>Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.</value>
        [DataMember(Name = "domainAdId", EmitDefaultValue = false)]
        public int DomainAdId { get; set; }

        /// <summary>
        /// A string identifying the data provider
        /// </summary>
        /// <value>A string identifying the data provider</value>
        [DataMember(Name = "listingProvider", EmitDefaultValue = false)]
        public string ListingProvider { get; set; }

        /// <summary>
        /// The Domain Agency Id number
        /// </summary>
        /// <value>The Domain Agency Id number</value>
        [DataMember(Name = "domainAgencyID", IsRequired = true, EmitDefaultValue = false)]
        public int DomainAgencyID { get; set; }

        /// <summary>
        /// External Advertisement Id of up to 50 characters will be stored.&lt;br /&gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&lt;br /&gt;  This value is case-insensitive (meaning AAAA will update aaaa).
        /// </summary>
        /// <value>External Advertisement Id of up to 50 characters will be stored.&lt;br /&gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&lt;br /&gt;  This value is case-insensitive (meaning AAAA will update aaaa).</value>
        [DataMember(Name = "providerAdId", IsRequired = true, EmitDefaultValue = false)]
        public string ProviderAdId { get; set; }

        /// <summary>
        ///  Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels
        /// </summary>
        /// <value> Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels</value>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public string Features { get; set; }

        /// <summary>
        /// Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade
        /// </summary>
        /// <value>Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// &#39;Headline&#39; Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
        /// </summary>
        /// <value>&#39;Headline&#39; Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets InspectionDetails
        /// </summary>
        [DataMember(Name = "inspectionDetails", EmitDefaultValue = false)]
        public ListingAdminV2InspectionDetails InspectionDetails { get; set; }

        /// <summary>
        /// Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.
        /// </summary>
        /// <value>Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.</value>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<ListingAdminV2PropertyMedia> Media { get; set; }

        /// <summary>
        /// Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
        /// </summary>
        /// <value>Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.</value>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<ListingAdminV2Contact> Contacts { get; set; }

        /// <summary>
        /// Sets an additional Email Address to which enquiries on the Listing will be sent
        /// </summary>
        /// <value>Sets an additional Email Address to which enquiries on the Listing will be sent</value>
        [DataMember(Name = "otherEnquiryEmail", EmitDefaultValue = false)]
        public string OtherEnquiryEmail { get; set; }

        /// <summary>
        /// Send email enquiries to the default address for this listing type
        /// </summary>
        /// <value>Send email enquiries to the default address for this listing type</value>
        [DataMember(Name = "receiveEmailsToDefaultAddress", EmitDefaultValue = false)]
        public bool ReceiveEmailsToDefaultAddress { get; set; }

        /// <summary>
        /// True if the property is rural
        /// </summary>
        /// <value>True if the property is rural</value>
        [DataMember(Name = "isRural", EmitDefaultValue = false)]
        public bool IsRural { get; set; }

        /// <summary>
        /// Rural attributes    *Improvements* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    &#x60;description&#x60; (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    &#x60;description&#x60; (string, optional): description of the homestead and construction, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;area&#x60; (decimal, optional): homestead area in square metres.    Available &#x60;types&#x60; (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    &#x60;description&#x60; (string, optional): water comments, maximum 250 characters.    Available &#x60;types&#x60; (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    &#x60;description&#x60; (string, optional): description of the crops, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;croppedAnnually&#x60; (decimal, optional): average annual area cropped in hectares.  * &#x60;fallowAnnually&#x60; (decimal, optional): average annual fallow area in hectares.  * &#x60;pastures&#x60; (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    &#x60;description&#x60; (string, optional): additional comments, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;capacity&#x60; (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    &#x60;description&#x60; (string, optional): description of plant and machinery included in sale, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;livestock&#x60; (string, optional): description of livestock included in sale, maximum 250 characters.  * &#x60;crop&#x60; (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    &#x60;description&#x60; (string, optional): irrigation comments, maximum 250 characters    &#x60;metadata&#x60; (optional)  * &#x60;rainfall&#x60; (decimal, optional): annual rainfall in millimetres.
        /// </summary>
        /// <value>Rural attributes    *Improvements* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    &#x60;description&#x60; (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    &#x60;description&#x60; (string, optional): description of the homestead and construction, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;area&#x60; (decimal, optional): homestead area in square metres.    Available &#x60;types&#x60; (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    &#x60;description&#x60; (string, optional): water comments, maximum 250 characters.    Available &#x60;types&#x60; (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    &#x60;description&#x60; (string, optional): description of the crops, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;croppedAnnually&#x60; (decimal, optional): average annual area cropped in hectares.  * &#x60;fallowAnnually&#x60; (decimal, optional): average annual fallow area in hectares.  * &#x60;pastures&#x60; (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    &#x60;description&#x60; (string, optional): additional comments, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;capacity&#x60; (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available &#x60;types&#x60; (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    &#x60;description&#x60; (string, optional): description of plant and machinery included in sale, maximum 250 characters.    &#x60;metadata&#x60; (optional)  * &#x60;livestock&#x60; (string, optional): description of livestock included in sale, maximum 250 characters.  * &#x60;crop&#x60; (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    &#x60;description&#x60; (string, optional): irrigation comments, maximum 250 characters    &#x60;metadata&#x60; (optional)  * &#x60;rainfall&#x60; (decimal, optional): annual rainfall in millimetres.</value>
        [DataMember(Name = "supplementary", EmitDefaultValue = false)]
        public List<ListingAdminV2ListingSupplementary> Supplementary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2CommercialListingV2 {\n");
            sb.Append("  SalePrice: ").Append(SalePrice).Append("\n");
            sb.Append("  LeasePrice: ").Append(LeasePrice).Append("\n");
            sb.Append("  Lease: ").Append(Lease).Append("\n");
            sb.Append("  Eoi: ").Append(Eoi).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  Tender: ").Append(Tender).Append("\n");
            sb.Append("  OccupancyType: ").Append(OccupancyType).Append("\n");
            sb.Append("  AnnualReturn: ").Append(AnnualReturn).Append("\n");
            sb.Append("  UnitsOffered: ").Append(UnitsOffered).Append("\n");
            sb.Append("  UnitDetails: ").Append(UnitDetails).Append("\n");
            sb.Append("  Nabers: ").Append(Nabers).Append("\n");
            sb.Append("  SaleTerms: ").Append(SaleTerms).Append("\n");
            sb.Append("  Auction: ").Append(Auction).Append("\n");
            sb.Append("  PropertyDetails: ").Append(PropertyDetails).Append("\n");
            sb.Append("  ConjunctionAgents: ").Append(ConjunctionAgents).Append("\n");
            sb.Append("  Highlights: ").Append(Highlights).Append("\n");
            sb.Append("  UnderOfferOrContract: ").Append(UnderOfferOrContract).Append("\n");
            sb.Append("  DomainAdId: ").Append(DomainAdId).Append("\n");
            sb.Append("  ListingProvider: ").Append(ListingProvider).Append("\n");
            sb.Append("  DomainAgencyID: ").Append(DomainAgencyID).Append("\n");
            sb.Append("  ProviderAdId: ").Append(ProviderAdId).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  InspectionDetails: ").Append(InspectionDetails).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  ListingAction: ").Append(ListingAction).Append("\n");
            sb.Append("  ContactPreference: ").Append(ContactPreference).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  OtherEnquiryEmail: ").Append(OtherEnquiryEmail).Append("\n");
            sb.Append("  ReceiveEmailsToDefaultAddress: ").Append(ReceiveEmailsToDefaultAddress).Append("\n");
            sb.Append("  IsRural: ").Append(IsRural).Append("\n");
            sb.Append("  Supplementary: ").Append(Supplementary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2CommercialListingV2);
        }

        /// <summary>
        /// Returns true if ListingAdminV2CommercialListingV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2CommercialListingV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2CommercialListingV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SalePrice == input.SalePrice ||
                    (this.SalePrice != null &&
                    this.SalePrice.Equals(input.SalePrice))
                ) && 
                (
                    this.LeasePrice == input.LeasePrice ||
                    (this.LeasePrice != null &&
                    this.LeasePrice.Equals(input.LeasePrice))
                ) && 
                (
                    this.Lease == input.Lease ||
                    (this.Lease != null &&
                    this.Lease.Equals(input.Lease))
                ) && 
                (
                    this.Eoi == input.Eoi ||
                    (this.Eoi != null &&
                    this.Eoi.Equals(input.Eoi))
                ) && 
                (
                    this.Tenant == input.Tenant ||
                    (this.Tenant != null &&
                    this.Tenant.Equals(input.Tenant))
                ) && 
                (
                    this.Tender == input.Tender ||
                    (this.Tender != null &&
                    this.Tender.Equals(input.Tender))
                ) && 
                (
                    this.OccupancyType == input.OccupancyType ||
                    this.OccupancyType.Equals(input.OccupancyType)
                ) && 
                (
                    this.AnnualReturn == input.AnnualReturn ||
                    this.AnnualReturn.Equals(input.AnnualReturn)
                ) && 
                (
                    this.UnitsOffered == input.UnitsOffered ||
                    this.UnitsOffered.Equals(input.UnitsOffered)
                ) && 
                (
                    this.UnitDetails == input.UnitDetails ||
                    this.UnitDetails != null &&
                    input.UnitDetails != null &&
                    this.UnitDetails.SequenceEqual(input.UnitDetails)
                ) && 
                (
                    this.Nabers == input.Nabers ||
                    this.Nabers.Equals(input.Nabers)
                ) && 
                (
                    this.SaleTerms == input.SaleTerms ||
                    (this.SaleTerms != null &&
                    this.SaleTerms.Equals(input.SaleTerms))
                ) && 
                (
                    this.Auction == input.Auction ||
                    (this.Auction != null &&
                    this.Auction.Equals(input.Auction))
                ) && 
                (
                    this.PropertyDetails == input.PropertyDetails ||
                    (this.PropertyDetails != null &&
                    this.PropertyDetails.Equals(input.PropertyDetails))
                ) && 
                (
                    this.ConjunctionAgents == input.ConjunctionAgents ||
                    this.ConjunctionAgents != null &&
                    input.ConjunctionAgents != null &&
                    this.ConjunctionAgents.SequenceEqual(input.ConjunctionAgents)
                ) && 
                (
                    this.Highlights == input.Highlights ||
                    this.Highlights != null &&
                    input.Highlights != null &&
                    this.Highlights.SequenceEqual(input.Highlights)
                ) && 
                (
                    this.UnderOfferOrContract == input.UnderOfferOrContract ||
                    this.UnderOfferOrContract.Equals(input.UnderOfferOrContract)
                ) && 
                (
                    this.DomainAdId == input.DomainAdId ||
                    this.DomainAdId.Equals(input.DomainAdId)
                ) && 
                (
                    this.ListingProvider == input.ListingProvider ||
                    (this.ListingProvider != null &&
                    this.ListingProvider.Equals(input.ListingProvider))
                ) && 
                (
                    this.DomainAgencyID == input.DomainAgencyID ||
                    this.DomainAgencyID.Equals(input.DomainAgencyID)
                ) && 
                (
                    this.ProviderAdId == input.ProviderAdId ||
                    (this.ProviderAdId != null &&
                    this.ProviderAdId.Equals(input.ProviderAdId))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.InspectionDetails == input.InspectionDetails ||
                    (this.InspectionDetails != null &&
                    this.InspectionDetails.Equals(input.InspectionDetails))
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.ListingAction == input.ListingAction ||
                    this.ListingAction.Equals(input.ListingAction)
                ) && 
                (
                    this.ContactPreference == input.ContactPreference ||
                    this.ContactPreference.Equals(input.ContactPreference)
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.OtherEnquiryEmail == input.OtherEnquiryEmail ||
                    (this.OtherEnquiryEmail != null &&
                    this.OtherEnquiryEmail.Equals(input.OtherEnquiryEmail))
                ) && 
                (
                    this.ReceiveEmailsToDefaultAddress == input.ReceiveEmailsToDefaultAddress ||
                    this.ReceiveEmailsToDefaultAddress.Equals(input.ReceiveEmailsToDefaultAddress)
                ) && 
                (
                    this.IsRural == input.IsRural ||
                    this.IsRural.Equals(input.IsRural)
                ) && 
                (
                    this.Supplementary == input.Supplementary ||
                    this.Supplementary != null &&
                    input.Supplementary != null &&
                    this.Supplementary.SequenceEqual(input.Supplementary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SalePrice != null)
                    hashCode = hashCode * 59 + this.SalePrice.GetHashCode();
                if (this.LeasePrice != null)
                    hashCode = hashCode * 59 + this.LeasePrice.GetHashCode();
                if (this.Lease != null)
                    hashCode = hashCode * 59 + this.Lease.GetHashCode();
                if (this.Eoi != null)
                    hashCode = hashCode * 59 + this.Eoi.GetHashCode();
                if (this.Tenant != null)
                    hashCode = hashCode * 59 + this.Tenant.GetHashCode();
                if (this.Tender != null)
                    hashCode = hashCode * 59 + this.Tender.GetHashCode();
                hashCode = hashCode * 59 + this.OccupancyType.GetHashCode();
                hashCode = hashCode * 59 + this.AnnualReturn.GetHashCode();
                hashCode = hashCode * 59 + this.UnitsOffered.GetHashCode();
                if (this.UnitDetails != null)
                    hashCode = hashCode * 59 + this.UnitDetails.GetHashCode();
                hashCode = hashCode * 59 + this.Nabers.GetHashCode();
                if (this.SaleTerms != null)
                    hashCode = hashCode * 59 + this.SaleTerms.GetHashCode();
                if (this.Auction != null)
                    hashCode = hashCode * 59 + this.Auction.GetHashCode();
                if (this.PropertyDetails != null)
                    hashCode = hashCode * 59 + this.PropertyDetails.GetHashCode();
                if (this.ConjunctionAgents != null)
                    hashCode = hashCode * 59 + this.ConjunctionAgents.GetHashCode();
                if (this.Highlights != null)
                    hashCode = hashCode * 59 + this.Highlights.GetHashCode();
                hashCode = hashCode * 59 + this.UnderOfferOrContract.GetHashCode();
                hashCode = hashCode * 59 + this.DomainAdId.GetHashCode();
                if (this.ListingProvider != null)
                    hashCode = hashCode * 59 + this.ListingProvider.GetHashCode();
                hashCode = hashCode * 59 + this.DomainAgencyID.GetHashCode();
                if (this.ProviderAdId != null)
                    hashCode = hashCode * 59 + this.ProviderAdId.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.InspectionDetails != null)
                    hashCode = hashCode * 59 + this.InspectionDetails.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                hashCode = hashCode * 59 + this.ListingAction.GetHashCode();
                hashCode = hashCode * 59 + this.ContactPreference.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.OtherEnquiryEmail != null)
                    hashCode = hashCode * 59 + this.OtherEnquiryEmail.GetHashCode();
                hashCode = hashCode * 59 + this.ReceiveEmailsToDefaultAddress.GetHashCode();
                hashCode = hashCode * 59 + this.IsRural.GetHashCode();
                if (this.Supplementary != null)
                    hashCode = hashCode * 59 + this.Supplementary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnitsOffered (int) maximum
            if(this.UnitsOffered > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitsOffered, must be a value less than or equal to 2147483647.", new [] { "UnitsOffered" });
            }

            // UnitsOffered (int) minimum
            if(this.UnitsOffered < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitsOffered, must be a value greater than or equal to 0.", new [] { "UnitsOffered" });
            }

            // Nabers (double) maximum
            if(this.Nabers > (double)6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nabers, must be a value less than or equal to 6.", new [] { "Nabers" });
            }

            // Nabers (double) minimum
            if(this.Nabers < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nabers, must be a value greater than or equal to 0.", new [] { "Nabers" });
            }

            // SaleTerms (string) maxLength
            if(this.SaleTerms != null && this.SaleTerms.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleTerms, length must be less than 50.", new [] { "SaleTerms" });
            }

            // SaleTerms (string) minLength
            if(this.SaleTerms != null && this.SaleTerms.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaleTerms, length must be greater than 0.", new [] { "SaleTerms" });
            }

            // DomainAdId (int) maximum
            if(this.DomainAdId > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DomainAdId, must be a value less than or equal to 2147483647.", new [] { "DomainAdId" });
            }

            // DomainAdId (int) minimum
            if(this.DomainAdId < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DomainAdId, must be a value greater than or equal to 0.", new [] { "DomainAdId" });
            }

            // DomainAgencyID (int) maximum
            if(this.DomainAgencyID > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DomainAgencyID, must be a value less than or equal to 2147483647.", new [] { "DomainAgencyID" });
            }

            // DomainAgencyID (int) minimum
            if(this.DomainAgencyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DomainAgencyID, must be a value greater than or equal to 0.", new [] { "DomainAgencyID" });
            }

            // ProviderAdId (string) maxLength
            if(this.ProviderAdId != null && this.ProviderAdId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderAdId, length must be less than 50.", new [] { "ProviderAdId" });
            }

            // ProviderAdId (string) minLength
            if(this.ProviderAdId != null && this.ProviderAdId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderAdId, length must be greater than 0.", new [] { "ProviderAdId" });
            }

            // Features (string) maxLength
            if(this.Features != null && this.Features.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Features, length must be less than 1000.", new [] { "Features" });
            }

            // Features (string) minLength
            if(this.Features != null && this.Features.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Features, length must be greater than 0.", new [] { "Features" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 6000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 6000.", new [] { "Description" });
            }

            // Description (string) minLength
            if(this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Summary (string) maxLength
            if(this.Summary != null && this.Summary.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Summary, length must be less than 250.", new [] { "Summary" });
            }

            // Summary (string) minLength
            if(this.Summary != null && this.Summary.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Summary, length must be greater than 0.", new [] { "Summary" });
            }

            yield break;
        }
    }

}
