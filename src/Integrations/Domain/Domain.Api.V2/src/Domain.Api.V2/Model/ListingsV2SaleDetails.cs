/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Model
{
    /// <summary>
    /// The sale detail&#39;s of the listing in case of it being for sale or sold
    /// </summary>
    [DataContract(Name = "Listings.V2.SaleDetails")]
    public partial class ListingsV2SaleDetails : IEquatable<ListingsV2SaleDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsV2SaleDetails" /> class.
        /// </summary>
        /// <param name="saleMethod">saleMethod.</param>
        /// <param name="soldDetails">soldDetails.</param>
        /// <param name="auctionDetails">auctionDetails.</param>
        /// <param name="tenderDetails">tenderDetails.</param>
        /// <param name="tenantDetails">tenantDetails.</param>
        /// <param name="annualReturn">Integer value of percentage return on this property or business.</param>
        /// <param name="saleTerms">Information relating to aspects of the sale, such as required deposit, settlement time.</param>
        public ListingsV2SaleDetails(ListingsV2SaleMethod saleMethod = default(ListingsV2SaleMethod), ListingsV2SoldDetails soldDetails = default(ListingsV2SoldDetails), ListingsV2AuctionDetails auctionDetails = default(ListingsV2AuctionDetails), ListingsV2TenderDetails tenderDetails = default(ListingsV2TenderDetails), ListingsV2TenantDetails tenantDetails = default(ListingsV2TenantDetails), int? annualReturn = default(int?), string saleTerms = default(string))
        {
            this.SaleMethod = saleMethod;
            this.SoldDetails = soldDetails;
            this.AuctionDetails = auctionDetails;
            this.TenderDetails = tenderDetails;
            this.TenantDetails = tenantDetails;
            this.AnnualReturn = annualReturn;
            this.SaleTerms = saleTerms;
        }

        /// <summary>
        /// Gets or Sets SaleMethod
        /// </summary>
        [DataMember(Name = "saleMethod", EmitDefaultValue = false)]
        public ListingsV2SaleMethod SaleMethod { get; set; }

        /// <summary>
        /// Gets or Sets SoldDetails
        /// </summary>
        [DataMember(Name = "soldDetails", EmitDefaultValue = false)]
        public ListingsV2SoldDetails SoldDetails { get; set; }

        /// <summary>
        /// Gets or Sets AuctionDetails
        /// </summary>
        [DataMember(Name = "auctionDetails", EmitDefaultValue = false)]
        public ListingsV2AuctionDetails AuctionDetails { get; set; }

        /// <summary>
        /// Gets or Sets TenderDetails
        /// </summary>
        [DataMember(Name = "tenderDetails", EmitDefaultValue = false)]
        public ListingsV2TenderDetails TenderDetails { get; set; }

        /// <summary>
        /// Gets or Sets TenantDetails
        /// </summary>
        [DataMember(Name = "tenantDetails", EmitDefaultValue = false)]
        public ListingsV2TenantDetails TenantDetails { get; set; }

        /// <summary>
        /// Integer value of percentage return on this property or business
        /// </summary>
        /// <value>Integer value of percentage return on this property or business</value>
        [DataMember(Name = "annualReturn", EmitDefaultValue = true)]
        public int? AnnualReturn { get; set; }

        /// <summary>
        /// Information relating to aspects of the sale, such as required deposit, settlement time
        /// </summary>
        /// <value>Information relating to aspects of the sale, such as required deposit, settlement time</value>
        [DataMember(Name = "saleTerms", EmitDefaultValue = true)]
        public string SaleTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsV2SaleDetails {\n");
            sb.Append("  SaleMethod: ").Append(SaleMethod).Append("\n");
            sb.Append("  SoldDetails: ").Append(SoldDetails).Append("\n");
            sb.Append("  AuctionDetails: ").Append(AuctionDetails).Append("\n");
            sb.Append("  TenderDetails: ").Append(TenderDetails).Append("\n");
            sb.Append("  TenantDetails: ").Append(TenantDetails).Append("\n");
            sb.Append("  AnnualReturn: ").Append(AnnualReturn).Append("\n");
            sb.Append("  SaleTerms: ").Append(SaleTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingsV2SaleDetails);
        }

        /// <summary>
        /// Returns true if ListingsV2SaleDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsV2SaleDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsV2SaleDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SaleMethod == input.SaleMethod ||
                    (this.SaleMethod != null &&
                    this.SaleMethod.Equals(input.SaleMethod))
                ) && 
                (
                    this.SoldDetails == input.SoldDetails ||
                    (this.SoldDetails != null &&
                    this.SoldDetails.Equals(input.SoldDetails))
                ) && 
                (
                    this.AuctionDetails == input.AuctionDetails ||
                    (this.AuctionDetails != null &&
                    this.AuctionDetails.Equals(input.AuctionDetails))
                ) && 
                (
                    this.TenderDetails == input.TenderDetails ||
                    (this.TenderDetails != null &&
                    this.TenderDetails.Equals(input.TenderDetails))
                ) && 
                (
                    this.TenantDetails == input.TenantDetails ||
                    (this.TenantDetails != null &&
                    this.TenantDetails.Equals(input.TenantDetails))
                ) && 
                (
                    this.AnnualReturn == input.AnnualReturn ||
                    (this.AnnualReturn != null &&
                    this.AnnualReturn.Equals(input.AnnualReturn))
                ) && 
                (
                    this.SaleTerms == input.SaleTerms ||
                    (this.SaleTerms != null &&
                    this.SaleTerms.Equals(input.SaleTerms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SaleMethod != null)
                    hashCode = hashCode * 59 + this.SaleMethod.GetHashCode();
                if (this.SoldDetails != null)
                    hashCode = hashCode * 59 + this.SoldDetails.GetHashCode();
                if (this.AuctionDetails != null)
                    hashCode = hashCode * 59 + this.AuctionDetails.GetHashCode();
                if (this.TenderDetails != null)
                    hashCode = hashCode * 59 + this.TenderDetails.GetHashCode();
                if (this.TenantDetails != null)
                    hashCode = hashCode * 59 + this.TenantDetails.GetHashCode();
                if (this.AnnualReturn != null)
                    hashCode = hashCode * 59 + this.AnnualReturn.GetHashCode();
                if (this.SaleTerms != null)
                    hashCode = hashCode * 59 + this.SaleTerms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
