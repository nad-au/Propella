/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Model
{
    /// <summary>
    /// Tenant Details
    /// </summary>
    [DataContract(Name = "Listings.V2.TenantDetails")]
    public partial class ListingsV2TenantDetails : IEquatable<ListingsV2TenantDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsV2TenantDetails" /> class.
        /// </summary>
        /// <param name="leaseDateVariable">Is tenant lease date variable.</param>
        /// <param name="leaseOptions">Leasing options available to a prospective tenant.</param>
        /// <param name="tenantInfoTermOfLeaseFrom">The from range of the tenant&#39;s current lease.</param>
        /// <param name="tenantInfoTermOfLeaseTo">The to range of the tenant&#39;s current lease.</param>
        /// <param name="tenantName">Name of the current tenant of the property.</param>
        /// <param name="tenantRentDetails">Information regarding current rental.</param>
        /// <param name="leaseStartDate">The date on which the tenants lease began, or is due to begin. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="leaseEndDate">The date on which the tenants lease is due to end. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        public ListingsV2TenantDetails(bool? leaseDateVariable = default(bool?), string leaseOptions = default(string), int? tenantInfoTermOfLeaseFrom = default(int?), int? tenantInfoTermOfLeaseTo = default(int?), string tenantName = default(string), string tenantRentDetails = default(string), DateTime? leaseStartDate = default(DateTime?), DateTime? leaseEndDate = default(DateTime?))
        {
            this.LeaseDateVariable = leaseDateVariable;
            this.LeaseOptions = leaseOptions;
            this.TenantInfoTermOfLeaseFrom = tenantInfoTermOfLeaseFrom;
            this.TenantInfoTermOfLeaseTo = tenantInfoTermOfLeaseTo;
            this.TenantName = tenantName;
            this.TenantRentDetails = tenantRentDetails;
            this.LeaseStartDate = leaseStartDate;
            this.LeaseEndDate = leaseEndDate;
        }

        /// <summary>
        /// Is tenant lease date variable
        /// </summary>
        /// <value>Is tenant lease date variable</value>
        [DataMember(Name = "leaseDateVariable", EmitDefaultValue = true)]
        public bool? LeaseDateVariable { get; set; }

        /// <summary>
        /// Leasing options available to a prospective tenant
        /// </summary>
        /// <value>Leasing options available to a prospective tenant</value>
        [DataMember(Name = "leaseOptions", EmitDefaultValue = true)]
        public string LeaseOptions { get; set; }

        /// <summary>
        /// The from range of the tenant&#39;s current lease
        /// </summary>
        /// <value>The from range of the tenant&#39;s current lease</value>
        [DataMember(Name = "tenantInfoTermOfLeaseFrom", EmitDefaultValue = true)]
        public int? TenantInfoTermOfLeaseFrom { get; set; }

        /// <summary>
        /// The to range of the tenant&#39;s current lease
        /// </summary>
        /// <value>The to range of the tenant&#39;s current lease</value>
        [DataMember(Name = "tenantInfoTermOfLeaseTo", EmitDefaultValue = true)]
        public int? TenantInfoTermOfLeaseTo { get; set; }

        /// <summary>
        /// Name of the current tenant of the property
        /// </summary>
        /// <value>Name of the current tenant of the property</value>
        [DataMember(Name = "tenantName", EmitDefaultValue = true)]
        public string TenantName { get; set; }

        /// <summary>
        /// Information regarding current rental
        /// </summary>
        /// <value>Information regarding current rental</value>
        [DataMember(Name = "tenantRentDetails", EmitDefaultValue = true)]
        public string TenantRentDetails { get; set; }

        /// <summary>
        /// The date on which the tenants lease began, or is due to begin. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>The date on which the tenants lease began, or is due to begin. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "leaseStartDate", EmitDefaultValue = true)]
        public DateTime? LeaseStartDate { get; set; }

        /// <summary>
        /// The date on which the tenants lease is due to end. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>The date on which the tenants lease is due to end. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "leaseEndDate", EmitDefaultValue = true)]
        public DateTime? LeaseEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsV2TenantDetails {\n");
            sb.Append("  LeaseDateVariable: ").Append(LeaseDateVariable).Append("\n");
            sb.Append("  LeaseOptions: ").Append(LeaseOptions).Append("\n");
            sb.Append("  TenantInfoTermOfLeaseFrom: ").Append(TenantInfoTermOfLeaseFrom).Append("\n");
            sb.Append("  TenantInfoTermOfLeaseTo: ").Append(TenantInfoTermOfLeaseTo).Append("\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("  TenantRentDetails: ").Append(TenantRentDetails).Append("\n");
            sb.Append("  LeaseStartDate: ").Append(LeaseStartDate).Append("\n");
            sb.Append("  LeaseEndDate: ").Append(LeaseEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingsV2TenantDetails);
        }

        /// <summary>
        /// Returns true if ListingsV2TenantDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsV2TenantDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsV2TenantDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeaseDateVariable == input.LeaseDateVariable ||
                    (this.LeaseDateVariable != null &&
                    this.LeaseDateVariable.Equals(input.LeaseDateVariable))
                ) && 
                (
                    this.LeaseOptions == input.LeaseOptions ||
                    (this.LeaseOptions != null &&
                    this.LeaseOptions.Equals(input.LeaseOptions))
                ) && 
                (
                    this.TenantInfoTermOfLeaseFrom == input.TenantInfoTermOfLeaseFrom ||
                    (this.TenantInfoTermOfLeaseFrom != null &&
                    this.TenantInfoTermOfLeaseFrom.Equals(input.TenantInfoTermOfLeaseFrom))
                ) && 
                (
                    this.TenantInfoTermOfLeaseTo == input.TenantInfoTermOfLeaseTo ||
                    (this.TenantInfoTermOfLeaseTo != null &&
                    this.TenantInfoTermOfLeaseTo.Equals(input.TenantInfoTermOfLeaseTo))
                ) && 
                (
                    this.TenantName == input.TenantName ||
                    (this.TenantName != null &&
                    this.TenantName.Equals(input.TenantName))
                ) && 
                (
                    this.TenantRentDetails == input.TenantRentDetails ||
                    (this.TenantRentDetails != null &&
                    this.TenantRentDetails.Equals(input.TenantRentDetails))
                ) && 
                (
                    this.LeaseStartDate == input.LeaseStartDate ||
                    (this.LeaseStartDate != null &&
                    this.LeaseStartDate.Equals(input.LeaseStartDate))
                ) && 
                (
                    this.LeaseEndDate == input.LeaseEndDate ||
                    (this.LeaseEndDate != null &&
                    this.LeaseEndDate.Equals(input.LeaseEndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeaseDateVariable != null)
                    hashCode = hashCode * 59 + this.LeaseDateVariable.GetHashCode();
                if (this.LeaseOptions != null)
                    hashCode = hashCode * 59 + this.LeaseOptions.GetHashCode();
                if (this.TenantInfoTermOfLeaseFrom != null)
                    hashCode = hashCode * 59 + this.TenantInfoTermOfLeaseFrom.GetHashCode();
                if (this.TenantInfoTermOfLeaseTo != null)
                    hashCode = hashCode * 59 + this.TenantInfoTermOfLeaseTo.GetHashCode();
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                if (this.TenantRentDetails != null)
                    hashCode = hashCode * 59 + this.TenantRentDetails.GetHashCode();
                if (this.LeaseStartDate != null)
                    hashCode = hashCode * 59 + this.LeaseStartDate.GetHashCode();
                if (this.LeaseEndDate != null)
                    hashCode = hashCode * 59 + this.LeaseEndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
