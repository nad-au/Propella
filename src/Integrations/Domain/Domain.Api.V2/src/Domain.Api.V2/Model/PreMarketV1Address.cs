/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Model
{
    /// <summary>
    /// PreMarketV1Address
    /// </summary>
    [DataContract(Name = "PreMarket.v1.Address")]
    public partial class PreMarketV1Address : IEquatable<PreMarketV1Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreMarketV1Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1Address" /> class.
        /// </summary>
        /// <param name="streetNumber">Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1. (required).</param>
        /// <param name="street">Street name, e.g. Punt Road. (required).</param>
        /// <param name="suburb">suburb (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="postcode">postcode (required).</param>
        public PreMarketV1Address(string streetNumber = default(string), string street = default(string), string suburb = default(string), PreMarketV1State state = default(PreMarketV1State), string postcode = default(string))
        {
            // to ensure "streetNumber" is required (not null)
            this.StreetNumber = streetNumber ?? throw new ArgumentNullException("streetNumber is a required property for PreMarketV1Address and cannot be null");
            // to ensure "street" is required (not null)
            this.Street = street ?? throw new ArgumentNullException("street is a required property for PreMarketV1Address and cannot be null");
            // to ensure "suburb" is required (not null)
            this.Suburb = suburb ?? throw new ArgumentNullException("suburb is a required property for PreMarketV1Address and cannot be null");
            // to ensure "state" is required (not null)
            this.State = state;
            // to ensure "postcode" is required (not null)
            this.Postcode = postcode ?? throw new ArgumentNullException("postcode is a required property for PreMarketV1Address and cannot be null");
        }

        /// <summary>
        /// Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1.
        /// </summary>
        /// <value>Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1.</value>
        [DataMember(Name = "streetNumber", IsRequired = true, EmitDefaultValue = false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Street name, e.g. Punt Road.
        /// </summary>
        /// <value>Street name, e.g. Punt Road.</value>
        [DataMember(Name = "street", IsRequired = true, EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name = "suburb", IsRequired = true, EmitDefaultValue = false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public PreMarketV1State State { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "postcode", IsRequired = true, EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreMarketV1Address {\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreMarketV1Address);
        }

        /// <summary>
        /// Returns true if PreMarketV1Address instances are equal
        /// </summary>
        /// <param name="input">Instance of PreMarketV1Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreMarketV1Address input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StreetNumber (string) maxLength
            if(this.StreetNumber != null && this.StreetNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreetNumber, length must be less than 20.", new [] { "StreetNumber" });
            }

            // StreetNumber (string) minLength
            if(this.StreetNumber != null && this.StreetNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreetNumber, length must be greater than 0.", new [] { "StreetNumber" });
            }

            // Street (string) maxLength
            if(this.Street != null && this.Street.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Street, length must be less than 50.", new [] { "Street" });
            }

            // Street (string) minLength
            if(this.Street != null && this.Street.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Street, length must be greater than 0.", new [] { "Street" });
            }

            // Suburb (string) maxLength
            if(this.Suburb != null && this.Suburb.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Suburb, length must be less than 50.", new [] { "Suburb" });
            }

            // Suburb (string) minLength
            if(this.Suburb != null && this.Suburb.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Suburb, length must be greater than 0.", new [] { "Suburb" });
            }

            // Postcode (string) pattern
            Regex regexPostcode = new Regex(@"^[0-9]{3,4}$", RegexOptions.CultureInvariant);
            if (false == regexPostcode.Match(this.Postcode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Postcode, must match a pattern of " + regexPostcode, new [] { "Postcode" });
            }

            yield break;
        }
    }

}
