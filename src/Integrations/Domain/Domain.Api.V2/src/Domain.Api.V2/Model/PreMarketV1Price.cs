/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Model
{
    /// <summary>
    /// PreMarketV1Price
    /// </summary>
    [DataContract(Name = "PreMarket.v1.Price")]
    public partial class PreMarketV1Price : IEquatable<PreMarketV1Price>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1Price" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreMarketV1Price() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1Price" /> class.
        /// </summary>
        /// <param name="from">Lower end of the price range. (required).</param>
        /// <param name="to">Upper end of the price range. (required).</param>
        /// <param name="displayText">When provided this will be shown instead of the price range, e.g.: \&quot;Offers over $450K considered\&quot;.</param>
        public PreMarketV1Price(double from = default(double), double to = default(double), string displayText = default(string))
        {
            this.From = from;
            this.To = to;
            this.DisplayText = displayText;
        }

        /// <summary>
        /// Lower end of the price range.
        /// </summary>
        /// <value>Lower end of the price range.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        public double From { get; set; }

        /// <summary>
        /// Upper end of the price range.
        /// </summary>
        /// <value>Upper end of the price range.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        public double To { get; set; }

        /// <summary>
        /// When provided this will be shown instead of the price range, e.g.: \&quot;Offers over $450K considered\&quot;
        /// </summary>
        /// <value>When provided this will be shown instead of the price range, e.g.: \&quot;Offers over $450K considered\&quot;</value>
        [DataMember(Name = "displayText", EmitDefaultValue = true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreMarketV1Price {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreMarketV1Price);
        }

        /// <summary>
        /// Returns true if PreMarketV1Price instances are equal
        /// </summary>
        /// <param name="input">Instance of PreMarketV1Price to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreMarketV1Price input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    this.From.Equals(input.From)
                ) && 
                (
                    this.To == input.To ||
                    this.To.Equals(input.To)
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.From.GetHashCode();
                hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // From (double) minimum
            if(this.From < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must be a value greater than or equal to 0.", new [] { "From" });
            }

            // To (double) minimum
            if(this.To < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must be a value greater than or equal to 0.", new [] { "To" });
            }

            // DisplayText (string) maxLength
            if(this.DisplayText != null && this.DisplayText.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayText, length must be less than 80.", new [] { "DisplayText" });
            }

            // DisplayText (string) minLength
            if(this.DisplayText != null && this.DisplayText.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayText, length must be greater than 0.", new [] { "DisplayText" });
            }

            yield break;
        }
    }

}
