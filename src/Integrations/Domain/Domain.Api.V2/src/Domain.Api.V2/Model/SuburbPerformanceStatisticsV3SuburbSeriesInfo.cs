/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.V2.Client.OpenAPIDateConverter;

namespace Domain.Api.V2.Model
{
    /// <summary>
    /// APMAPIModelsSuburbV2SeriesInfoModel
    /// </summary>
    [DataContract(Name = "SuburbPerformanceStatistics.V3.SuburbSeriesInfo")]
    public partial class SuburbPerformanceStatisticsV3SuburbSeriesInfo : IEquatable<SuburbPerformanceStatisticsV3SuburbSeriesInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsV3SuburbSeriesInfo" /> class.
        /// </summary>
        /// <param name="year">Gets or Sets Year.</param>
        /// <param name="month">Gets or Sets Month.</param>
        /// <param name="values">Gets or Sets Values.</param>
        public SuburbPerformanceStatisticsV3SuburbSeriesInfo(int year = default(int), int month = default(int), Dictionary<string, Object> values = default(Dictionary<string, Object>))
        {
            this.Year = year;
            this.Month = month;
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        /// <value>Gets or Sets Year</value>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        /// <value>Gets or Sets Month</value>
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public int Month { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        /// <value>Gets or Sets Values</value>
        [DataMember(Name = "values", EmitDefaultValue = true)]
        public Dictionary<string, Object> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuburbPerformanceStatisticsV3SuburbSeriesInfo {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SuburbPerformanceStatisticsV3SuburbSeriesInfo);
        }

        /// <summary>
        /// Returns true if SuburbPerformanceStatisticsV3SuburbSeriesInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SuburbPerformanceStatisticsV3SuburbSeriesInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuburbPerformanceStatisticsV3SuburbSeriesInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Month == input.Month ||
                    this.Month.Equals(input.Month)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
