/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.Client.Model
{
    /// <summary>
    /// DemographicsItemModel
    /// </summary>
    [DataContract(Name = "Demographics.V1.DemographicsItem")]
    public partial class DemographicsV1DemographicsItem : IEquatable<DemographicsV1DemographicsItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsV1DemographicsItem" /> class.
        /// </summary>
        /// <param name="label">Gets or Sets Label.</param>
        /// <param name="value">Gets or Sets Value.</param>
        /// <param name="composition">Gets or Sets Composition.</param>
        public DemographicsV1DemographicsItem(string label = default(string), int value = default(int), string composition = default(string))
        {
            this.Label = label;
            this.Value = value;
            this.Composition = composition;
        }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        /// <value>Gets or Sets Label</value>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        /// <value>Gets or Sets Value</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public int Value { get; set; }

        /// <summary>
        /// Gets or Sets Composition
        /// </summary>
        /// <value>Gets or Sets Composition</value>
        [DataMember(Name = "composition", EmitDefaultValue = true)]
        public string Composition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DemographicsV1DemographicsItem {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Composition: ").Append(Composition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DemographicsV1DemographicsItem);
        }

        /// <summary>
        /// Returns true if DemographicsV1DemographicsItem instances are equal
        /// </summary>
        /// <param name="input">Instance of DemographicsV1DemographicsItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DemographicsV1DemographicsItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Composition == input.Composition ||
                    (this.Composition != null &&
                    this.Composition.Equals(input.Composition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Composition != null)
                    hashCode = hashCode * 59 + this.Composition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
