/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.Client.Model
{
    /// <summary>
    /// Encapsulates the parts that make up an Address
    /// </summary>
    [DataContract(Name = "Listings.V2.AddressParts")]
    public partial class ListingsV2AddressParts : IEquatable<ListingsV2AddressParts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsV2AddressParts" /> class.
        /// </summary>
        /// <param name="stateAbbreviation">stateAbbreviation.</param>
        /// <param name="displayType">displayType.</param>
        /// <param name="streetNumber">Street number.</param>
        /// <param name="unitNumber">Unit number..</param>
        /// <param name="street">Street address.</param>
        /// <param name="suburb">Suburb of the address.</param>
        /// <param name="suburbId">Domain suburb identifier for address lookup via the domain location api.</param>
        /// <param name="postcode">Postcode of the address.</param>
        /// <param name="displayAddress">Advertiser&#39;s preference in displaying their listing&#39;s address.</param>
        public ListingsV2AddressParts(ListingsV2StateAbbreviation stateAbbreviation = default(ListingsV2StateAbbreviation), ListingsV2DisplayAddressType displayType = default(ListingsV2DisplayAddressType), string streetNumber = default(string), string unitNumber = default(string), string street = default(string), string suburb = default(string), int? suburbId = default(int?), string postcode = default(string), string displayAddress = default(string))
        {
            this.StateAbbreviation = stateAbbreviation;
            this.DisplayType = displayType;
            this.StreetNumber = streetNumber;
            this.UnitNumber = unitNumber;
            this.Street = street;
            this.Suburb = suburb;
            this.SuburbId = suburbId;
            this.Postcode = postcode;
            this.DisplayAddress = displayAddress;
        }

        /// <summary>
        /// Gets or Sets StateAbbreviation
        /// </summary>
        [DataMember(Name = "stateAbbreviation", EmitDefaultValue = false)]
        public ListingsV2StateAbbreviation StateAbbreviation { get; set; }

        /// <summary>
        /// Gets or Sets DisplayType
        /// </summary>
        [DataMember(Name = "displayType", EmitDefaultValue = false)]
        public ListingsV2DisplayAddressType DisplayType { get; set; }

        /// <summary>
        /// Street number
        /// </summary>
        /// <value>Street number</value>
        [DataMember(Name = "streetNumber", EmitDefaultValue = true)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Unit number.
        /// </summary>
        /// <value>Unit number.</value>
        [DataMember(Name = "unitNumber", EmitDefaultValue = true)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// Street address
        /// </summary>
        /// <value>Street address</value>
        [DataMember(Name = "street", EmitDefaultValue = true)]
        public string Street { get; set; }

        /// <summary>
        /// Suburb of the address
        /// </summary>
        /// <value>Suburb of the address</value>
        [DataMember(Name = "suburb", EmitDefaultValue = true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Domain suburb identifier for address lookup via the domain location api
        /// </summary>
        /// <value>Domain suburb identifier for address lookup via the domain location api</value>
        [DataMember(Name = "suburbId", EmitDefaultValue = true)]
        public int? SuburbId { get; set; }

        /// <summary>
        /// Postcode of the address
        /// </summary>
        /// <value>Postcode of the address</value>
        [DataMember(Name = "postcode", EmitDefaultValue = true)]
        public string Postcode { get; set; }

        /// <summary>
        /// Advertiser&#39;s preference in displaying their listing&#39;s address
        /// </summary>
        /// <value>Advertiser&#39;s preference in displaying their listing&#39;s address</value>
        [DataMember(Name = "displayAddress", EmitDefaultValue = true)]
        public string DisplayAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsV2AddressParts {\n");
            sb.Append("  StateAbbreviation: ").Append(StateAbbreviation).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  SuburbId: ").Append(SuburbId).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  DisplayAddress: ").Append(DisplayAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingsV2AddressParts);
        }

        /// <summary>
        /// Returns true if ListingsV2AddressParts instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsV2AddressParts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsV2AddressParts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StateAbbreviation == input.StateAbbreviation ||
                    (this.StateAbbreviation != null &&
                    this.StateAbbreviation.Equals(input.StateAbbreviation))
                ) && 
                (
                    this.DisplayType == input.DisplayType ||
                    (this.DisplayType != null &&
                    this.DisplayType.Equals(input.DisplayType))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.SuburbId == input.SuburbId ||
                    (this.SuburbId != null &&
                    this.SuburbId.Equals(input.SuburbId))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.DisplayAddress == input.DisplayAddress ||
                    (this.DisplayAddress != null &&
                    this.DisplayAddress.Equals(input.DisplayAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StateAbbreviation != null)
                    hashCode = hashCode * 59 + this.StateAbbreviation.GetHashCode();
                if (this.DisplayType != null)
                    hashCode = hashCode * 59 + this.DisplayType.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.SuburbId != null)
                    hashCode = hashCode * 59 + this.SuburbId.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.DisplayAddress != null)
                    hashCode = hashCode * 59 + this.DisplayAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
