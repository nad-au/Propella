/*
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Domain.Api.Client.Client.OpenAPIDateConverter;

namespace Domain.Api.Client.Model
{
    /// <summary>
    /// Represents a Property Listing
    /// </summary>
    [DataContract(Name = "Listings.V2.Listing")]
    public partial class ListingsV2Listing : IEquatable<ListingsV2Listing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsV2Listing" /> class.
        /// </summary>
        /// <param name="objective">objective.</param>
        /// <param name="status">status.</param>
        /// <param name="saleMode">saleMode.</param>
        /// <param name="channel">channel.</param>
        /// <param name="id">The identifier which uniquely identifies the listing..</param>
        /// <param name="addressParts">addressParts.</param>
        /// <param name="advertiserIdentifiers">advertiserIdentifiers.</param>
        /// <param name="apmIdentifiers">apmIdentifiers.</param>
        /// <param name="bathrooms">Total number of bathrooms in the property.</param>
        /// <param name="bedrooms">Total number of bedrooms in the property; Studio apartments have a value of \\\&quot;0\\\&quot;.</param>
        /// <param name="buildingArea">The building area display value of the property e.g. 160 ha.</param>
        /// <param name="buildingAreaSqm">The properties building area in square meters.</param>
        /// <param name="carspaces">Total number of car spaces in the property..</param>
        /// <param name="dateAvailable">The date the property is available. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="dateCreated">The date/time the listing was created. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="dateUpdated">The date/time the listing had major update. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="dateMinorUpdated">When minor update applied to listing. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="datePurged">The date/time the listing was purged. It&#39;s only returned for archived listings. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="dateListed">The date/time last listed. DateTime is in AEST (Australian Eastern Standard Time) timezone..</param>
        /// <param name="description">The long description of the property provided by the advertiser.</param>
        /// <param name="devProjectId">The ID of the development project - null if no associated project.</param>
        /// <param name="energyEfficiencyRating">Energy Efficiency Rating value for ACT properties.</param>
        /// <param name="features">The property features specified by the advertiser.</param>
        /// <param name="geoLocation">geoLocation.</param>
        /// <param name="headline">The short description of the property provided by the advertiser.</param>
        /// <param name="inspectionDetails">inspectionDetails.</param>
        /// <param name="isNewDevelopment">Indicates whether the property is a new development.</param>
        /// <param name="landArea">The land area display string for the property e.g. 160 sqm.</param>
        /// <param name="landAreaSqm">The properties land area in square meters.</param>
        /// <param name="media">The media associated with the property provided by the advertiser.</param>
        /// <param name="priceDetails">priceDetails.</param>
        /// <param name="propertyId">The identifier which uniquely identifies the property being advertised.   This may be empty if the Address of property is poorly described.</param>
        /// <param name="propertyTypes">Types of the property.</param>
        /// <param name="rentalDetails">rentalDetails.</param>
        /// <param name="saleDetails">saleDetails.</param>
        /// <param name="isWithdrawn">Indicates if the property has been withdrawn from the market  The value will be &#39;true&#39; When a listing is taken off market without being sold or leased..</param>
        /// <param name="seoUrl">Listing SEO URL.</param>
        /// <param name="virtualTourUrl">The Listing&#39;s Virtual Tour URL..</param>
        /// <param name="homepassEnabled">If Homepass is enabled for the listing (agency).</param>
        /// <param name="statementOfInformation">statementOfInformation.</param>
        /// <param name="numberOfDwellings">Number of dwellings for current listing.</param>
        /// <param name="highlights">Highlight items for the listing.</param>
        public ListingsV2Listing(ListingsV2Objective objective = default(ListingsV2Objective), ListingsV2Status status = default(ListingsV2Status), ListingsV2ListingSaleMode saleMode = default(ListingsV2ListingSaleMode), ListingsV2Channel channel = default(ListingsV2Channel), int id = default(int), ListingsV2AddressParts addressParts = default(ListingsV2AddressParts), ListingsV2AdvertiserIdentifiers advertiserIdentifiers = default(ListingsV2AdvertiserIdentifiers), ListingsV2AustralianPropertyMonitorsIdentifiers apmIdentifiers = default(ListingsV2AustralianPropertyMonitorsIdentifiers), float? bathrooms = default(float?), float? bedrooms = default(float?), string buildingArea = default(string), double? buildingAreaSqm = default(double?), float? carspaces = default(float?), DateTime? dateAvailable = default(DateTime?), DateTime dateCreated = default(DateTime), DateTime dateUpdated = default(DateTime), DateTime dateMinorUpdated = default(DateTime), DateTime? datePurged = default(DateTime?), DateTime? dateListed = default(DateTime?), string description = default(string), int? devProjectId = default(int?), int? energyEfficiencyRating = default(int?), List<string> features = default(List<string>), ListingsV2GeoLocation geoLocation = default(ListingsV2GeoLocation), string headline = default(string), ListingsV2PropertyInspections inspectionDetails = default(ListingsV2PropertyInspections), bool isNewDevelopment = default(bool), string landArea = default(string), double? landAreaSqm = default(double?), List<ListingsV2ListingMedia> media = default(List<ListingsV2ListingMedia>), ListingsV2PriceDetails priceDetails = default(ListingsV2PriceDetails), string propertyId = default(string), List<ListingsV2PropertyType> propertyTypes = default(List<ListingsV2PropertyType>), ListingsV2RentalDetails rentalDetails = default(ListingsV2RentalDetails), ListingsV2SaleDetails saleDetails = default(ListingsV2SaleDetails), bool isWithdrawn = default(bool), string seoUrl = default(string), string virtualTourUrl = default(string), bool homepassEnabled = default(bool), ListingsV2StatementOfInformation statementOfInformation = default(ListingsV2StatementOfInformation), int? numberOfDwellings = default(int?), List<string> highlights = default(List<string>))
        {
            this.Objective = objective;
            this.Status = status;
            this.SaleMode = saleMode;
            this.Channel = channel;
            this.Id = id;
            this.AddressParts = addressParts;
            this.AdvertiserIdentifiers = advertiserIdentifiers;
            this.ApmIdentifiers = apmIdentifiers;
            this.Bathrooms = bathrooms;
            this.Bedrooms = bedrooms;
            this.BuildingArea = buildingArea;
            this.BuildingAreaSqm = buildingAreaSqm;
            this.Carspaces = carspaces;
            this.DateAvailable = dateAvailable;
            this.DateCreated = dateCreated;
            this.DateUpdated = dateUpdated;
            this.DateMinorUpdated = dateMinorUpdated;
            this.DatePurged = datePurged;
            this.DateListed = dateListed;
            this.Description = description;
            this.DevProjectId = devProjectId;
            this.EnergyEfficiencyRating = energyEfficiencyRating;
            this.Features = features;
            this.GeoLocation = geoLocation;
            this.Headline = headline;
            this.InspectionDetails = inspectionDetails;
            this.IsNewDevelopment = isNewDevelopment;
            this.LandArea = landArea;
            this.LandAreaSqm = landAreaSqm;
            this.Media = media;
            this.PriceDetails = priceDetails;
            this.PropertyId = propertyId;
            this.PropertyTypes = propertyTypes;
            this.RentalDetails = rentalDetails;
            this.SaleDetails = saleDetails;
            this.IsWithdrawn = isWithdrawn;
            this.SeoUrl = seoUrl;
            this.VirtualTourUrl = virtualTourUrl;
            this.HomepassEnabled = homepassEnabled;
            this.StatementOfInformation = statementOfInformation;
            this.NumberOfDwellings = numberOfDwellings;
            this.Highlights = highlights;
        }

        /// <summary>
        /// Gets or Sets Objective
        /// </summary>
        [DataMember(Name = "objective", EmitDefaultValue = false)]
        public ListingsV2Objective Objective { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ListingsV2Status Status { get; set; }

        /// <summary>
        /// Gets or Sets SaleMode
        /// </summary>
        [DataMember(Name = "saleMode", EmitDefaultValue = false)]
        public ListingsV2ListingSaleMode SaleMode { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public ListingsV2Channel Channel { get; set; }

        /// <summary>
        /// The identifier which uniquely identifies the listing.
        /// </summary>
        /// <value>The identifier which uniquely identifies the listing.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AddressParts
        /// </summary>
        [DataMember(Name = "addressParts", EmitDefaultValue = false)]
        public ListingsV2AddressParts AddressParts { get; set; }

        /// <summary>
        /// Gets or Sets AdvertiserIdentifiers
        /// </summary>
        [DataMember(Name = "advertiserIdentifiers", EmitDefaultValue = false)]
        public ListingsV2AdvertiserIdentifiers AdvertiserIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets ApmIdentifiers
        /// </summary>
        [DataMember(Name = "apmIdentifiers", EmitDefaultValue = false)]
        public ListingsV2AustralianPropertyMonitorsIdentifiers ApmIdentifiers { get; set; }

        /// <summary>
        /// Total number of bathrooms in the property
        /// </summary>
        /// <value>Total number of bathrooms in the property</value>
        [DataMember(Name = "bathrooms", EmitDefaultValue = true)]
        public float? Bathrooms { get; set; }

        /// <summary>
        /// Total number of bedrooms in the property; Studio apartments have a value of \\\&quot;0\\\&quot;
        /// </summary>
        /// <value>Total number of bedrooms in the property; Studio apartments have a value of \\\&quot;0\\\&quot;</value>
        [DataMember(Name = "bedrooms", EmitDefaultValue = true)]
        public float? Bedrooms { get; set; }

        /// <summary>
        /// The building area display value of the property e.g. 160 ha
        /// </summary>
        /// <value>The building area display value of the property e.g. 160 ha</value>
        [DataMember(Name = "buildingArea", EmitDefaultValue = true)]
        public string BuildingArea { get; set; }

        /// <summary>
        /// The properties building area in square meters
        /// </summary>
        /// <value>The properties building area in square meters</value>
        [DataMember(Name = "buildingAreaSqm", EmitDefaultValue = true)]
        public double? BuildingAreaSqm { get; set; }

        /// <summary>
        /// Total number of car spaces in the property.
        /// </summary>
        /// <value>Total number of car spaces in the property.</value>
        [DataMember(Name = "carspaces", EmitDefaultValue = true)]
        public float? Carspaces { get; set; }

        /// <summary>
        /// The date the property is available. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>The date the property is available. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "dateAvailable", EmitDefaultValue = true)]
        public DateTime? DateAvailable { get; set; }

        /// <summary>
        /// The date/time the listing was created. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>The date/time the listing was created. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// The date/time the listing had major update. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>The date/time the listing had major update. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public DateTime DateUpdated { get; set; }

        /// <summary>
        /// When minor update applied to listing. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>When minor update applied to listing. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "dateMinorUpdated", EmitDefaultValue = false)]
        public DateTime DateMinorUpdated { get; set; }

        /// <summary>
        /// The date/time the listing was purged. It&#39;s only returned for archived listings. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>The date/time the listing was purged. It&#39;s only returned for archived listings. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "datePurged", EmitDefaultValue = true)]
        public DateTime? DatePurged { get; set; }

        /// <summary>
        /// The date/time last listed. DateTime is in AEST (Australian Eastern Standard Time) timezone.
        /// </summary>
        /// <value>The date/time last listed. DateTime is in AEST (Australian Eastern Standard Time) timezone.</value>
        [DataMember(Name = "dateListed", EmitDefaultValue = true)]
        public DateTime? DateListed { get; set; }

        /// <summary>
        /// The long description of the property provided by the advertiser
        /// </summary>
        /// <value>The long description of the property provided by the advertiser</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the development project - null if no associated project
        /// </summary>
        /// <value>The ID of the development project - null if no associated project</value>
        [DataMember(Name = "devProjectId", EmitDefaultValue = true)]
        public int? DevProjectId { get; set; }

        /// <summary>
        /// Energy Efficiency Rating value for ACT properties
        /// </summary>
        /// <value>Energy Efficiency Rating value for ACT properties</value>
        [DataMember(Name = "energyEfficiencyRating", EmitDefaultValue = true)]
        public int? EnergyEfficiencyRating { get; set; }

        /// <summary>
        /// The property features specified by the advertiser
        /// </summary>
        /// <value>The property features specified by the advertiser</value>
        [DataMember(Name = "features", EmitDefaultValue = true)]
        public List<string> Features { get; set; }

        /// <summary>
        /// Gets or Sets GeoLocation
        /// </summary>
        [DataMember(Name = "geoLocation", EmitDefaultValue = false)]
        public ListingsV2GeoLocation GeoLocation { get; set; }

        /// <summary>
        /// The short description of the property provided by the advertiser
        /// </summary>
        /// <value>The short description of the property provided by the advertiser</value>
        [DataMember(Name = "headline", EmitDefaultValue = true)]
        public string Headline { get; set; }

        /// <summary>
        /// Gets or Sets InspectionDetails
        /// </summary>
        [DataMember(Name = "inspectionDetails", EmitDefaultValue = false)]
        public ListingsV2PropertyInspections InspectionDetails { get; set; }

        /// <summary>
        /// Indicates whether the property is a new development
        /// </summary>
        /// <value>Indicates whether the property is a new development</value>
        [DataMember(Name = "isNewDevelopment", EmitDefaultValue = false)]
        public bool IsNewDevelopment { get; set; }

        /// <summary>
        /// The land area display string for the property e.g. 160 sqm
        /// </summary>
        /// <value>The land area display string for the property e.g. 160 sqm</value>
        [DataMember(Name = "landArea", EmitDefaultValue = true)]
        public string LandArea { get; set; }

        /// <summary>
        /// The properties land area in square meters
        /// </summary>
        /// <value>The properties land area in square meters</value>
        [DataMember(Name = "landAreaSqm", EmitDefaultValue = true)]
        public double? LandAreaSqm { get; set; }

        /// <summary>
        /// The media associated with the property provided by the advertiser
        /// </summary>
        /// <value>The media associated with the property provided by the advertiser</value>
        [DataMember(Name = "media", EmitDefaultValue = true)]
        public List<ListingsV2ListingMedia> Media { get; set; }

        /// <summary>
        /// Gets or Sets PriceDetails
        /// </summary>
        [DataMember(Name = "priceDetails", EmitDefaultValue = false)]
        public ListingsV2PriceDetails PriceDetails { get; set; }

        /// <summary>
        /// The identifier which uniquely identifies the property being advertised.   This may be empty if the Address of property is poorly described
        /// </summary>
        /// <value>The identifier which uniquely identifies the property being advertised.   This may be empty if the Address of property is poorly described</value>
        [DataMember(Name = "propertyId", EmitDefaultValue = true)]
        public string PropertyId { get; set; }

        /// <summary>
        /// Types of the property
        /// </summary>
        /// <value>Types of the property</value>
        [DataMember(Name = "propertyTypes", EmitDefaultValue = true)]
        public List<ListingsV2PropertyType> PropertyTypes { get; set; }

        /// <summary>
        /// Gets or Sets RentalDetails
        /// </summary>
        [DataMember(Name = "rentalDetails", EmitDefaultValue = false)]
        public ListingsV2RentalDetails RentalDetails { get; set; }

        /// <summary>
        /// Gets or Sets SaleDetails
        /// </summary>
        [DataMember(Name = "saleDetails", EmitDefaultValue = false)]
        public ListingsV2SaleDetails SaleDetails { get; set; }

        /// <summary>
        /// Indicates if the property has been withdrawn from the market  The value will be &#39;true&#39; When a listing is taken off market without being sold or leased.
        /// </summary>
        /// <value>Indicates if the property has been withdrawn from the market  The value will be &#39;true&#39; When a listing is taken off market without being sold or leased.</value>
        [DataMember(Name = "isWithdrawn", EmitDefaultValue = false)]
        public bool IsWithdrawn { get; set; }

        /// <summary>
        /// Listing SEO URL
        /// </summary>
        /// <value>Listing SEO URL</value>
        [DataMember(Name = "seoUrl", EmitDefaultValue = true)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// The Listing&#39;s Virtual Tour URL.
        /// </summary>
        /// <value>The Listing&#39;s Virtual Tour URL.</value>
        [DataMember(Name = "virtualTourUrl", EmitDefaultValue = true)]
        public string VirtualTourUrl { get; set; }

        /// <summary>
        /// If Homepass is enabled for the listing (agency)
        /// </summary>
        /// <value>If Homepass is enabled for the listing (agency)</value>
        [DataMember(Name = "homepassEnabled", EmitDefaultValue = false)]
        public bool HomepassEnabled { get; set; }

        /// <summary>
        /// Gets or Sets StatementOfInformation
        /// </summary>
        [DataMember(Name = "statementOfInformation", EmitDefaultValue = false)]
        public ListingsV2StatementOfInformation StatementOfInformation { get; set; }

        /// <summary>
        /// Number of dwellings for current listing
        /// </summary>
        /// <value>Number of dwellings for current listing</value>
        [DataMember(Name = "numberOfDwellings", EmitDefaultValue = true)]
        public int? NumberOfDwellings { get; set; }

        /// <summary>
        /// Highlight items for the listing
        /// </summary>
        /// <value>Highlight items for the listing</value>
        [DataMember(Name = "highlights", EmitDefaultValue = true)]
        public List<string> Highlights { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsV2Listing {\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SaleMode: ").Append(SaleMode).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AddressParts: ").Append(AddressParts).Append("\n");
            sb.Append("  AdvertiserIdentifiers: ").Append(AdvertiserIdentifiers).Append("\n");
            sb.Append("  ApmIdentifiers: ").Append(ApmIdentifiers).Append("\n");
            sb.Append("  Bathrooms: ").Append(Bathrooms).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  BuildingArea: ").Append(BuildingArea).Append("\n");
            sb.Append("  BuildingAreaSqm: ").Append(BuildingAreaSqm).Append("\n");
            sb.Append("  Carspaces: ").Append(Carspaces).Append("\n");
            sb.Append("  DateAvailable: ").Append(DateAvailable).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  DateMinorUpdated: ").Append(DateMinorUpdated).Append("\n");
            sb.Append("  DatePurged: ").Append(DatePurged).Append("\n");
            sb.Append("  DateListed: ").Append(DateListed).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DevProjectId: ").Append(DevProjectId).Append("\n");
            sb.Append("  EnergyEfficiencyRating: ").Append(EnergyEfficiencyRating).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  GeoLocation: ").Append(GeoLocation).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  InspectionDetails: ").Append(InspectionDetails).Append("\n");
            sb.Append("  IsNewDevelopment: ").Append(IsNewDevelopment).Append("\n");
            sb.Append("  LandArea: ").Append(LandArea).Append("\n");
            sb.Append("  LandAreaSqm: ").Append(LandAreaSqm).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  PriceDetails: ").Append(PriceDetails).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  PropertyTypes: ").Append(PropertyTypes).Append("\n");
            sb.Append("  RentalDetails: ").Append(RentalDetails).Append("\n");
            sb.Append("  SaleDetails: ").Append(SaleDetails).Append("\n");
            sb.Append("  IsWithdrawn: ").Append(IsWithdrawn).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  VirtualTourUrl: ").Append(VirtualTourUrl).Append("\n");
            sb.Append("  HomepassEnabled: ").Append(HomepassEnabled).Append("\n");
            sb.Append("  StatementOfInformation: ").Append(StatementOfInformation).Append("\n");
            sb.Append("  NumberOfDwellings: ").Append(NumberOfDwellings).Append("\n");
            sb.Append("  Highlights: ").Append(Highlights).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingsV2Listing);
        }

        /// <summary>
        /// Returns true if ListingsV2Listing instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingsV2Listing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsV2Listing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Objective == input.Objective ||
                    (this.Objective != null &&
                    this.Objective.Equals(input.Objective))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SaleMode == input.SaleMode ||
                    (this.SaleMode != null &&
                    this.SaleMode.Equals(input.SaleMode))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AddressParts == input.AddressParts ||
                    (this.AddressParts != null &&
                    this.AddressParts.Equals(input.AddressParts))
                ) && 
                (
                    this.AdvertiserIdentifiers == input.AdvertiserIdentifiers ||
                    (this.AdvertiserIdentifiers != null &&
                    this.AdvertiserIdentifiers.Equals(input.AdvertiserIdentifiers))
                ) && 
                (
                    this.ApmIdentifiers == input.ApmIdentifiers ||
                    (this.ApmIdentifiers != null &&
                    this.ApmIdentifiers.Equals(input.ApmIdentifiers))
                ) && 
                (
                    this.Bathrooms == input.Bathrooms ||
                    (this.Bathrooms != null &&
                    this.Bathrooms.Equals(input.Bathrooms))
                ) && 
                (
                    this.Bedrooms == input.Bedrooms ||
                    (this.Bedrooms != null &&
                    this.Bedrooms.Equals(input.Bedrooms))
                ) && 
                (
                    this.BuildingArea == input.BuildingArea ||
                    (this.BuildingArea != null &&
                    this.BuildingArea.Equals(input.BuildingArea))
                ) && 
                (
                    this.BuildingAreaSqm == input.BuildingAreaSqm ||
                    (this.BuildingAreaSqm != null &&
                    this.BuildingAreaSqm.Equals(input.BuildingAreaSqm))
                ) && 
                (
                    this.Carspaces == input.Carspaces ||
                    (this.Carspaces != null &&
                    this.Carspaces.Equals(input.Carspaces))
                ) && 
                (
                    this.DateAvailable == input.DateAvailable ||
                    (this.DateAvailable != null &&
                    this.DateAvailable.Equals(input.DateAvailable))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.DateMinorUpdated == input.DateMinorUpdated ||
                    (this.DateMinorUpdated != null &&
                    this.DateMinorUpdated.Equals(input.DateMinorUpdated))
                ) && 
                (
                    this.DatePurged == input.DatePurged ||
                    (this.DatePurged != null &&
                    this.DatePurged.Equals(input.DatePurged))
                ) && 
                (
                    this.DateListed == input.DateListed ||
                    (this.DateListed != null &&
                    this.DateListed.Equals(input.DateListed))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DevProjectId == input.DevProjectId ||
                    (this.DevProjectId != null &&
                    this.DevProjectId.Equals(input.DevProjectId))
                ) && 
                (
                    this.EnergyEfficiencyRating == input.EnergyEfficiencyRating ||
                    (this.EnergyEfficiencyRating != null &&
                    this.EnergyEfficiencyRating.Equals(input.EnergyEfficiencyRating))
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.GeoLocation == input.GeoLocation ||
                    (this.GeoLocation != null &&
                    this.GeoLocation.Equals(input.GeoLocation))
                ) && 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.InspectionDetails == input.InspectionDetails ||
                    (this.InspectionDetails != null &&
                    this.InspectionDetails.Equals(input.InspectionDetails))
                ) && 
                (
                    this.IsNewDevelopment == input.IsNewDevelopment ||
                    this.IsNewDevelopment.Equals(input.IsNewDevelopment)
                ) && 
                (
                    this.LandArea == input.LandArea ||
                    (this.LandArea != null &&
                    this.LandArea.Equals(input.LandArea))
                ) && 
                (
                    this.LandAreaSqm == input.LandAreaSqm ||
                    (this.LandAreaSqm != null &&
                    this.LandAreaSqm.Equals(input.LandAreaSqm))
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.PriceDetails == input.PriceDetails ||
                    (this.PriceDetails != null &&
                    this.PriceDetails.Equals(input.PriceDetails))
                ) && 
                (
                    this.PropertyId == input.PropertyId ||
                    (this.PropertyId != null &&
                    this.PropertyId.Equals(input.PropertyId))
                ) && 
                (
                    this.PropertyTypes == input.PropertyTypes ||
                    this.PropertyTypes != null &&
                    input.PropertyTypes != null &&
                    this.PropertyTypes.SequenceEqual(input.PropertyTypes)
                ) && 
                (
                    this.RentalDetails == input.RentalDetails ||
                    (this.RentalDetails != null &&
                    this.RentalDetails.Equals(input.RentalDetails))
                ) && 
                (
                    this.SaleDetails == input.SaleDetails ||
                    (this.SaleDetails != null &&
                    this.SaleDetails.Equals(input.SaleDetails))
                ) && 
                (
                    this.IsWithdrawn == input.IsWithdrawn ||
                    this.IsWithdrawn.Equals(input.IsWithdrawn)
                ) && 
                (
                    this.SeoUrl == input.SeoUrl ||
                    (this.SeoUrl != null &&
                    this.SeoUrl.Equals(input.SeoUrl))
                ) && 
                (
                    this.VirtualTourUrl == input.VirtualTourUrl ||
                    (this.VirtualTourUrl != null &&
                    this.VirtualTourUrl.Equals(input.VirtualTourUrl))
                ) && 
                (
                    this.HomepassEnabled == input.HomepassEnabled ||
                    this.HomepassEnabled.Equals(input.HomepassEnabled)
                ) && 
                (
                    this.StatementOfInformation == input.StatementOfInformation ||
                    (this.StatementOfInformation != null &&
                    this.StatementOfInformation.Equals(input.StatementOfInformation))
                ) && 
                (
                    this.NumberOfDwellings == input.NumberOfDwellings ||
                    (this.NumberOfDwellings != null &&
                    this.NumberOfDwellings.Equals(input.NumberOfDwellings))
                ) && 
                (
                    this.Highlights == input.Highlights ||
                    this.Highlights != null &&
                    input.Highlights != null &&
                    this.Highlights.SequenceEqual(input.Highlights)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Objective != null)
                    hashCode = hashCode * 59 + this.Objective.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SaleMode != null)
                    hashCode = hashCode * 59 + this.SaleMode.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AddressParts != null)
                    hashCode = hashCode * 59 + this.AddressParts.GetHashCode();
                if (this.AdvertiserIdentifiers != null)
                    hashCode = hashCode * 59 + this.AdvertiserIdentifiers.GetHashCode();
                if (this.ApmIdentifiers != null)
                    hashCode = hashCode * 59 + this.ApmIdentifiers.GetHashCode();
                if (this.Bathrooms != null)
                    hashCode = hashCode * 59 + this.Bathrooms.GetHashCode();
                if (this.Bedrooms != null)
                    hashCode = hashCode * 59 + this.Bedrooms.GetHashCode();
                if (this.BuildingArea != null)
                    hashCode = hashCode * 59 + this.BuildingArea.GetHashCode();
                if (this.BuildingAreaSqm != null)
                    hashCode = hashCode * 59 + this.BuildingAreaSqm.GetHashCode();
                if (this.Carspaces != null)
                    hashCode = hashCode * 59 + this.Carspaces.GetHashCode();
                if (this.DateAvailable != null)
                    hashCode = hashCode * 59 + this.DateAvailable.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateUpdated != null)
                    hashCode = hashCode * 59 + this.DateUpdated.GetHashCode();
                if (this.DateMinorUpdated != null)
                    hashCode = hashCode * 59 + this.DateMinorUpdated.GetHashCode();
                if (this.DatePurged != null)
                    hashCode = hashCode * 59 + this.DatePurged.GetHashCode();
                if (this.DateListed != null)
                    hashCode = hashCode * 59 + this.DateListed.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DevProjectId != null)
                    hashCode = hashCode * 59 + this.DevProjectId.GetHashCode();
                if (this.EnergyEfficiencyRating != null)
                    hashCode = hashCode * 59 + this.EnergyEfficiencyRating.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.GeoLocation != null)
                    hashCode = hashCode * 59 + this.GeoLocation.GetHashCode();
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                if (this.InspectionDetails != null)
                    hashCode = hashCode * 59 + this.InspectionDetails.GetHashCode();
                hashCode = hashCode * 59 + this.IsNewDevelopment.GetHashCode();
                if (this.LandArea != null)
                    hashCode = hashCode * 59 + this.LandArea.GetHashCode();
                if (this.LandAreaSqm != null)
                    hashCode = hashCode * 59 + this.LandAreaSqm.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.PriceDetails != null)
                    hashCode = hashCode * 59 + this.PriceDetails.GetHashCode();
                if (this.PropertyId != null)
                    hashCode = hashCode * 59 + this.PropertyId.GetHashCode();
                if (this.PropertyTypes != null)
                    hashCode = hashCode * 59 + this.PropertyTypes.GetHashCode();
                if (this.RentalDetails != null)
                    hashCode = hashCode * 59 + this.RentalDetails.GetHashCode();
                if (this.SaleDetails != null)
                    hashCode = hashCode * 59 + this.SaleDetails.GetHashCode();
                hashCode = hashCode * 59 + this.IsWithdrawn.GetHashCode();
                if (this.SeoUrl != null)
                    hashCode = hashCode * 59 + this.SeoUrl.GetHashCode();
                if (this.VirtualTourUrl != null)
                    hashCode = hashCode * 59 + this.VirtualTourUrl.GetHashCode();
                hashCode = hashCode * 59 + this.HomepassEnabled.GetHashCode();
                if (this.StatementOfInformation != null)
                    hashCode = hashCode * 59 + this.StatementOfInformation.GetHashCode();
                if (this.NumberOfDwellings != null)
                    hashCode = hashCode * 59 + this.NumberOfDwellings.GetHashCode();
                if (this.Highlights != null)
                    hashCode = hashCode * 59 + this.Highlights.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
